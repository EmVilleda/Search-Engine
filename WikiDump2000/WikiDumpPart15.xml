<mediawiki xmlns="http://www.mediawiki.org/xml/export-0.9/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mediawiki.org/xml/export-0.9/ http://www.mediawiki.org/xml/export-0.9.xsd" version="0.9" xml:lang="en">
  <page>
    <title>World History/The Rise of Dictatorship and Totalitarianism</title>
    <ns>0</ns>
    <id>505</id>
    <revision>
      <id>2699554</id>
      <parentid>2699523</parentid>
      <timestamp>2014-09-11T16:49:54Z</timestamp>
      <contributor>
        <username>CallumPoole</username>
        <id>1620806</id>
      </contributor>
      <comment>Rejected the last 2 text changes (by [[Special:Contributions/98.179.134.2|98.179.134.2]]) and restored revision 2621503 by Xania</comment>
      <text xml:space="preserve">{{WHP - page top 1}}

[[World History/The Rise of Dictatorship and Totalitarianism/Quick Quiz|Quick Quiz]]
==Benito Mussolini and Fascism in Italy (1922-1939)==
Benito Mussolini, born into a poor blacksmith's family, was so named by his radically socialist father (his mother was a devout Catholic schoolteacher) after the executioner of a Mexican emperor. Shortly after becoming qualified as a teacher, Mussolini taught in a small school. Mussolini was a far-left socialist and advocated a violent revolution to overthrow the parliamentary monarchy within Italy and denounced nationalism. When World War I broke out in 1914, however, he broke with his party comrades when he celebrated the entry of his nation into the war – even though he had dodged the draft. Throughout the Great War, he fought earnestly to keep Italy involved, and, financed by large arms manufacturers and the British and French governments, operated a small, pro-war newspaper. When the war came to an end in 1919, Mussolini was quick to recognize the dissatisfaction of many of the homebound soldiers and countrymen concerning the Treaty of Versailles. In an effort to persuade Italy to enter the war on their side, the Allied Powers promised Italy significant territorial gains at the expense of the Austro-Hungarian Empire. The final settlement, however, was less favorable to Italian interests than that originally promised, and resulted in widespread malcontent regarding the post-war government. 

In March of 1919, Mussolini created a radically nationalist and anti-communist party – Fasci Italiani di Combattimento. Mussolini, who loved the splendor and extravagance of Ancient Rome, adopted a Roman symbol of authority, the ''fascio'' (an axe wrapped in whipping rods) for his group of devotees. As inflation and economic decline spread throughout Europe and Italy following the war, factory workers began to go on strikes in northern Italy. In 1920, Mussolini’s group’s numbers were bolstered by ex-soldiers willing to break up these strikes. Mussolini marched 50,000 Fascist supporters (known as Blackshirts for their attire) in squads against the strikers and left-wing newspapers. The Blackshirts garnered their support from the financial contributions of industrialists and large landowners, who shared their anti-communist sentiments, but also believed that they could control the excesses of the Fascist party. The police often refused to stop the squads, allowing the Blackshirts freedom to inflict whatever damage they wished.

The widespread destabilization of the previous social orders throughout Europe due to economic uncertainty in the aftermath of the war and the successful establishment of the Soviet Union as a socialist state led many to believe that democracy was weak and ineffectual, while monarchy was discredited as an oppressive and unresponsive system. A command economy was thought to be a progressive and scientific method of social organization. Fascism incorporated the futuristic and populist elements of Communist ideology, but also identified itself strongly with the nationalism that had created the modern European nation-states in the late 19th Century.

Despite growing popularity and the introduction of proportional representation in the Parliament, Mussolini's party faired poorly at the polls, winning no seats in 1920 and only 35 in May 1921 (7% of the vote). The internal political situation however, swung in Mussolini's favor. The birth of the Communist Party of Italy, openly allied with Lenin's Soviet regime in Moscow, polarized Italian politics. Proportional representation caused stagnation in government, until a weak coalition finally came into place in February 1922. In October of that year, as Mussolini was giving one of his soon-to-be characteristic speeches from atop a balcony, he suddenly cried, “To Rome! To Rome!” The crowd of supporters, much to Mussolini’s surprise, echoed his cry. Blackshirts to the number of 40,000 organized to march on the capital. Mussolini, however, went into hiding, afraid of the impending collapse of his movement. When it became clear that the army would not oppose his action, however, Mussolini moved decisively. As Blackshirts began to occupy key posts in Rome on 27-28 October, the king, Victor Emmanuel III, to the chagrin of his elected cabinet, appointed Mussolini as Prime Minister so long as Mussolini halted the advance to Rome. Mussolini agreed. His word was not to be trusted, however, as he soon after marched on the city anyway, creating an incredible propaganda success for the Fascists. Over the next few years, he led a slow-motion coup d'etat. By 1926, he had become the undisputed totalitarian dictator (“Il Duce,” or “the leader”) of Italy.

Mussolini's regime embarked on a campaign of militarization and political maneuvering.   First, he began to ready Italy for war. One of Mussolini’s driving ambitions was to restore the hegemony of the Roman Empire in a modern Italy. To that end, he encouraged couples to have as many children as possible as he organized large-scale expansions of the agricultural sector to feed them.  He extended an olive branch to the Catholic Church by way of the Lateran Accords, which recognized papal authority over the Vatican and declared Catholicism the official religion of all of Italy, ending hundreds of years of estrangement. Mussolini seemed to have been a victim of his own propaganda as, in 1935, he deemed his newly-formed army strong enough to invade Ethiopia. The Italian army invaded from Italian-held Eritrea. The underestimation of the enemy proved fatal for thousands of ill-prepared Italians as the army met face-to-face with the “Lion of the Desert,” Omar Mukhtar (whose death by hanging at the hands of the Italians ended his twenty-year resistance). The poorly-armed Ethiopians were eventually defeated primarily due to terror tactics, such as poison gas and terror bombings. Mussolini’s sense of superiority did not seem hurt by his army's poor preparation, as, over the next few years, he became a close ally of Hitler's. In 1939, Mussolini signed the “Pact of Steel,” creating a formal alliance between Italy and Nazi Germany. Mussolini, while publically effervescent, did not have the universal power and control enjoyed by Adolf Hitler and Joseph Stalin, a lack of gravitas which would later cost him his life. Nevertheless, Mussolini rode at the helm of the 20th century dictatorship, invented the terms Fascism and Totalitarianism, and pioneered the use of propaganda to control the masses in newspapers, posters, radio, and in movie cinemas.

==The Weimar Republic (1918-1933)==

Following the complete collapse of Germany's armed forces throughout the waning months of 1918, German generals and  politicians desperately sought to surrender. The Allied Powers, however, would not negotiate with the autocratic Kaiser Wilhelm II, and insisted upon Germany to adopt a democratic government. In this disarray, Germany quickly fell along the slippery slope to revolution, appearing as though it might go the same direction as Russia – Marxist.  After Kaiser Wilhelm II abdicated the throne on November 7, a new republic was declared, and a National Assembly convened at Weimar to circumvent the unrest in Berlin. The hastily-formed republican government took its name from the host city and surrendered. The Allied Powers, in turn, forced upon the defeated nation extremely harsh and punitive terms through the Treaty of Versailles. Clause 231 of the treaty, the so-called &quot;war-guilt&quot; clause, called for Germany to accept total and sole blame for the Great War (while, arguably, they merely joined) and to pay reparations to the “victimized” Allied Powers. Finally, it was established that Germany was to disband its air force permanently, and to have no more than 100,000 men in its armed forces. The Rhineland, along the Franco-German border, was demilitarized and put under French jurisdiction.  The extremely valuable Saar region, home to most of Germany’s factories, was made autonomous.

These harsh restrictions gave the fledgling Weimar Republic unwarranted disrespect. Many Germans had opposed the treaty, and it created large amounts of resentment within Germany.  (Retrospectively, the Treaty of Versailles is seen as one of the most fundamental causes of the rise of Adolf Hitler and World War II.) The newfound lack of industry compounded the reparations Germany was forced to pay. To assuage its monetary woes, The Weimar Republic began to print paper money at exhorbitant rates – rates so high, that, by 1923, the American Dollar was worth 4.2 trillion German Marks. Amidst the chaos of disappearing life savings and a tumultuous economy, Gustav Stresemann came to the forefront of Weimar politik. Under his leadership, the Weimar Republic managed to regain marked stability in the period of 1923-1929. peoples discontent about the weimar government increased day by day. Hyperinflation was corrected, but Stresemann's death in 1929 and the catastrophic worldwide Great Depression the same year brought about the death of the Weimar Republic. This untimely fall led to the empowerment of a man who would vault Germany to an unprecedented world power, who would pursue the elimination of “undesirables” such as Jews and homosexuals, who would begin the second world war of the 20th Century. Hitler, who had been subverting many of his countrymen during the economically tumultuous 1920s, took advantage of the Weimar Republic’s fall.

==The Rise of Adolf Hitler in Germany (1914-1939)==

In August 1914, as the world took the fatal plunge into World War I, an unknown and unimportant young Austrian national named Adolf Hitler enlisted in the German Army.  Born on April 20, 1889 into a troubled and strict Austrian family, Hitler was a failed artist and an ardent German nationalist (Austrians are ethnically German and indistinguishable from their cousins).  His anti-semitic views already in place from his early life as a vagrant (he dropped out of high school and was refused admission to a Vienna art school), Hitler was eager to serve his adopted homeland.  He had an exemplary record of service and received the prestigious Iron Cross, both First and Second Class, and also achieved the undistinguished rank of Corporal.  Shocked and deeply angered by the German defeat in 1918, he personally put the sole blame on the so-called &quot;November politicians&quot;  (referring to those who formed the Weimar Republic). He also put blame on the Jews for the downfall of Germany. 

After the war, Hitler remained in the army and after receiving intelligence and oratory training, became an intelligence official tasked with infiltrating political parties and reporting to his superiors on their activities.  In March 1919, he was instructed to sit in on a meeting of the small nationalist German Worker's Party.  He joined the party in September, and upon his discharge from the army in 1920, soon became the leader of the party which changed its name to the German National Socialist Worker's Party (NSDAP or Nazi for short, from its German name ''Nationalsozialistische Deutsche Arbeiterpartei'').  Over the next few years, Hitler's oratorical skills allowed the party to expand.  It soon had its own private armed forces, known as the SA led by Ernst Rohm.  Another important admirer was Erich Lundendorff, a Field Marshall from the First World War, whose help proved invaluable in setting up the Beer Hall Putsch.

===The Beer Hall Putsch and Mein Kampf (1923-1925)===
On November 8, 1923, Adolf Hitler and a group of SA raided a beer hall in Munich where the three most powerful politicians in Bavaria were giving speeches.  Taking the men hostage, Hitler threatened them with death (and his own suicide) if they did not side with his intention to overturn Bavaria's government and then to march on Berlin.  The men agreed (with little other choice).  Hitler then made the colossal error of leaving the hall.  He left Marshall Lundendorff in command, who upon the assurances of the three politicians that they only wished to return home to their families and would continue to support Hitler, allowed them to leave the hall.  The men quickly denounced Hitler and mobilized the government's resistance to his &quot;revolution&quot;.  Adolf Hitler was enraged.  He decided to march his SA the next morning against the Bavarian government.  However, army regulars were already at the War Ministry when Hitler arrived and the rebellion was quickly scattered.  Hitler was arrested and tried.  He spoke so forcefully at his trial however, that the head judge had to harass the other two judges into even convicting him at all.  He received a five year sentence.  The abortive coup Hitler tried to carry out is referred to as the Beer Hall Putsch.

In prison, Hitler dictated the book ''Mein Kampf'' (My Struggle) to his close friend and confidant, Rudolf Hess.  The book was a savage &quot;hymn of hate&quot; denouncing Jews as &quot;parasites&quot; and laying down the foundation for the plan of military conquest Hitler would later attempt.  It was all painfully clear: the rearmament of Germany, the invasion of Poland, the invasion of the Soviet Union; Hitler had written down for anyone who wished to read it his plan of action.  Unfortunately, few non-Germans read the book, but all too many Germans did.  Hitler was released after spending only eight months of his sentence, mostly because the authorities thought he was harmless.  He found the Nazi party virtually moribund.  In 1925, he formed the ''Schutzstaffel'' (SS) to be his personal body guard under the leadership of Heinrich Himmler.

===The Nazi Regime (1933-1939)=== 
Through the use of propaganda, Hitler became immensely popular among the German people.  To end the depressions, Hitler followed a program of massive public works, including the infamous Autobahn, dams, roads, railroads, and civil improvements.  His official announcement of rearmament in 1936 (although it had actually begun much earlier) stimulated the economy further, as it would in the United States during the Second World War.  Culture evolved along a strict set of party rules.  Men were the heads of work and home; a woman's place was as a cleaner and a mother.  The Nazis encouraged large families to literally create men to serve in the army.  The Nazis, through their policy of racism, wanted superiority in every sphere of life.  When the Olympic Games came to Berlin in 1936, the Germans showed off their athletes in huge stadiums built for the purpose.

Adolf Hitler practiced a policy of racial superiority of the Germans, whom he called Aryans, and people were sorted by the correct ethnic &quot;purity&quot;.  The ideal was the tall, blond, blue-eyed, muscular, and handsome Nordic youth (ironically, Hitler had brown hair).  Hitler's regime followed a totalitarian policy; the SS and the secret police, the Gestapo, ruthlessly enforced loyalty to Hitler and rounded up the Nazi's enemies.  In 1934, when the army had demanded as the price of its support the dissolution of the SA, Hitler had Ernst Rohm assassinated.  Heinrich Himmler became the chief of secret police activities and the mastermind behind the terror.  In 1935, the Nazis enacted the Nuremberg Laws, which placed extreme restrictions of Jews and their freedoms as human beings.  The economic lives of the Jews were smashed.  At this stage however, Hitler was not actively killing Jews but deporting them.  The Nazis operated concentration camps at this time to deal primarily with political prisoners.

The propaganda machine of the Nazis was similar to that of Stalin in the USSR.  However, the Nazis, under propaganda minister Joseph Goebbels, used their propaganda to acquire not only acquiescence to Hitler's schemes, but also to convince the Germans of their policy of racial purity and antisemitism.  Goebbels saw to it that, like in the Soviet Union, a picture of the Führer appeared in every building and home, and in many public places.  Posters were one of the favorites of the Nazis.  They also used the theater extensively to bring in support for the party's goals.

==Joseph Stalin takes power in the Soviet Union (1924-1934)==



When Vladimir Lenin died in 1924, he left a power vacuum behind in the wake of his death, centering on the continued use of the New Economic Policy (NEP).  The primary contenders for political power were Joseph Stalin and Leon Trotsky.  Leon Trotsky was a brilliant politician, and had been Commissar of War during the Civil War.  He was a gifted orator and a dedicated Communist, especially to the cause of causing Marxist revolutions internationally, through the use of arms if need be.  Ironically, Trotsky had originally been a member of the Menshevik faction of the Russian Social Workers Party, until Lenin, recognizing his genius, had won him over to the Bolshevik camp.  Stalin, on the other hand, was a gifted organizer.  He was referred to by many of his contemporaries in the party as &quot;Comrade Index-card&quot;.  However, Trotsky was obviously the more popular choice for the job as the head of the new communist state.  Unfortunately for Trotsky, Stalin was also the party's General Secretary.  Although primarily a bureaucratic job, the General Secretary actually held the most power in the party because he appointed regional and local party posts in government.  Stalin was therefore in a position to appoint those who would support his bid for power.

Stalin initially allied himself with the right and center factions of the Communist Party (if any part of a far-left party may be called &quot;right&quot;) which supported the continued existence of the NEP.  Allying himself with Lev Kamenev and Grigori Zinoviev, he threw his might against Trotsky, who was removed from his post as People's Commissar of War.  Stalin now turned against Kamenev and Zinoviev, allying himself with Nicolai Bukharin.  Trotsky was expelled from the Communist Party on November 12, 1927, and expelled from the Soviet Union in 1928.  He eventually found his way to Mexico, where he was murdered in 1940, probably on Stalin's orders.  Now Stalin turned on his allies again, abandoning Bukharin and calling for the abandonment of the NEP.  By now, Stalin was the undisputed leading figure of the Communist Party.  By the early 1930s, Stalin would truly become the dictator of the Soviet Union.
===The First Five-Year Plan and Collectivization (1927-1939)===

At the Fifteenth Congress of the Communist Party, Stalin openly advocated the end of the NEP and introduced a plan for rapidly industrializing the largely rural Soviet Union, remarking that the country was &quot;fifty to one hundred years behind the advanced countries&quot;.  The government then introduced Gosplan (The State General Planning Commission) which came up with basis for the Five-Year Plan, aimed to turn the country into a major industrial power within five years.  The plan set ridiculously high quotas for development.  Nonetheless, terrific economic growth was achieved, especially in the areas of coal and iron output.  As a result, steel production grew exponentially.  However, harsh penalties for not making quotas caused large-scale misrepresentation of growth to occur.  Harsh totalitarian measures were introduced.  Miners were expected to put in 16 and 18 hour work days, unheard of even the strictest parts of the major capitalist countries.  Poor and hazardous working conditions caused countless deaths.  Most of the massive industrial complexes constructed for the Five-Year Plan were built by slave-laborers, sentenced for trivial and often completely false crimes.  Approximately 3.7 million people were sentenced for counter-revolutionary crimes, approximately 0.6 million were put to death, 0.7 million were expatriated, and 2.7 million   were sent to forced labor camps (called the Gulag), often itself a death sentence.

As another part of the Five-Year Plan, the government began to forcibly collectivize agriculture (that is, to create large-scale farms where peasants worked the land collectively).  The state sought not only an increase in agricultural output, but also to export grain abroad, in order to gain financial capital to buy important technologies for the industrial parts of the Five-Year Plan.  By 1936, 90% of the nation's farms had been collectivized.  However, this was not done without cost.  Peasants almost universally actively opposed collectivization.  In the Ukraine, the peasants killed off livestock rather than give it to the authorities.  Stalin was so incensed that he allowed a famine to occur which led to the deaths of millions of innocent Ukrainians.  As a result, throughout the period of 1924-1953, agricultural output was generally low, not regaining output levels of the period of the NEP until 1940, and rising only marginally in the following years.  In addition, Stalin saw fit to deal with richer peasant farmers (known as Kulaks) by deporting them to forced labor in Siberia.  In practice however, any person critical of collectivization was deemed a Kulak and summarily deported.  It is estimated that at least 2.5 million peasants (in addition to the above industrial workers) were deported, though the true number is believed to be much greater.

===The Great Purges and Politics in the Soviet Union (1930-1939)===

Throughout the period of collectivization and the Five-Year Plan, the Soviet government became increasingly tyrannical.  Stalin, was extremely paranoid, began to turn on important members of the party he had once called supporters.  In 1934, the last person who might have rivaled Stalin, Sergei Kirov, was shot in his office, most likely on Stalin's orders.  Using the murder as a pretext, he began to engage in ruthless purges of the party membership.  Ironically, most of the purged members were original members of the party and colleagues of Lenin, known as the Old Bolsheviks.  Through a series of show trials, the defendants were sentenced to death and to forced labor in the Gulag.  Often, after using torture to extract signed confessions and agreeing on lenient sentences for a confession of false charges in the court, Stalin would turn on his word and have the defendants executed.  Zinoviev and Kamenev, Stalin's old allies, both met this fate. Through 1936-1937, a period known as the Great Terror, Stalin supposedly personally signed 40,000 death warrants.  

Stalin's dictatorship held incredible control over the general populace of the nation.  Intense propaganda campaigns tried to indoctrinate the society with Communist thought.  Stalin wanted to replace the national identities, such as the Russians, Ukrainians, or Belarussians, with the idea of a purely &quot;Soviet&quot; citizen.    He also stipulated that all ethnic groups be treated equally.  Under the Tsars, the Russians had been given preference.  Now the heavy hand of Stalin was given equally to all nations.  However, this did not prevent him from forcing the speakers of every language in the USSR to convert to the Cyrillic alphabet.  Religion came under intense pressure as well, as atheism was the official policy of the state.  Priests were rounded up and shipped to Gulag or executed.  By the end of the terror, less than 1,000 churches remained out of at least 20,000.  The NKVD, the Soviet secret police, hunted down citizens suspected of &quot;counter-revolutionary&quot; or &quot;subversive&quot; crimes.  During the Great Terror, as many as 1 million people (the NKVD's own records admit 0.681 million) were executed for simply &quot;opposing&quot; Stalin's ideas and plans.  False confessions were routinely extracted through torture and intimidation.  The penalty for countless others (numbering by the most conservative estimates in the millions) was the Gulag.  Fear was the order of the day in the Soviet Union.  In addition, the Soviet state cultivated an extreme cult of personality around Stalin.  Pictures of the dictator appeared at every street corner and in every building, including people's homes.  School children ended the pledge of allegiance at the beginning of each day by saying &quot;...and thank Comrade Stalin for this happy life&quot;.  To be fair, social conditions did improve under Stalin.  Unemployment fell to practically zero, and large bounds in the public health were introduced.  However, there was no freedom whatsoever in Soviet society.

==Francisco Franco's Fascist Spain and the Spanish Civil War (1936-1945)==
Francisco Franco rose to power after the brutal turmoil of the Spanish Civil War. The conflict was between the residing leftist republican parties and the nationalist movement led by Franco. Some view the Spanish Civil War as a &quot;dress rehearsal for World War II&quot;. The Struggle of dictatorship and democracy is evident in this conflict.

==Authoritarian governments==

{{BookCat}}</text>
      <sha1>50sxj2hjbcxi7tg53pa7piifkmw3ccs</sha1>
      <model>wikitext</model>
      <format>text/x-wiki</format>
    </revision>
  </page>
  <page>
    <title>World History/Effects of the First World War</title>
    <ns>0</ns>
    <id>506</id>
    <revision>
      <id>2617212</id>
      <parentid>1891586</parentid>
      <timestamp>2014-03-16T02:59:37Z</timestamp>
      <contributor>
        <username>Worldhistorian123</username>
        <id>1431930</id>
      </contributor>
      <comment>Pasted from http://www.studymode.com/essays/The-Results-Of-World-War-1-1357977.html</comment>
      <text xml:space="preserve">{{WHP - page top 1}}



{{BookCat}}</text>
      <sha1>t0rf8ln2pqiwji6j3z0q8g17qarccyn</sha1>
      <model>wikitext</model>
      <format>text/x-wiki</format>
    </revision>
  </page>
  <page>
    <title>World History/Causes and course of the Second World War</title>
    <ns>0</ns>
    <id>507</id>
    <revision>
      <id>2710807</id>
      <parentid>2689170</parentid>
      <timestamp>2014-10-06T20:18:57Z</timestamp>
      <contributor>
        <ip>204.34.247.101</ip>
      </contributor>
      <comment>/* War in Europe */ fix spelling error</comment>
      <text xml:space="preserve">{{WHP - page top 1}}

==Causes of World War II==
France, Great Britain, and the U.S. had attained their wartime objectives. They had reduced Germany to a military cipher and had reorganized Europe and the world as they saw fit. The French and the British frequently disagreed on policy in the postwar period, however, and were unsure of their ability to defend the peace settlement. Disillusionment with war led to the practice of appeasement, or giving into an aggressor's demands to keep the peace. The U.S., disillusioned by the Europeans' failure to pay their war debts, retreated into isolationism. The Treaty of Versailles left many countries dissatisfied. Adverse conditions, such as reparations and unemployed veterans from World War I led to the circulation of new, radical ideas and solutions, such as fascism in Italy. This Fascist party, as Mussolini called it, later became a model for Hitler in Germany.

===The Failure of Peace Efforts===
During the 1920s, attempts were made to achieve a stable peace. The first was the establishment (1920) of the League of Nations as a forum in which nations could settle their disputes. The League's powers were limited to persuasion and various levels of moral and economic sanctions that the members were free to carry out as they saw fit. At the Washington Conference of 1921-2, the principal naval powers agreed to limit their navies according to a fixed ratio. The Locarno Conference (1925) produced a treaty guarantee of the German-French boundary and an arbitration agreement between Germany and Poland. In the Kellogg-Briande Pact (1928), 63 countries including all the Great Powers except the USSR, renounced war as an instrument of national policy and pledged to resolve all disputes among them &quot;by pacific means.&quot; The signatories had agreed beforehand to exempt wars of &quot;self-defense.&quot;

===The Rise of Fascism===
One of the victors' stated aims in World War I had been &quot;to make the world safe for democracy,&quot; and postwar Germany adopted a democratic constitution, as did most of the other states restored or created after the war. In the 1920s, however, the wave of the future appeared to be a form of nationalistic, militaristic totalitarianism known by its Italian name, fascism. It promised to minister to peoples' wants more effectively than democracy and presented itself as the one sure defense against communism. Benito Mussolini established the first Fascist, European dictatorship during the inter war period in Italy in 1922.

===Formation of the Axis Coalition===
Adolf Hitler, the Leader of the German National Socialist (Nazi) party, preached a racist brand of fascism. Hitler promised to overturn the Versailles Treaty and secure additional ''Lebensraum'' (&quot;living space&quot;) for the German people, who he contended deserve more as members of a superior race. In the early 1930s, the Great Depression hit Germany. The moderate parties could not agree on what to do  about it, and large numbers of voters turned to the Nazis and Communists. In 1933 Hitler became the German Chancellor, and in a series of subsequent moves established himself as dictator. Japan did not formally adopt fascism, but the armed forces' powerful position in government enabled them to impose a similar type of totalitarianism. As dismantlers of the world status quo, the Japanese were well ahead of Hitler. They used a minor clash with Chinese troops near Mukden, also known as the Mukden or Manchurian crisis, in 1931 as a pretext for taking over all of Manchuria, where they proclaimed the puppet state of Manchukuo in 1932. In 1937-8 they occupied the main Chinese ports. Having denounced the disarmament clauses of the Versailles Treaty, created a new air force, and reintroduced conscription, Hitler tried out his new weapons on the side of right-wing military rebels in the Spanish civil war (1936-9). This venture brought him into collaboration with Mussolini who was also supporting the Spanish revolt after having seized (1935-6) Ethiopia in a small war. Treaties between Germany, Italy, and Japan in 1936-7 brought into being the Rome-Berlin-Tokyo Axis. For example, Japan and Germany signed the Anti-Comintern pact in 1936 and then Italy joined in 1937. This pact denounced communism and it showed their unity in the matter. The Axis thereafter became the collective term for those countries and their allies.

===German Aggression in Europe===
Hitler launched his own expansionist drive with the annexation of Austria in March 1938. The way was clear: Mussolini supported him; and the British and French, overawed by German rearmament, accepted Hitler's claim that the status of Austria was an internal German affair. The U.S. had impaired its ability to act against aggression by passing a neutrality law that prohibited material assistance to all parties in foreign conflicts. In September 1938 Hitler threatened war to annex the western border area of Czechoslovakia, the Sudetenland and its 3.5. million ethnic Germans. The British Prime Minister Neville Chamberlain initiated talks that culminated at the end of the month in the Munich Pact, by which the Czechs, on British and French urging, relinquished the Sudetenland in return for Hitler's promise not to take any more Czech territory. Chamberlain believed he had achieved &quot;peace for our time,&quot; but the word Munich soon implied abject and futile appeasement. Less than six months later, in March 1939, Hitler seized the remainder of Czechoslovakia. Alarmed by this new aggression and by Hitler's threats against Poland, the British government pledged to aid that country if Germany threatened its independence. A popular joke ran at the time: &quot;A guarantee a day keeps Hitler away&quot;. France already had a mutual defense treaty with Poland. The turn away from appeasement brought the Soviet Union to the fore. Joseph Stalin, the Soviet dictator, had offered military help to Czechoslovakia during the 1938 crisis, but had been ignored by all the parties to the Munich Agreement. Now that war threatened, he was courted by both sides, but Hitler made the more attractive offer. Allied with Britain and France, the Soviet Union might well have had to fight, but all Germany asked for was its neutrality. In Moscow, on the night of August 23, 1939, the Nazi-Soviet Pact was signed. In the part published the next day, Germany and the Soviet Union agreed not to go to war against each other. A secret protocol gave Stalin a free hand in Finland, Estonia, Latvia, eastern Poland, and eastern Romania.

===The Worldwide Great Depression===

The costs of carrying out World War I, as well as the costs to rebuild Western Europe after years of fighting, resulted in enormous debts on the part of the Western European powers to the United States.  The enormous reparations put on Germany in the Treaty of Versailles also increased the debts.  Coupled with ineffective governments in many of these European States (notably the Weinmar Republic, pre-Mussolini Italy and Socialist France) led to slow reconstruction and poor economic growth.

With the crash of the New York Stock Market on 29 October, 1929, the United States recalled all foreign loans in the following days.  Unable to repay these loans, the economies of the West collapsed, beginning the Great Depression.

== War in Europe==

==The War in the Pacific==

*Note that this is only a rough outline. Change it as needed.

===Mukden Incident and the Invasion of Manchuria (1931)===

After winning the Russo-Japanese War in 1905, Japan quickly became the dominant power in its region. Russia recognized Korea as a Japanese sphere of influence and removed all of its forces from there and Manchuria, the sparsely populated northeastern region of China. In 1910, Japan annexed Korea as its own with little protest or resistance. Still, Japan was a quickly growing country, both population-wise and economically. It founded the South Manchuria Railway company in Manchuria in 1906, and with that company was able to gain government-like control of the area. 

By 1931, the Depression had struck a blow to Japan. The government did little to help Japan's economy, and in the eyes of its citizens, was weak and powerless. Instead, the public favored the Japanese army, and soon the civilian government had lost control of its military. To the army, Manchuria seemed like an obvious solution to many of Japan's problems. Manchuria was vast and thinly populated, and would serve as excellent elbow room for an already overcrowded Japan. It was also thought that Manchuria was rich in forests, natural resources, and fertile land. The fact that the Japanese believed themselves to be far superior to the Chinese only moved Japan towards conflict faster. Additionally, the warlord of Manchuria went against Japanese expectations and declared his allegiance to a growing Chinese military movement. So, in 1931, the army staged an explosion at a section of railway near Mukden, a city in Manchuria, as a pretext to invade and annex China. Japan met little resistance, although it did not have support of its own government, and Manchuria was completely occupied by the end of the year. Japan subsequently set up the puppet state of Manchukuo to oversee the newly acquired region. The League of Nations vehemently protested Japan's aggression, but Japan then withdrew from it.

===Japan invades China (1937)===

The 1920s saw a weak and politically chaotic China. Warlords of the many provinces of China constantly feuded, and the central government was weak and decentralized, unable to do anything to stop conflict. In 1927 Chiang Kai-Shek gained control of the Kuomintang (the Chinese government) and its National Revolution Army. Chiang led an expedition to defeat southern and central Chinese warlords and gain the allegiance of northern warlords. He was successful, and he soon focused on what he perceived to be a greater threat than Japan, which was communism. But in 1937, the deposed warlord general of Manchuria kidnapped Chiang and refused to release him until he at least temporarily united with the communists against the Japanese threat. The Japanese army responded by staging the Battle of Lugou Bridge, which was supposed to provoke open war between China and Japan. It worked and the Sino-Japanese War began. The beginning of the conflict was marked by the Chinese strategy of giving up land in order to stall the Japanese. It is important to note that the Japanese was not to completely take over China; rather, the Japanese wanted to set up puppet governments in key regions that would protect and advance Japanese interests. The fall of Nanjing in the early stages of this conflict saw the beginning of Japanese war atrocities. 100,000-300,000 were killed in the six weeks after Nanjing was captured. Other war crimes committed included widespread rape, arson, and looting.

====Anti-Comintern Pact and Tripartite Pact====

These were pacts between Germany, Italy, and Japan. The Anti-Comintern pact had been a pact that denounced communism and it was initially signed by Japan and Germany. However, later, as German and Italian relations improved, Italy also signed and this was made stronger later by the Rome-Berlin-Tokyo Axis in 1938. The Tripartite Pact also strengthened the alliance and it was basically a confirmation of the Rome-Berlin-Toyko Axis.

===Pearl Harbor and Simultaneous Invasions (early December 1941)===
On 7 December 1941, Japanese warplanes commanded by Vice Admiral Chuichi Nagumo carried out a surprise air raid on Pearl Harbor, Hawaii, the largest U.S. naval base in the Pacific. The Japanese forces met little resistance and devastated the harbor. This attack resulted in 8 battleships either sunk or damaged, 3 light cruisers and 3 destroyers sunk as well as damage to some auxiliaries and 343 aircraft either damaged or destroyed. 2408 Americans were killed including 68 civilians; 1178 were wounded. Japan lost only 29 aircraft and their crews and five midget submarines. However, the attack failed to strike targets that could have been crippling losses to the US Pacific Fleet such as the aircraft carriers which were out at sea at the time of the attack or the base's ship fuel storage and repair facilities. The survival of these assets have led many to consider this attack a catastrophic long term strategic blunder for Japan.

The following day, the United States declared war on Japan. Simultaneously to the attack on Pearl Harbor, Japan also attacked U.S. air bases in the Philippines. Immediately following these attacks, Japan invaded the Philippines and also the British Colonies of Hong Kong, Malaya, Borneo and Burma with the intention of seizing the oilfields of the Dutch East Indies. 

Following the Japanese attack on Pearl Harbor, Germany declared war on the United States on 11 December 1941, even though it was not obliged to do so under the Tripartite Pact of 1940. Hitler made the declaration in the hopes that Japan would support him by attacking the Soviet Union. Japan did not oblige him, and this diplomatic move proved a catastrophic blunder which gave President Franklin D. Roosevelt the pretext needed for the United States joining the fight in Europe with full commitment and with no meaningful opposition from Congress. Some historians mark this moment as another major turning point of the war with Hitler provoking a grand alliance of powerful nations, most prominently the UK, the USA and the USSR, who could wage powerful offensives on both East and West simultaneously.

===Allied Defeats in the Pacific and Asia (late December 1941-1942)===

Simultaneous with the dawn raid on Pearl Harbor, the Japanese carried out an invasion of Malaya, landing troops at Kota Bharu on the east coast, supported by land based aircraft from bases in Vietnam and Taiwan.  The British attempted to oppose the landings by dispatching Force Z, comprising the battleship HMS Prince of Wales and the battlecruiser HMS Repulse, with their escorting destroyers, from the naval base in Singapore, but this force was intercepted and destroyed by bombers before even reaching their objective.

In a series of swift maneuvers down the Malay peninsula, thought by the British to be &quot;impassable&quot; to an invading force landing so far north, the Japanese advanced down to the Johor Straits at the southernmost tip of the peninsula by January 1942.  The Japanese were even using tanks, which the British had thought would not be able to penetrate the jungles but they were wrong.

During a short two week campaign the Japanese crossed the Straits of Johor by amphibious assault and conducted a series of sharp battles, notably the battle of Kent Ridge when the Royal Malay Regiment put up a brave but futile effort to stem the tide.  Singapore fell on 15 February 1942 and with its fall, Japan was now able to control the sea approaches from the Indian Ocean through the Malacca Straits.  The natural resources of the Malay peninsula, in particular rubber plantations and tin mines, were now in the hands of the Japanese.

Other Allied possessions, especially in the oil rich East Indies (Indonesia) were also swiftly captured, and all organised resistance effectively ceased, with attention now shifting to events closer to Midway, the Solomon Islands, the Bismark Sea and New Guinea.

====Resistance in the Philippines and the Bataan Death March====

===The Tide Turns: The Coral Sea===

===Allies Regroup and the Battle of Midway (1942)===

Following the attack on Pearl Harbour, the US military sought to strike back at Japan, and a plan was formulated to bomb Tokyo.  As Tokyo could not be reached by land based bombers, it was decided to use an aircraft carrier to launch the attack close to Japanese waters.  The Doolittle Raid was carried out by Doolittle and his squadron of B-25 medium bombers, launched from the USS Hornet.  The raid achieved little strategically, but was a tremendous morale booster in the dark days of 1942.  It also led to the decision by the Japanese military to attack the only logical base of the attackers, the tiny atoll of Midway.

A powerful force of warships, with four large fleet carriers at its core (Akagi, Kaga, Hiryu and Soryu) attacked Midway.  The US navy, with the aid of intercepted and decoded Japanese signals, were ready and launched a counter attack with the carriers USS Enterprise and USS Yorktown, destroying all four of the Japanese fleet carriers.  This was a devastating blow to the Japanese and is considered the turning point of the Pacific War.  The Japanese had largely roamed the Pacific Ocean, the South China Sea, the Malacca Straits and the Indian Ocean with impunity, launching raids from these same four carriers on Allied bases in these areas including Darwin, Colombo and along the Indian east coast.  With the loss of these carriers and more importantly their cadre of irreplaceable hard core highly trained naval aviators, the Japanese could no longer maintain an effective offensive and became largely defensive from then on.

===Guadalcanal Weakens Japan (August 1942-February 1943)===

===Buna, Gona, and Rabaul (1943)===

===Island Hopping (1943- Late 1944)===
Island hopping was a campaign of capturing key islands in the Pacific that were used as prerequisites, or stepping stones, to the next island with the eventual destination being Japan, rather than trying to capture every island under Japanese control. Allied forces often assaulted weaker islands first, while starving out the Japanese strongholds before attacking them.

===Iwo Jima and Okinawa (Early 1945)===

===The Atomic Bomb (August 1945)===
On August 6, 1945, a lone B-29 bomber, named the Enola Gay, appeared over the skies of Hiroshima. Air raid sirens went off around the city and people ran for their shelters. However, minutes later, the all-clear symbol was given. Although it had been a seemingly harmless run, the B-29 had, in fact, dropped a single bomb (this bomb was called &quot;Little Boy&quot;). This bomb detonated about 1,900 feet over Hiroshima and leveled much of the city within a few thousandths of a second. Tens of thousands were killed immediately and many more would eventually die from the radiation poisoning.

However, Japan did not surrender to the United States, so three days later, on August 9, 1945, a B-29 named Boxcar dropped an atom bomb on the city of Nagasaki (this bomb was called &quot;Fat Man&quot;). Although the bomb was actually more powerful than the Hiroshima bomb, the foggy weather conditions and the hilly terrain of Nagasaki somewhat shielded a portion of the city from the worst effects. 

This led to an immediate ceasefire with Japan, and surrender a month later.

===Japan Surrenders (August 1945)===

==The Home fronts==

===America===

===Japan===

===Great Britain===

===Germany===

===Italy===



{{BookCat}}</text>
      <sha1>e2c6cb8cyj5bcfzxcqttdzx5g6oef33</sha1>
      <model>wikitext</model>
      <format>text/x-wiki</format>
    </revision>
  </page>
  <page>
    <title>World History/Consequences of the Second World War</title>
    <ns>0</ns>
    <id>508</id>
    <revision>
      <id>2682978</id>
      <parentid>2682977</parentid>
      <timestamp>2014-07-20T20:27:00Z</timestamp>
      <contributor>
        <username>Panic2k4</username>
        <id>2865</id>
      </contributor>
      <minor />
      <text xml:space="preserve">{{WHP - page top 1}}

The Second World War saw the most far-reaching transformation of world politics to date.  The destructive technologies introduced during the war &amp;ndash; foremost, the atomic bomb &amp;ndash; made it very unlikely that a land-based conflict of similar scale and duration among the major nations could ever happen again, because of the potential for total destruction of all combatants.  

No advanced industrial nation has been invaded since 1945, and all wars since that time have either been guerrilla conflicts in less-developed countries, conflicts involving less-developed countries with more advanced ones, or some combination of these two scenarios.

From an economic standpoint, the war and its aftermath consumed much of the real and potential industrial production of the world over the period 1940-1960 (with the exception that the United States, its homeland untouched, was able to expand both its defense industries and its civilian economy very rapidly after 1945).  Europe and Japan lay in ruins and would spend 15-20 years rebuilding the basis for economic life, with much assistance from the U.S.  The Soviet Union and China, though victorious in the war, were also ravaged.

== The splitting of the world ==

Europe was split into two main camps by the &quot;Iron Curtain&quot;, which divided Germany in half and separated Austria from Czechoslovakia and Hungary, and Italy from Yugoslvia.  The Soviet Union absorbed eastern Poland, and &quot;reassigned&quot; large areas of German territory to Polish rule by way of compensation.  Moscow intervened directly to install Communist parties in power in Poland, eastern Germany, Hungary and Czechoslovakia.  Finland was able to keep its independence, but did not regain the lands it lost to the Soviets in the 1940 Winter War.  Yugoslavia under Marshal Tito, already Communist, did not submit to direct influence from Moscow, choosing a more independent path and greatly angering Stalin.  Elsewhere in the Balkans, Bulgaria, Romania and Albania also were brought into the Soviet bloc.
  
To the west were the democracies allied to the USA: the UK, France, Italy, the Netherlands, Belgium, Norway, and West Germany.  Washington became quite concerned, however, that local Communist parties might gain power in France, Italy and Greece in the late 1940s, given the battered state of the postwar European economy and the proximity of the Soviet Union.  French leader Charles DeGaulle received strong backing from the U.S., and anti-Communist parties in Italy were heavily financed.  In the end neither nation left the Western sphere of influence.  

  
In Asia China, Vietnam, Korea and Mongolia were communist countries, whereas Japan first under occupation by the USA after WWII had to reform its system. Moving away from from militarism and expansionism and into democratic reforms. Military alliances were formed on both sides: First NATO, on 4 April 1949 in the USA geopolitical sphere and as a direct response due to the Cold War the Soviet Union (USSR), on 14 May 1955 created the Organization of Warsaw treaty, better know as Warsaw Pact. 

Also, Organization of United Nations was established in by USA initiative in 1945, as attempt to set up a body for possible dialog between Western, Eastern, and Developing countries and establish international law. The failing of the League of Nations, also initiated by the USA was one of several precursor stages for WWII. Special consideration must be given to the geopolitical interests behind this organizations, especially who they favor, even if ultimately they are a stabilizing force. Other USA international initiatives include the International Monetary Fund (IMF), the World Bank and more recently the World Trade Organization (WTO), that has its roots in the discussions to form the International Trade Organization (ITO) as an evolution from the General Agreement on Tariffs and Trade (GATT) of 1947.      


{{BookCat}}</text>
      <sha1>nl0glv2bh06fwmzgeq0ysybz1jvd1lj</sha1>
      <model>wikitext</model>
      <format>text/x-wiki</format>
    </revision>
  </page>
  <page>
    <title>Talk:World History</title>
    <ns>1</ns>
    <id>511</id>
    <revision>
      <id>2616852</id>
      <parentid>2616851</parentid>
      <timestamp>2014-03-14T17:50:41Z</timestamp>
      <contributor>
        <username>Worldhistorian123</username>
        <id>1431930</id>
      </contributor>
      <text xml:space="preserve">{{WHP - page top 2}}


http://en.wikibooks.org/wiki/World_History:An_Age_of_Empires_-_Rome%2C_Han_China%2C_and_the_Silk_Road has been split into two different chapters (The Roman Empire needs it's own chapter for sure) but the links are now broken.
&lt;u&gt;Planned Stages of Development&lt;/u&gt;
#'''Humble Beginnings'''- Intial exploratory action and structural plans '''''Accomplished'''''
#'''[[World History/Operation: Blank Check|Operation: Blank Check]]'''- Finalization of structure and basic articles- See [[World History/The Rise of Dictatorship and Totalitarianism|The Rise of Dictatorship and Totalitarianism]] for an example of the type of article completeness desired '''''Current''''' 
#'''Exapand-a-lot'''- Addition of information concerning cultural, artistic, architectural, and societal conditions/achievements for cultures, especially noting the interactions between them, pointing out little known phenomen (i.e. North-South trade patterns are often ignored versus the ever-prevalent East-West trade)
#'''It's a fixer-upper'''- Error-proofing, addition of multiple-choice review to each article and to the entire project, addition of material and accuracy checking
#'''The Home Stretch'''- Final accuaracy checking, error-proofing, etc.
#'''Exit Stage-Left'''- The completion of the project and advertising- contacting AP World History teachers, the College Board, etc. and turning the project into a regular source of information to students, teachers, and interested persons
----

[[Talk:World History Project - Contents/Archive 1|Old talk]] (pre-Standard change)


Oh what fun, I've now added a section the Weimar Republic (it seems appropriate here) tomorrow I'll spruce up ol' Mussolini and finish up Hitler.  Then on to World War II!  Oh, I think I'll tackle some ancient history tomorrow as well.  But where to put the Great Depression?  I guess it's own article is the way to go.  And since I'm the only big contributor for a month...I am kind of giving myself free reign to take the reins (inline assonance intentional :-) of power for the time being.  I think however, I will begin to aim for AP World History standards (I achieved a 5, so I will call myself well-qualified for the task) rather than the very regional California standards (although they provide an excellent ''baseline'')  I will give a week's notice before I unilaterally make the standards change.  Please comment--[[User:Naryathegreat|Naryathegreat]] 04:13, 6 Nov 2004 (UTC)

----
So what'd I get done today?  Let's see, I redid much of the structure of the historical contents page and moved some pages around.  I added potential sections.  I added info on the AP World History Standard.  I added a disclaimers page and a Golden Rule, to help keep us on track.  As soon as the Standard change is official, I'm taking the California standards out of the articles and will probably replace them with the appropriate AP World History Standard material.  I redid ol' Mussolini and made the Maya something to be proud of, as well as restructuring the Precolumbian page.  It now takes into account all the cultures likely you'll want to know about.  You personally probably haven't heard of them, and I've got some more, if we get to that eventuality.  I created World History 101, a clever introduction and explanation that should help streamline the process of getting FAQs out of the way.  I mean it about rapid progression over the next month.  I beleive by that time it will be at least half finished, and worthy of an &quot;orange&quot; two-block recognition.  You deserve commendation for putting the project into place and giving it some initial vitality.  But now, it's time to get moving, abandon the regional standard, and I pray, make it a good enough page that I'm not just always talking to thin air.--[[User:Naryathegreat|Naryathegreat]] 23:51, 6 Nov 2004 (UTC)

----
Okay, well, I'm back after my extended leave of abscence for personal reasons.  Actually I've been back for a while but I just haven't done major edits.  I added a large amount to the Roman Republic part of that article and I plan to add some more to other parts over the next few weeks.  A few people have shown actual interest in helping now so I hope this project becomes further advanced.  Thanks for you interst in our project if you're reading this!  Also, I choose to stay with the AP World History Standard for now because whoever it was that was upset a few months back never turned up again or spoke to me personally so...Anwyway, if you want to help and don't know where to start, then drop me a line and I'll give you some starting places.  We don't just need contributors-- we need proofreaders and reviewers too (reviewers check for consistency and smooth transition of ideas, all that sort of thing).  I'd love your help!--[[User:Naryathegreat|Naryathegreat]]

== Naming convention ==

Hi, I assembled the [[Wikibooks:Top active|Top active]] list of Wikibooks. Unfortunately, World History does not follow any naming convention, so the contributions can not be attributed easily to a book. If somebody is still working on this book, please consider a consistent naming convention, so that all pages belonging to World History can be recognized by a computer script.

It is up to you to choose either 
World History
World History:Ancient Civilizations

or the more modern version (since subpages have been activated on Wikibooks recently)
 
World History
World History/Ancient Civilizations

(subpages give additional navigational advantages, e.g. an automatic link to the parent page, etc.)

Logged in users can easily move pages by the &quot;move&quot; command. Thanks! --[[User:Andreas Ipp|Andreas]] 06:09, 12 Mar 2005 (UTC)

==Frustration==

I'm dissapointed. A WikiProject entitled WORLD history turns out to be exclusivley HUMAN history. Were this a fair and balanced representation of the history of our species, I'd be satisfied. However, this project is culturally-one sided.

This project dismisses the first 99.5% of human history in 1 'chapter', less than 20 sentances. This summary effectivley throws out the overwhelming majority of the history of our species as trash: not worth writing about, not worth reading about, not worth learning about. More or less, this project makes this point:

&quot;Around 10,000 years ago agriculture... effectivly started civilization and the begining of the nation-state.&quot;

Which implies:

&quot;Nothing worthwhile happened until agriculture was developed 10,000 years ago&quot;

and

&quot;The initial 99% of the history of our species was spent building UP to our civilized state.&quot;

Honestley. 

The 'history' book you are writing has been written before, in every text book across the globe. This in an opportunity to BREAK THE MOLD, and write a history of our species that does not dismiss &quot;prehistory&quot; as worthless. You guys are throwing this opportunity away.

:Don't view this as the 'final essay'.  If you have information to add--add it!  Wiki projects like this are ongoing and information is only available as people add it.  Obviously, there is an overwhelming amount of data that needs to be added.  So contact whatever history experts you know and have them insert the missing data!  Don't complain about it--fix it. That's what Wiki is all about.

:To add on - If you honestly feel the need to have a difference in perspective, it would be beneficial to all for you to include it within the book's framework (or as a totally new wikibook). However, the standards that wikibooks should aspire to should still be maintained, especially with regards to facuality and NPOV.&lt;BR&gt;&lt;BR&gt;I do not believe the original author(s) intended this to be a totally biased POV article; it's just that, humans have only seen history from our own POV, and even then records of ancient times have been badly maintained if at all. Certainly if you have insights to the areas you mentioned, I believe wikibooks will welcome your contributions (within reasons, of course). [[User:Lynx7725|Lynx7725]] 17:19, 21 Jun 2005 (UTC)


::If you want anthropology, write and anthropology book.  Don't get your shorts in a wad because you can't change definitions to suit your prejudices.  History is a record of HUMAN events, particularly human WRITTEN events. we need to make this like the U.S. history book

:::Isn't this supposed to be a HISTORY book? Pre-history is not history at all, and the first chapter really should be scrapped. It might be ok in a Science book, or anthropology, or mythology, or something--but the fact remains it's really not history! It can't be history unless we have written records.--[[User:Linesdata|Linesdata]] 17:54, 31 October 2007 (UTC)

==First chapter on China started==

I'm new to editing Wikibooks, but after reading some of them - specifically this one - and noticing missing content, I decided to do some personal research. As a result, I typed up &quot;The Mythical Period&quot; in Chapter 5: The First Chinese Dynasties. I'm not sure if it conforms to AP standards, but I hope it fits well. Thanks!

--Ccny930

==Christian first chapter==
How about having an optional first chapter that has origins from a Christian perspective, so that this can be developed as homeschoole friendly, and the instructor can choose which chapter to use.?

All Wiki's are written from a non buyist perspective and therefore the most scientific perspective (except for the buyist wikis of course) It would be extremely inappropiate to write a christian point of view because the bible states that the Earth is only   about 5000 years old. your best bet would be to come up with your own first chapter, skip it, or use an entirely different source of information.

I believe I can speak for a great number of people who would also find it totally unacceptable to write any history from a specifically Christian perspective. Does &quot;homeschoole(sic)friendly&quot; mean that children who are homeschooled are mostly being taught history, and other subjects, from a &quot;Christian perspective?&quot; Does this mean they are being sheltered from &quot;non-Christian&quot; education in public schools?  If this is the case, I don't think you are going to find a great deal of &quot;creationist&quot; literature or other media on Wikibooks in Wikimedia, unless it is to explain creationism. I'm sure Wiki-people come from all backgrounds, but I believe we all agree that the scientific method is one construct of reality from which learning materials in &quot;academic&quot; topics are best oriented. Of course, I am not saying that religious topics should or would be kept out of Wikibooks or Wikimedia at all.

==Brazil content==
[http://en.wikibooks.org/wiki/Brazilian_History Brazilian History] page up for deletion can you use it in this project?  [[User:ChessCreator|ChessCreator]] ([[User talk:ChessCreator|talk]]) 16:53, 15 February 2008 (UTC)

== Some remarks regarding structure of project ==

I notice that material regarding early chinese dynasties is duplicated in Ancient Civilisations and The First Chinese dynasties. Also the structure of Ancient Civilisations could do with some tidying up; The Hittites,Kassites and Assyrians should be moved into the Mesopotamian section as there is a clear linear sequence between these civilisations and events in southern Mesopotamia. Besides, should the Kassites be seen as an independent civilisation.

Material regarding the Persians should be moved from the Ancient Civilisations section and moved to the Greek Section where it is contemporaneous, (also alter the title of the Greek section as well to include Persians). The Persians signify the end of Mesopotamian dominance and therefore should not be included in that section, they are not as ancient as the New Babylonians.

I would like to contribute to this project but until the overall structure is decided upon, I don't know whether my work is duplicated or not, or whether it will be eventually deleted. I read a chapter on Mesopotamian history and made copious notes on the Amorites,Kassites,Hittites and Assyrians without realising the text had information on them at the end of the Ancient Civilisations section. I might add something at another time.

I hesitate on making the changes myself without some discussion beforehand.

Also see my remarks in the talk page of Ancient Civilisations.

[[User:Zfishwiki|Zfishwiki]] ([[User talk:Zfishwiki|talk]]) 18:19, 28 April 2010 (UTC)

== anyone still here==
if no one else seems to be active I have some big ideas which involve moving/creating/combing chapters and other large structural changes. I received a five on the AP exam myself and know a few of its secrets.


If their is no opposition I propose a new table of contents that i believe better fits AP standards and flows better
# Ancient civilizations 
# Migrations and complications 
# The Axial Age 
# Greece and Persia 
# Rome 
# Classical Asia 
# Islam 
# Darkness in Europe 
# The golden age of Asia 
# Hemispheric interaction 
# Mongols and aftermath 
# The ancient Americas 
# Empires of Gunpowder 
# Global transformation: Early modern interactions   
# The European transformation 
# The Russian emergence 
# Asia and Africa in transition 
# The enlightenment  and revolution 
# The revolution of everyday life, the industrial revolution 
# The European world order 
# The Japanese reaction 
# Into the trench: World War one 
# Depression and dictators 
# The War of the world
# The cold war 
# Latin America 
# The African emergence 
# The New Asia 
# Globalization
#

==Plagiarism ==
I was suspicious that large amounts of this were not original content I am right, copying and pasting random paragraphs of this book into google I found that most of them were cut and paste out of other books and never did a see a citation, therefore the majority of this book should be removed for copyright violations it seems.</text>
      <sha1>e35e3uu139xc5u5qt3ctfbqtryxb1rh</sha1>
      <model>wikitext</model>
      <format>text/x-wiki</format>
    </revision>
  </page>
  <page>
    <title>Spanish/Lesson 6</title>
    <ns>0</ns>
    <id>512</id>
    <revision>
      <id>1914644</id>
      <parentid>1388808</parentid>
      <timestamp>2010-08-18T18:48:01Z</timestamp>
      <contributor>
        <username>Dwandarti</username>
        <id>277706</id>
      </contributor>
      <comment>/* Direct Object Pronouns */</comment>
      <text xml:space="preserve">{{Spanish}}
----

== Grammar - Object Pronouns ==

=== Direct Object Pronouns ===

While the subject of a sentence ''initiates'' an action (the verb), the
direct object is the one that is ''affected'' by the action. A direct
object pronoun is used to refer to the direct object of a previous sentence:


{| border=&quot;1&quot; bgcolor=&quot;#99FF99&quot;
|-
|
El chico come '''la manzana'''.&lt;br&gt;
Él '''la''' come.
|
''The boy eats'' '''''the apple''''' ''.''&lt;br&gt;
''He eats'' '''''it''''' ''.''
|}

The following table shows the six types of direct object pronouns:

{| border=&quot;1&quot; bgcolor=&quot;#9999FF&quot;
|-
| &lt;font face=&quot;Arial&quot;&gt;&lt;b&gt;Subject&lt;/b&gt;&lt;/font&gt;
| &lt;font face=&quot;Arial&quot;&gt;&lt;b&gt;
Object&lt;/b&gt;&lt;/font&gt;
| &lt;font face=&quot;Arial&quot;&gt;&lt;b&gt;English&lt;/b&gt;&lt;/font&gt;
|-
| yo || '''me'''     || ''me''            
|-
| tú || '''te'''     || ''you''           
|-
| él || '''lo'''  || ''him/it''
|-
| ella || '''la''' || her/it
|-
| usted || '''lo/la''' || you
|-
| nosotros || '''nos'''    || ''us, we''            
|-
| vosotros || '''os'''     || ''you (plural)''           
|-
| ellos || '''los''' || ''them (masculine)''     
|-
| ellas || '''las''' || ''them (feminine)''     
|-
| ustedes || '''los/las''' || ''you''
|}

In spanish tú is used for informal situations, and usted must be used when a formal treatment is needed.

Note: In Spain, ''le'' and ''les'' are used as the masculine direct object pronoun only when referring to people. If the antecedent of a direct object is masculine but non-human, ''lo'' or ''los'' are used instead. In most other Spanish speaking places, ''lo'' and ''los'' are used instead of ''le'' and ''les''.

=== Indirect Object Pronouns ===

An indirect object is an object that would be asked for with
''To whom...?'' or ''From whom...?''. It is called ''indirect'' because
it occurs usually together with a direct object which is affected directly
by the action: 


{| border=&quot;1&quot; bgcolor=&quot;#99FF99&quot;
|-
|
La mujer da una manzana '''al chico'''.&lt;br&gt;
La mujer '''le''' da una manzana.
|
''The woman gives an apple'' '''''to the boy''''' ''.''&lt;br&gt;
''The woman gives'' '''''him''''' ''an apple''.
|}

The apple ''is given'' by the woman (direct). The boy gets
the ''given apple'' (indirect - depends on the apple being given).

Here is a table with all of the Spanish indirect object pronouns:


{| border=&quot;1&quot; bgcolor=&quot;#9999FF&quot;
|-
| &lt;font face=&quot;Arial&quot;&gt;&lt;b&gt;Subject&lt;/b&gt;&lt;/font&gt;
| &lt;font face=&quot;Arial&quot;&gt;&lt;b&gt;
Indirect Object&lt;/b&gt;&lt;/font&gt;
| &lt;font face=&quot;Arial&quot;&gt;&lt;b&gt;English&lt;/b&gt;&lt;/font&gt;
|-
| yo || '''me'''     || ''to/from me''         
|-
| tú || '''te'''     || ''to/from you''        
|-
| él/ella/usted || '''le'''     || ''to/from him/her/you''
|-
| nosotros/nosotras || '''nos'''    || ''to/from us''         
|-
| vosotros/vosotras || '''os'''     || ''to/from you''        
|-
| ellos/ellas/ustedes || '''le'''    || ''to/from them/you''   
|}

=== Position Of Object Pronouns (Double Object Pronouns) ===

So far we have only seen sentences with one object pronoun. If there is
both a direct and an indirect object pronoun, the indirect pronoun usually comes
first:


{| border=&quot;1&quot; bgcolor=&quot;#99FF99&quot;
|-
|
'''Te''' compro una bicicleta .&lt;br&gt;
'''Te''' '''la''' compro.
|
''I buy you a bike.''&lt;br&gt;
''I buy it for you.''
|}

Also, when both object pronouns are in the third person (either singular or plural),
the indirect pronoun changes from '''le/les''' to '''se''':


{| border=&quot;1&quot; bgcolor=&quot;#99FF99&quot;
|-
|
El profesor '''le''' da unos libros.&lt;br&gt;
El profesor '''se''' '''los''' da.
|
''The professor gives her the books.''&lt;br&gt;
''The professor gives them to her.''
|}

In sentences that contain an infinitive or a participle, the object
pronoun may be either '''placed before''' the conjugated verb or it
maybe '''attached''' to the infinitive/participle:


{| border=&quot;1&quot; bgcolor=&quot;#99FF99&quot;
|-
|
Carmen puede cantar el himno nacional.&lt;br&gt;
Carmen puede '''cantarlo'''. '''''or''''' Carmen '''lo''' puede cantar.
|
''Carmen can sing the national anthem.''&lt;br&gt;
''Carmen can sing it.''
|}

It is possible to have the two rules above working at the same time: A combination
of direct and indirect pronouns that is attached to an infinitive/participle:


{| border=&quot;1&quot; bgcolor=&quot;#99FF99&quot;
|-
|
Quiero mostrarte una casa.&lt;br&gt;
Quiero '''mostrártela'''.
|
''I want to show you a house.''&lt;br&gt;
''I want to show it to you.''
|}

'''Exercise:'''[[Spanish/Exercises/Object Pronouns|Object Pronouns]]

== Vocabulario (Vocabulary) - La comida (The food) ==

{| border=&quot;1&quot; bgcolor=&quot;#FFFF99&quot;
|-
! Las comidas  
! The meals  
|-
| el desayuno || breakfast               
|-
| desayunar, tomar el desayuno || to have breakfast       
|-
| el almuerzo || lunch
|-
| almorzar || to have lunch
|-
| la cena || dinner                  
|-
| cenar || to have dinner                  
|-
| la comida || food, meal                  
|-
| comer || to eat                  
|}
&amp;nbsp;
In Spain and some other countries, ''comida'' is the midday meal.

{| border=&quot;1&quot; bgcolor=&quot;#FFFF99&quot;
|-
! Las comidas  
! The meals  
|-
| el desayuno || breakfast               
|-
| desayunar, tomar el desayuno || to have breakfast       
|-
| la comida (el almuerzo) || lunch, main meal
|-
| comer (almorzar) || to eat, to lunch
|-
| la cena || dinner                  
|-
| cenar || to have dinner                  
|}
&amp;nbsp;
In other countries, for example Chile, ''comida'' is the last meal in the day.

{| border=&quot;1&quot; bgcolor=&quot;#FFFF99&quot;
|-
! Las comidas  
! The meals  
|-
| el desayuno || breakfast               
|-
| desayunar, tomar el desayuno || to have breakfast       
|-
| el almuerzo || lunch                   
|-
| almorzar || to have lunch           
|-
| la comida (la cena) || dinner, main meal
|-
| comer (cenar) || to eat, to have dinner
|}

Instead of saying ''desayuno, comida y cena'' (Spain) or ''desayuno, almuerzo y comida'' (Chile, Colombia), it's safer to say ''desayuno, almuerzo y cena''.
&amp;nbsp;

The word ''comida'' has several meanings
*'''food''' ''Me gusta la comida mexicana''
*'''meal''' ''El desayuno es la principal comida del día''
*'''lunch''' ''La comida es a las 2 PM''
*'''dinner''' ''La comida es a las 9 PM''
&amp;nbsp;

{| border=&quot;1&quot; bgcolor=&quot;#FFFF99&quot;
|-
! Las Frutas
! Fruits
|-
| la banana || rowspan=&quot;3&quot; | banana
|-
| el plátano (Spain, Chile, Perú)
|-
| el banano
|-
| la cereza || rowspan=&quot;2&quot; | cherry
|-
| la guinda
|-
| el damasco || rowspan=&quot;2&quot; | apricot
|-
| el albaricoque (Spain)
|-
| el durazno (Sp. Am) || rowspan=&quot;2&quot; | peach
|-
| el melocotón (Spain)
|-
| la fresa  
| rowspan=&quot;2&quot; | strawberry              
|-
| la frutilla (Argentina, Chile, Uruguay)  
|-
| el kiwi || kiwi fruit
|-
| la manzana || apple                   
|-
| la naranja || orange                  
|-
| la pera || pear                    
|-
| la piña || rowspan=&quot;2&quot; | pineapple
|-
| el ananá
|-
| la uva || grape                   
|-
| la ciruela || plum                  
|}
&amp;nbsp;

{| border=&quot;1&quot; bgcolor=&quot;#FFFF99&quot;
|-
! Las Verduras  
! Vegetables  
|-
| la cebolla || onion                   
|-
| la lechuga || lettuce                 
|-
| la espinaca || spinach
|-
| la papa (Sp. Am.) || rowspan=&quot;2&quot; | potato
|-
| la patata (Spain)  
|-
| el pepino || cucumber                 
|-
| el aguacate || rowspan=&quot;2&quot; | avocado                
|-
| la palta (Argentina, Chile, Uruguay) 
|-
| el tomate || tomato                  
|-
| la zanahoria || carrot                  
|-
| el zapallo (Argentina, Chile, Uruguay) || rowspan=&quot;2&quot; | pumpkin, squash
|-
| la calabaza (Spain)
|-
| los porotos (Argentina, Chile, Uruguay) || rowspan=&quot;4&quot; | beans
|-
| los frijoles (Mexico)
|-
| las alubias (Spain)
|-
| las caraotas 
|}

Note that due to the pervasive influence of English, in many supermarkets there is a section called ''Vegetales'' instead of ''Verduras''. They mistranslate '''vegetable''', forgetting that this is not the same as English '''vegetal''' (relating to plants).

*&lt;b&gt;Legumbres&lt;/b&gt; means the same thing as &lt;b&gt;verduras&lt;/b&gt; (vegetables).
----
{{Spanish}}

[[Category:Spanish]]</text>
      <sha1>sd4iyung9mo2aqfvfayv9n60rjzkgde</sha1>
      <model>wikitext</model>
      <format>text/x-wiki</format>
    </revision>
  </page>
  <page>
    <title>Perl Programming</title>
    <ns>0</ns>
    <id>517</id>
    <revision>
      <id>2497818</id>
      <parentid>2451695</parentid>
      <timestamp>2013-03-06T15:56:34Z</timestamp>
      <contributor>
        <username>LinguistManiac</username>
        <id>360554</id>
      </contributor>
      <minor />
      <comment>Introductory sentence had grammatical and semantic issues. Fixed the worst and tried to be more informative.</comment>
      <text xml:space="preserve">__NOTOC__
These books describe and explain Perl, a high-level, general-purpose, interpreted, dynamic programming language. Perl is noted for its idiomatically rich syntax, its extensive use of regular expressions and the large module archive CPAN.

==Contents==
{{print version}}
{{PDF version|Perl_Programming}}
: [[/About Perl//]]

===Beginning Perl===
: [[/Getting Started/]] {{stage short|75%|Apr 06, 2009}}
:: [[/Editors and IDEs/]] {{stage short|25%|Apr 06, 2009}}
:: [[/First Programs|First Program]] {{stage short|50%|Apr 06, 2009}}
:: [[/Basic Variables/]] {{stage short|75%|Apr 06, 2009}}
:: [[/Strings/]] {{stage short|100%|Apr 06, 2009}}
:: [[/Numbers/]] {{stage short|75%|Apr 06, 2009}}
: [[/Conditionals/]]
: [[/Control Flow/]] {{stage short|25%|Sep 22, 2010}}
: [[/Operators/]]
: [[/Variables/]]
: [[/Data Types/]]
:: [[/Scalar Variables/]]
:: [[/Array Variables/]]
:: [[/Hash Variables/]] {{stage short|25%|Sep 21, 2010}}
:: [[/References and Data Structures/]]
: [[/User Input-Output/]]
:: [[/Advanced Output/]]
:: [[/Filehandles/]]
: [[/Modifiers|Statement modifiers]]
: [[/Functions/]]
: [[/Perl 5.10 Additions/]]
: [[/Beginning Exercises|Exercises]]

===More Perl===
: [[/Regular Expressions/]]
: [[/Regular Expression Operators/]]
: [[/Regular Expressions Reference/]]
: [[/Code Reuse (Modules)/]]
: [[/Objects|Perl Objects]]
: [[/Structure and Style/]] {{stage short|00%|Dec 4, 2010}}

===Interfacing Perl===
: [[/GUI Programming|GUI and desktop programming]]
: [[/CPAN/]]
: [[/CPAN/Bitcard|Using a BitCard account]]
: [[/DBI - Perl Database Interface/]]

===Web Development===
: [[/CGI/]]
: [[/FastCGI/]]
: [[Apache/mod perl|mod_perl]]
: [[/HTML::Mason/]]
: [[/HTTP::Engine/]]
: [[/PSGI/]]
: [[/Unicode UTF-8/]]

===Perl and beyond===
:[[/Perl 6/]] 
:[[/Humour/]]

===Sample code===
:[[/Simple Examples 1|First example code to get you started]]
:[[/Simple Examples 2|Second example code to get you started]]

===Reference===
: '''[[/Function Reference/]]'''
: [[/Concept Index/]]
: [[/Useful Modules/]]
: [[/Reference Cards|Quick-reference cards]]
: [[/Websites/]]

==Related Wikibooks==
: [[Perl 6 Programming]]
: [[Apache/mod perl]]

{{subjects|Perl programming language}}
{{alphabetical|P}}
{{status|50%}}

[[de:Perl-Programmierung]]
[[es:Programación en Perl]]
[[fr:Programmation Perl]]
[[it:Perl]]
[[ja:Perl]]
[[pl:Perl]]
[[pt:Perl]]</text>
      <sha1>1wc0ad634y65ez5qljw4ed9kkhwkwvs</sha1>
      <model>wikitext</model>
      <format>text/x-wiki</format>
    </revision>
  </page>
  <page>
    <title>Talk:Spanish/Lesson 6</title>
    <ns>1</ns>
    <id>518</id>
    <revision>
      <id>1867702</id>
      <parentid>1865624</parentid>
      <timestamp>2010-06-28T23:39:35Z</timestamp>
      <contributor>
        <username>Adrignola</username>
        <id>169232</id>
      </contributor>
      <minor />
      <comment>replaced: {{WikiProject Languages}} → {{WikiProject Languages|spanish=yes}}</comment>
      <text xml:space="preserve">{{WikiProject Languages|spanish=yes}} 

I have a question about the format in the vocabulary.
In my opinion, the correct translation for &quot;la manzana&quot; (for instance) is &quot;the applet&quot; and not &quot;applet&quot;. Is perfectly correct to say in Spanish &quot;manzana&quot;. I think that if we want to use &quot;el&quot; or &quot;la&quot; with the words for make more clear the genre we should translate that like &quot;the applet&quot;. That sounds more correct for me.

[[User:Wintermute|Wintermute]] 19:47 8 Aug 2003 (UTC)

:I think the sentence &quot;Quiero mostrar una casa a ti.&quot; can be written as &quot;Quiero mostrarte una casa.&quot; The first form is correct, but it sounds somewhat foolish or childish.

:OASO (Octavio Salguero)

:I've changed the sentence OASO, (btw. feel free to just go and edit the pages right away if you see something that is incorrect and/or stylistically bad). [[User:ThomasStrohmann | Thomas Strohmann]]

== Platano and/or Banano? ==

[[User:Hlasso|Hlasso]] 22:22, 30 March 2006 (UTC) In some countries the words 'banano' and 'platano' are used for different fruits. Banano is very similar to platano, however, platano is bigger and requires cooking to be eaten. In several countries the green 'platano' (not reap yet) is fried to make 'Patacón'.

== Articles in Spanish ==

[[User:Hlasso|Hlasso]] 22:27, 30 March 2006 (UTC) I agree that translating &quot;la manzana&quot; to &quot;apple&quot; is incorrect. And I think this small error can be found throughout the document. For example: &quot;El Vocabulario&quot; is not common in spanish, books having a vocabulary usually have that section named &quot;Vocabulario&quot;.

I'd help modifying the pages, but I'd like to hear the main author point of view before doing so.</text>
      <sha1>sq8pr2fjr11jw9hfcmqhdm35fxun5pf</sha1>
      <model>wikitext</model>
      <format>text/x-wiki</format>
    </revision>
  </page>
  <page>
    <title>Lojban/Colours</title>
    <ns>0</ns>
    <id>519</id>
    <revision>
      <id>1903822</id>
      <parentid>1903762</parentid>
      <timestamp>2010-07-29T12:18:41Z</timestamp>
      <contributor>
        <username>Adrignola</username>
        <id>169232</id>
      </contributor>
      <minor />
      <comment>Undo revision 1903762 by [[Special:Contributions/JackPotte|JackPotte]] ([[User talk:JackPotte|talk]]) - [[Category:Colors]] is for [[Colors]] only</comment>
      <text xml:space="preserve">*gusni illumine `light'
**Rafsi: gus, gu'i
**Definition: x&lt;sub&gt;1&lt;/sub&gt; [energy] is light/illumination illuminating x&lt;sub&gt;2&lt;/sub&gt; from light source x&lt;sub&gt;3&lt;/sub&gt;
**Notes: x&lt;sub&gt;3&lt;/sub&gt; illuminates/lights x&lt;sub&gt;2&lt;/sub&gt; with light/illumination x&lt;sub&gt;1&lt;/sub&gt;; x&lt;sub&gt;2&lt;/sub&gt; is lit/illuminated by illumination x&lt;sub&gt;1&lt;/sub&gt; from source x&lt;sub&gt;3&lt;/sub&gt; (= selgu'i for reordered places); light/lamp (= tergu'i) See also dirce, manku, solri, carmi, ctino, kantu.
*viska see `vision'
**Rafsi: vis, vi'a
**Definition: x&lt;sub&gt;1&lt;/sub&gt; sees/views/perceives visually x&lt;sub&gt;2&lt;/sub&gt; under conditions x&lt;sub&gt;3&lt;/sub&gt;
**Notes: Also (adjective:) x&lt;sub&gt;1&lt;/sub&gt; is visual; x&lt;sub&gt;3&lt;/sub&gt; can include ambient lighting, background, etc. which may affect what is perceived; note that English &quot;see&quot; often means &quot;look&quot; or a more generic &quot;observe&quot;, or even &quot;understand, know&quot;.  See also catlu, jvinu, kanla, minra, simlu, djuno, jimpe, zgana, ganse.
*catlu look
**Rafsi: cta
**Definition: x&lt;sub&gt;1&lt;/sub&gt; looks at/examines/views/inspects/regards/watches/gazes at x&lt;sub&gt;2&lt;/sub&gt;
**Notes: Also look through (= grecta, ravycta, bacycta); note that English &quot;look&quot; often means a more generic &quot;observe&quot;.  See also jvinu, minra, simlu, viska, lanli, zgana, setca, viska.
*jvinu view
**Rafsi: vin, ji'u
**Definition: x&lt;sub&gt;1&lt;/sub&gt; is the view/scene/panorama/sight/prospect of x&lt;sub&gt;2&lt;/sub&gt; (object/location) from point-of-view x&lt;sub&gt;3&lt;/sub&gt;
**Notes: Also x&lt;sub&gt;1&lt;/sub&gt; is on display to x&lt;sub&gt;2&lt;/sub&gt;/x&lt;sub&gt;3&lt;/sub&gt;.  See also catlu, kanla, viska, canko, jarco.
*manku dark
**Rafsi: man
**Definition: x&lt;sub&gt;1&lt;/sub&gt; is dark/lacking in illumination
**Notes: (cf. blabi, gusni, ctino; use kandi or xekri with colors, ctino)
*ctino shadow `shade'
**Rafsi: ti'o
**Definition: x&lt;sub&gt;1&lt;/sub&gt; is a shadow/the shade of object x&lt;sub&gt;2&lt;/sub&gt;, made by light/energy source x&lt;sub&gt;3&lt;/sub&gt;
**Notes: See also manku, gusni.
*skari color
**Rafsi: ska
**Definition: x&lt;sub&gt;1&lt;/sub&gt; is/appears to be of color/hue x&lt;sub&gt;2&lt;/sub&gt; as perceived/seen by x&lt;sub&gt;3&lt;/sub&gt; under conditions x&lt;sub&gt;4&lt;/sub&gt;
**Notes: Conditions may include lighting, background, etc..  See also blanu, bunre, cicna, cinta, crino, grusi, narju, nukni, pelxu, xunre, zirpu, carmi, kandi, xekri, blabi.
*xekri black
**Rafsi: xek, xe'i
**Definition: x&lt;sub&gt;1&lt;/sub&gt; is black/extremely dark-colored [color adjective]
**Notes: See also blabi, grusi, manku, skari, xekri, kandi, carmi, blanu, bunre, cicna, crino, narju, nukni, pelxu, xunre, zirpu.
*blabi white
**Rafsi: lab
**Definition: x&lt;sub&gt;1&lt;/sub&gt; is white/very-light colored [color adjective]
**Notes: Pale forms of other colors are a compound of white; e.g. pink (= labyxu'e, xunblabi) (whereas kandi is used for pale = dimness, lack of intensity).  See also skari, xekri, grusi, kandi, manku, carmi, bakri, blanu, bunre, cicna, crino, narju, nukni, pelxu, xunre, zirpu.
*grusi gray
**Rafsi: rus
**Definition: x&lt;sub&gt;1&lt;/sub&gt; is gray [color adjective]
**Notes: See also skari, blabi, xekri, kandi, carmi.  
*xunre red
**Rafsi: xun, xu'e
**Definition: x&lt;sub&gt;1&lt;/sub&gt; is red/crimson/ruddy [color adjective]
**Notes: See also skari, blabi, xekri, kandi, carmi, nukni, narju, rozgu, zirpu.
*pelxu yellow
**Rafsi: pel
**Definition: x&lt;sub&gt;1&lt;/sub&gt; is yellow/golden [color adjective]
**Notes: See also skari, blabi, xekri, kandi, carmi, narju, solji.
*crino green
**Rafsi: ri'o
**Definition: x&lt;sub&gt;1&lt;/sub&gt; is green/verdant [color adjective]
**Notes: See also skari, blabi, xekri, kandi, carmi, cicna.  
*blanu blue
**Rafsi: bla
**Definition: x&lt;sub&gt;1&lt;/sub&gt; is blue [color adjective]
**Notes: See also skari, blabi, xekri, zirpu, kandi, carmi, cicna.
*bunre brown
**Rafsi: bur, bu'e
**Definition: x&lt;sub&gt;1&lt;/sub&gt; is brown/tan [color adjective]
**Notes: See also skari, blabi, xekri, kandi, carmi.
*cicna cyan
**Rafsi: (none)
**Definition: x&lt;sub&gt;1&lt;/sub&gt; is cyan/turquoise/greenish-blue [color adjective]
**Notes: See also skari, blabi, xekri, kandi, carmi, crino, blanu.  
*narju orange
**Rafsi: naj
**Definition: x&lt;sub&gt;1&lt;/sub&gt; is orange [color adjective]
**Notes: See also skari, blabi, xekri, kandi, carmi, xunre, pelxu, solji.
*nukni magenta `fuchsin'
**Rafsi: nuk
**Definition: x&lt;sub&gt;1&lt;/sub&gt; is magenta/fuchsia/purplish-red [color adjective]
**Notes: See also skari, blabi, xekri, kandi, carmi, xunre, zirpu.
*zirpu purple
**Rafsi: zir, zi'u
**Definition: x&lt;sub&gt;1&lt;/sub&gt; is purple/violet [color adjective]
**Notes: See also skari, blabi, xekri, kandi, carmi, nukni, blanu, xunre.

[[Category:Lojban]]</text>
      <sha1>o545t8qvgckx4sql789voopjon8qraw</sha1>
      <model>wikitext</model>
      <format>text/x-wiki</format>
    </revision>
  </page>
  <page>
    <title>Lojban/Foods and beverages</title>
    <ns>0</ns>
    <id>520</id>
    <revision>
      <id>2364331</id>
      <parentid>627650</parentid>
      <timestamp>2012-06-15T19:59:54Z</timestamp>
      <contributor>
        <username>Zellfaze</username>
        <id>315324</id>
      </contributor>
      <comment>Bolded lojbanic words.</comment>
      <text xml:space="preserve">==Beverages==
*'''djacu''' water
**Rafsi: jac jau  
**Definition: x1 is made of/contains/is a quantity/expanse of water; (adjective:) x1 is aqueous/[aquatic]
**Notes: [aquatic (= jaupli)]; (cf. lalxu, rirxe, xamsi, limna, litki, lumci, bumru, jinto)
*'''xalka''' alcohol
**Rafsi: xal
**Definition: x1 is a quantity of/contains/is made of alcohol of type x2 from source/process x3
**Notes: See also birje, jikru, vanju.
*'''jikru''' liquor
**Rafsi: (none)
**Definition: x1 is made of/contains/is a quantity of liquor/spirits distilled from x2
**Notes: See also barja, vanju, birje, xalka.
*'''vanju''' wine
**Rafsi: van
**Definition: x1 is made of/contains/is a quantity of wine from fruit/grapes x2
**Notes: See also barja, birje, xalka, jikru, fusra.
*'''birje''' beer
**Rafsi: (none)
**Definition: x1 is made of/contains/is a amount of beer/ale/brew brewed from x2
**Notes: See also pinxe, barja, jikru, vanju, xalka, fusra.
*'''jisra''' juice
**Rafsi: (none)
**Definition: x1 is made of/contains/is a quantity of juice/nectar from-source/of-type x2
**Notes: Water-based extract from a (generally) biological source. See also pinxe, djacu, grute, stagi.
*'''sodva''' soda
**Rafsi: sod
**Definition: x1 is made of/contains/is a quantity of a carbonated beverage/soda of flavor/brand x2
**Notes: Also: soft drink (though this sometimes includes tea and coffee as distinct from alcoholic beverages which are &quot;hard drinks&quot;).  See also jilka, jinme.
*'''ckafi''' coffee
**Rafsi: kaf
**Definition: x1 is made of/contains/is a quantity of coffee from source/bean/grain x2
**Notes: Brew based on a seed/bean/grain; e.g. also chicory coffee, decaf, postum. See also tcati, brewed from a leaf, barja, cakla.
*'''tcati''' tea
**Rafsi: (none)
**Definition: x1 is made of/contains/is a quantity of tea brewed from leaves x2
**Notes: See also ckafi.

==Foods==
*'''sanmi''' meal
**Rafsi: sai
**Definition: x1 (mass) is a meal composed of dishes including x2
**Notes: x2 is a course/dish of meal x1 (= selsai for reordered places).  See also barja, stasu, gusta, sanso.
*'''rectu''' meat `flesh'
**Rafsi: rec, re'u
**Definition: x1 is a quantity of/contains meat/flesh from source/animal x2
**Notes: See also sluji.
*'''grasu''' grease
**Rafsi: ras
**Definition: x1 is a quantity of/is made of/contains grease/fat/oil from source x2
**Notes: See also ctile, matne, plana.
*'''ladru''' milk `lactic'
**Rafsi: lad
**Definition: x1 is made of/contains/is a quantity of milk from source x2; (adjective:) x1 is lactic/dairy
**Notes: See also lanbi, mabru, tatru, cirla, kruji.
*'''kruji''' cream
**Rafsi: ruj
**Definition: x1 is made of/contains/is a quantity of cream/emulsion/puree [consistency] of composition x2
**Notes: [x2: composition including x2, which need not be complete specification]; See also ladru, matne.
*'''matne''' butter
**Rafsi: (none)
**Definition: x1 is a quantity of/contains butter/oleo/margarine/shortening from source x2
**Notes: (adjective:) x1 is buttery; an edible fat, solid but spreadable at normal temperatures; dairy butter (= ladmatne).  See also grasu, kruji.
*'''cirla''' cheese
**Rafsi: (none)
**Definition: x1 is a quantity of/contains cheese/curd from source x2
**Notes: See also ladru.
*'''sakta''' sugar `sucrose'
**Rafsi: sat
**Definition: x1 is made of/contains/is a quantity of sugar [sweet edible] from source x2 of composition x3
**Notes: Also sucrose, fructose, glucose, galactose, lactose, etc.; saccharine/aspartame/sugar substitute (basysakta or sakybasti, ticysakta); x3: composition including x3, which need not be complete specification.  See also silna, titla.
*'''cakla''' chocolate
**Rafsi: (none)
**Definition: x1 is made of/contains/is a quantity of chocolate/cocoa
**Notes: See also ckafi.
*'''nanba''' bread
**Rafsi: nab
**Definition: x1 is a quantity of/contains bread [leavened or unleavened] made from grains x2
**Notes: See also gurni, panlo, toknu.
*'''salta''' salad
**Rafsi: (none)
**Definition: x1 (mass) is a quantity of salad [food] with ingredients/components including x2
**Notes: x2 is in x1, an ingredient/part/component of x1.  See also mixre, stasu.
*'''sanso''' sauce
**Rafsi: (none)
**Definition: x1 is a sauce/topping/gravy/frosting for use with x2, containing ingredient(s) including x3
**Notes: x3 is in x1, an ingredient/part/component of sauce x1.  See also sanmi, mixre, stasu.
*'''stasu''' soup `stew'
**Rafsi: (none)
**Definition: x1 is a quantity of soup/stew/olla/olio [food] of ingredients including x2
**Notes: x2 is in x1, an ingredient/part/component of x1.  See also sanmi, mixre, salta, sanso.
*'''tsapi''' seasoning
**Rafsi: (none)
**Definition: x1 is a seasoning/condiment/spice causing flavor/effect x2 (event/property)
**Notes: Also: x1 flavors x2 (tu'a).  See also vrusi.
*'''sigja''' cigar
**Rafsi: sig
**Definition: x1 is a cigar/cigarette/cigarillo made from tobacco/smokable substance x2 by x3
**Notes: See also danmo, jelca, tanko, marna.

===Vegetables===
*'''kobli''' cabbage `cole-'
**Rafsi: kob, ko'i
**Definition: x1 is a quantity of cabbage/lettuce/leafy vegetable of species/strain x2
**Notes: See also stagi.
*'''tamca''' tomato
**Rafsi: (none)
**Definition: x1 is a tomato [fruit/vegetable/plant] of species/strain x2
**Notes: See also grute, stagi.
*'''sluni''' onion
**Rafsi: (none)
**Definition: x1 is a quantity of/contains onions/scallions of type/cultivar x2
**Notes: See also stagi.
*'''sunga''' garlic
**Rafsi: sug
**Definition: x1 is a quantity of garlic [bulb] of species/strain x2
**Notes: See also stagi.
*'''patlu''' potato
**Rafsi: (none)
**Definition: x1 is a potato [an edible tuber] of variety/cultivar x2
**Notes: (use samcu for starchy/tuberous roots that do not reproduce from eyes of tuber); See also genja, jalna, samcu.
*'''samcu''' cassava `yam'
**Rafsi: (none)
**Definition: x1 is a quantity of cassava/taro/manioc/tapioca/yam [edible starchy root] of species/strain x2
**Notes: See also patlu, genja, jalna.

===Fruits===
*'''badna''' banana
**Rafsi: (none)
**Definition: x1 is a banana/plantain [fruit/plant] of species/breed x2
**Notes: See also grute.
*'''nimre''' citrus `lime'
**Rafsi: (none)
**Definition: x1 is a quantity of citrus [fruit/tree, etc.] of species/strain x2
**Notes: See also grute, slari, slami, xukmi.
*'''plise''' apple
**Rafsi: (none)
**Definition: x1 is an apple [fruit] of species/strain x2
**Notes: See also grute.
*'''perli''' pear
**Rafsi: per
**Definition: x1 is a pear [fruit] of species/strain x2
**Notes: See also grute.
*'''guzme''' melon
**Rafsi: guz zme
**Definition: x1 is a melon/squash [fruit/plant] of species/strain x2
**Notes: See also grute.
*'''figre''' fig
**Rafsi: fig
**Definition: x1 is a fig [fruit/tree] of species/strain x2
**Notes: See also grute.

==Digestion==
*'''pinxe''' drink
**Rafsi: pix
**Definition: x1 (agent) drinks/imbibes beverage/drink/liquid refreshment x2 from/out-of container/source x3
**Notes: See also cidja, citka, taske, tunlo, xaksu, barja, birje.
*'''cidja''' food `feed'
**Rafsi: dja
**Definition: x1 is food/feed/nutriment for x2; x1 is edible/gives nutrition to x2
**Notes: See also citka, nitcu, pinxe, xagji, cpina.
*'''vindu''' poison `venom'
**Rafsi: vid
**Definition: x1 is poisonous/venomous/toxic/a toxin to x2
**Notes: See also since.
*'''vikmi''' excrete
**Rafsi: vim, vi'i
**Definition: x1 [body] excretes waste x2 from source x3 via means/route x4
**Notes: See also cigla, kalci, pinca, xasne.
*'''kalci''' feces `shit'
**Rafsi: (none)
**Definition: x1 is a/the feces/excrement/dung/shit of x2 (animal/person); (adjective:) x1 is fecal (matter)
**Notes: Also crap.  See also ganxo, pinca, vikmi, mabla, festi.
*'''pinca''' urine `piss'
**Rafsi: (none)
**Definition: x1 is a/the urine/piss/pee of x2
**Notes: See also vikmi, xasne, kalci, mabla, festi.
*'''vamtu''' vomit
**Rafsi: vat
**Definition: x1 vomits/regurgitates x2; x1 throws x2 up; [violent] digestive expulsion
**Notes: (x2 is non-gaseous); See also rigni, jetce, kafke, sputu.

[[Category:Lojban]]</text>
      <sha1>4zcn0xwn3eiz2qt92e005kxoszcuc6r</sha1>
      <model>wikitext</model>
      <format>text/x-wiki</format>
    </revision>
  </page>
  <page>
    <title>Waves/1D Solutions</title>
    <ns>0</ns>
    <id>522</id>
    <revision>
      <id>1711463</id>
      <parentid>551363</parentid>
      <timestamp>2010-02-03T07:42:12Z</timestamp>
      <contributor>
        <ip>41.190.2.169</ip>
      </contributor>
      <comment>/* KdV */</comment>
      <text xml:space="preserve">{{1DWavesTOC}}
As you have learned in the previous sections, the linear waves you studied in the previous section tend to disperse. However, there are nonlinear waves described by nonlinear partial differential equations (PDE) which admits solutions with nondispersing wave packets.

Here are two primary examples:
== Sine-Gordon ==
This is described by the PDE 

&lt;math&gt;\partial^2_x\phi-\partial^2_t\phi=\sin(\phi)&lt;/math&gt;.

The equation of a wave travelling along the postive x direction is given by  y=0.25 x 0.001sin(500t-0.025x)determine the angular frequence</text>
      <sha1>cfh7dtdl1cuhgvjim9ym05x6n98hi0p</sha1>
      <model>wikitext</model>
      <format>text/x-wiki</format>
    </revision>
  </page>
  <page>
    <title>Calculus/Differentiation/Differentiation Defined</title>
    <ns>0</ns>
    <id>523</id>
    <revision>
      <id>2584870</id>
      <parentid>2582917</parentid>
      <timestamp>2013-11-25T19:09:57Z</timestamp>
      <contributor>
        <username>Recent Runes</username>
        <id>66908</id>
      </contributor>
      <comment>Rejected the last 4 text changes (by [[Special:Contributions/Bvleonov|Bvleonov]], [[Special:Contributions/175.144.50.77|175.144.50.77]] and [[Special:Contributions/85.12.76.63|85.12.76.63]]) and restored revision 2287828 by InverseHypercube</comment>
      <text xml:space="preserve">{{Calculus/Top Nav|Differentiation/Contents|Product and Quotient Rules}}

== What is Differentiation? ==
Differentiation is an operation that allows us to find a function that outputs the '''rate of change''' of one variable with respect to another variable.  

Informally, we may suppose that we're tracking the position of a car on a two-lane road with no passing lanes.  Assuming the car never pulls off the road, we can abstractly study the car's position by assigning it a variable, &lt;math&gt;x&lt;/math&gt;.  Since the car's position changes as the time changes, we say that &lt;math&gt;x&lt;/math&gt; is dependent on time, or &lt;math&gt;x = f(t)&lt;/math&gt;.  This tells where the car is at each specific time.  Differentiation gives us a function &lt;math&gt;dx / dt&lt;/math&gt; which represents the car's speed, that is the rate of change of its position with respect to time.  

Equivalently, differentiation gives us the slope at any point of the graph of a non-linear function. For a linear function, of form &lt;math&gt;f(x)=ax+b&lt;/math&gt;, &lt;math&gt;a&lt;/math&gt; is the slope. For non-linear functions, such as &lt;math&gt;f(x)=3x^2&lt;/math&gt;, the slope can depend on &lt;math&gt;x&lt;/math&gt;; differentiation gives us a function which represents this slope.

== The Definition of Slope ==
Historically, the primary motivation for the study of '''differentiation''' was the tangent line problem: for a given curve, find the slope of the straight line that is tangent to the curve at a given point.  The word ''tangent'' comes from the Latin word ''tangens'', which means touching.  Thus, to solve the tangent line problem, we need to find the slope of a line that is &quot;touching&quot; a given curve at a given point, or, in modern language, that has the same slope.  But what exactly do we mean by &quot;slope&quot; for a curve?

The solution is obvious in some cases: for example, a line &lt;math&gt;y = m x + c&lt;/math&gt; is its own tangent; the slope at any point is &lt;math&gt;m&lt;/math&gt;.  For the parabola &lt;math&gt;y = x^2&lt;/math&gt;, the slope at the point &lt;math&gt;(0,0)&lt;/math&gt; is &lt;math&gt;0&lt;/math&gt;; the tangent line is horizontal.

But how can you find the slope of, say, &lt;math&gt;y = \sin  x + x^2&lt;/math&gt; at &lt;math&gt;x = 1.5&lt;/math&gt;? This is in general a nontrivial question, but first we will deal carefully with the slope of lines.

===Of a line===
[[Image:Lines with Gradients.svg|thumb|325px|right|Three lines with different slopes]]
The '''slope''' of a line, also called the '''gradient''' of the line, is a measure of its inclination. A line that is horizontal has slope 0, a line from the bottom left to the top right has a positive slope and a line from the top left to the bottom right has a negative slope.

The slope can be defined in two (equivalent) ways. The first way is to express it as how much the line climbs for a given motion horizontally. We denote a change in a quantity using the symbol &lt;math&gt;\Delta&lt;/math&gt; (pronounced &quot;delta&quot;). Thus, a change in &lt;math&gt;x&lt;/math&gt; is written as &lt;math&gt;\Delta x&lt;/math&gt;. We can therefore write this definition of slope as:
::&lt;math&gt;\mbox{Slope}=\frac{\Delta y}{\Delta x}&lt;/math&gt;

An example may make this definition clearer. If we have two points on a line, &lt;math&gt;P \left(x_1,y_1 \right)&lt;/math&gt; and &lt;math&gt;Q \left( x_2,y_2 \right)&lt;/math&gt;, the change in &lt;math&gt;x&lt;/math&gt; from &lt;math&gt;P&lt;/math&gt; to &lt;math&gt;Q&lt;/math&gt; is given by:
::&lt;math&gt;\Delta x = x_2 - x_1\,&lt;/math&gt;
Likewise, the change in &lt;math&gt;y&lt;/math&gt; from &lt;math&gt;P&lt;/math&gt; to &lt;math&gt;Q&lt;/math&gt; is given by:
::&lt;math&gt;\Delta y = y_2 - y_1\,&lt;/math&gt;
This leads to the very important result below.

{{Calculus/Def|
text=The slope of the line between the points &lt;math&gt;(x_1, y_1)&lt;/math&gt; and &lt;math&gt;(x_2, y_2)&lt;/math&gt; is
::&lt;math&gt;\frac{\Delta y}{\Delta x} = \frac{y_2 - y_1}{x_2 - x_1}&lt;/math&gt;.
}}

Alternatively, we can define slope trigonometrically, using the tangent function:
::&lt;math&gt;\mbox{Slope}=\tan\left( \alpha \right),&lt;/math&gt;
where &lt;math&gt;\alpha&lt;/math&gt; is the angle from the rightward-pointing horizontal to the line, measured counter-clockwise. If you recall that the tangent of an angle is the ratio of the y-coordinate to the x-coordinate on the unit circle, you should be able to spot the equivalence here.

===Of a graph of a function===
The graphs of most functions we are interested in are not straight lines (although they can be), but rather curves. We cannot define the slope of a curve in the same way as we can for a line. In order for us to understand how to find the slope of a curve at a point, we will first have to cover the idea of '''tangency'''. Intuitively, a '''tangent''' is a line which ''just'' touches a curve at a point, such that the angle between them at that point is zero. Consider the following four curves and lines:

{| align=center
|align=center|'''(i)'''
|align=center|'''(ii)'''
|-
|[[Image:Tangency Example 1.svg|300px]]
|[[Image:Tangency Example 2.svg|300px]]
|-
|align=center|'''(iii)'''
|align=center|'''(iv)'''
|-
|[[Image:Tangency Example 3.svg|300px]]
|[[Image:Tangency Example 4.svg|300px]]
|}

&lt;ol style=&quot;list-style-type:lower-roman&quot;&gt;
  &lt;li&gt;The line &lt;math&gt;L&lt;/math&gt; crosses, but is not tangent to &lt;math&gt;C&lt;/math&gt; at &lt;math&gt;P&lt;/math&gt;.&lt;/li&gt;
  &lt;li&gt;The line &lt;math&gt;L&lt;/math&gt; crosses, and is tangent to &lt;math&gt;C&lt;/math&gt; at &lt;math&gt;P&lt;/math&gt;.&lt;/li&gt;
  &lt;li&gt;The line &lt;math&gt;L&lt;/math&gt; crosses &lt;math&gt;C&lt;/math&gt; at two points, but is tangent to &lt;math&gt;C&lt;/math&gt; only at &lt;math&gt;P&lt;/math&gt;.&lt;/li&gt;
  &lt;li&gt;There are many lines that cross &lt;math&gt;C&lt;/math&gt; at &lt;math&gt;P&lt;/math&gt;, but none are tangent. In fact, this curve has no tangent at &lt;math&gt;P&lt;/math&gt;.&lt;/li&gt;
&lt;/ol&gt;

A '''secant''' is a line drawn through two points on a curve. We can construct a definition of a tangent as the limit of a secant of the curve taken as the separation between the points tends to zero. Consider the diagram below.

[[image:Tangent_as_Secant_Limit.svg|center]]

As the distance &lt;math&gt;h&lt;/math&gt; tends to zero, the secant line becomes the tangent at the point &lt;math&gt;x_0&lt;/math&gt;. The two points we draw our line through are:

::&lt;math&gt;P \left( x_0, f\left( x_0 \right) \right) &lt;/math&gt;
and
:: &lt;math&gt;Q \left( x_0+h, f\left( x_0+h \right) \right) &lt;/math&gt;

As a secant line is simply a line and we know two points on it, we can find its slope, &lt;math&gt;m_h&lt;/math&gt;, using the formula from before:

::&lt;math&gt;m = \frac{y_2 - y_1}{x_2 - x_1}&lt;/math&gt;

(We will refer to the slope as &lt;math&gt;m_h&lt;/math&gt; because it may, and generally will, depend on &lt;math&gt;h&lt;/math&gt;.) Substituting in the points on the line,

::&lt;math&gt;m_h = \frac{f\left( x_0+h \right) - f\left( x_0 \right)}{\left(x_0 + h \right) - x_0}.&lt;/math&gt;

This simplifies to

::&lt;math&gt;m_h = \frac{f\left( x_0+h \right) - f\left( x_0 \right)}{h}.&lt;/math&gt;

This expression is called the '''difference quotient'''. Note that &lt;math&gt;h&lt;/math&gt; can be positive or negative — it is perfectly valid to take a secant through any two points on the curve — but cannot be &lt;math&gt;0&lt;/math&gt;.

The definition of the tangent line we gave was not rigorous, since we've only defined limits of ''numbers'' — or, more precisely, of functions that output numbers — not of ''lines''. But we ''can'' define the ''slope'' of the tangent line at a point rigorously, by taking the limit of the slopes of the secant lines from the last paragraph. Having done so, we can ''then'' define the tangent line as well. Note that we cannot simply set &lt;math&gt;h&lt;/math&gt; to zero as this would imply division of zero by zero which would yield an undefined result. Instead we must find the [[Calculus/Limits|'''limit''']] of the above expression as &lt;math&gt;h&lt;/math&gt; '''tends''' to zero:

{{Calculus/Def
|title=Definition: (Slope of the graph of a function)
|text=
The '''slope''' of the graph of &lt;math&gt;f(x)&lt;/math&gt; at the point &lt;math&gt;(x_0,f(x_0))&lt;/math&gt; is

:&lt;math&gt;\lim_{h \to 0}\left[\frac{f\left( x_0+h \right) - f\left( x_0 \right)}{h}\right]&lt;/math&gt;

If this limit does not exist, then we say the slope is '''undefined'''.

If the slope is defined, say &lt;math&gt;m&lt;/math&gt;, then the '''tangent line''' to the graph of &lt;math&gt;f(x)&lt;/math&gt; at the point &lt;math&gt;(x_0,f(x_0))&lt;/math&gt; is the line with equation

:&lt;math&gt;y-f(x_0) = m\cdot(x-x_0)&lt;/math&gt;
}}

This last equation is just the point-slope form for the line through &lt;math&gt;(x_0,f(x_0))&lt;/math&gt; with slope &lt;math&gt;m&lt;/math&gt;.

===Exercises===

{{question-answer|question=1. Find the slope of the tangent to the curve &lt;math&gt;y=x^2&lt;/math&gt; at &lt;math&gt;(1,1)&lt;/math&gt;.|answer={{noprint|&lt;math&gt;2&lt;/math&gt;}}}}
[[Calculus/Differentiation/Differentiation Defined/Solutions|Solutions]]

== The Rate of Change of a Function at a Point ==
Consider the formula for average velocity in the &lt;math&gt;x&lt;/math&gt; direction, &lt;math&gt;\frac{\Delta x}{\Delta t}&lt;/math&gt;, where &lt;math&gt;\Delta x&lt;/math&gt; is the change in &lt;math&gt;x&lt;/math&gt; over the time interval &lt;math&gt;\Delta t&lt;/math&gt;. This formula gives the average velocity over a period of time, but suppose we want to define the instantaneous velocity. To this end we look at the '''change in position as the change in time approaches 0'''. Mathematically this is written as:
&lt;math&gt;\lim_{\Delta t \to 0} \frac{\Delta x}{\Delta t}&lt;/math&gt;, which we abbreviate by the symbol &lt;math&gt;\frac{dx}{dt}&lt;/math&gt;. (The idea of this notation is that the letter &lt;math&gt;d&lt;/math&gt; denotes change.)  Compare the symbol &lt;math&gt;d&lt;/math&gt; with &lt;math&gt;\Delta&lt;/math&gt;. The idea is that both indicate a difference between two numbers, but &lt;math&gt;\Delta&lt;/math&gt; denotes a finite difference while &lt;math&gt;d&lt;/math&gt; denotes an infinitesimal difference. Please note that the symbols &lt;math&gt;dx&lt;/math&gt; and &lt;math&gt;dt&lt;/math&gt; have no rigorous meaning on their own, since &lt;math&gt;\lim_{\Delta t \to 0} \Delta t=0&lt;/math&gt;, and we can't divide by 0.

(Note that the letter &lt;math&gt;s&lt;/math&gt; is often used to denote distance, which would yield &lt;math&gt;\frac{ds}{dt}&lt;/math&gt;. The letter &lt;math&gt;d&lt;/math&gt; is often avoided in denoting distance due to the potential confusion resulting from the expression &lt;math&gt;\frac{dd}{dt}&lt;/math&gt;.)

== The Definition of the Derivative ==
You may have noticed that the two operations we've discussed — computing the slope of the tangent to the graph of a function and computing the instantaneous rate of change of the function — involved exactly the same limit. That is, the slope of the tangent to the graph of &lt;math&gt;y=f(x)&lt;/math&gt; is &lt;math&gt;\frac{dy}{dx}&lt;/math&gt;. Of course, &lt;math&gt;\frac{dy}{dx}&lt;/math&gt; can, and generally will, depend on &lt;math&gt;x&lt;/math&gt;, so we should really think of it as a ''function'' of &lt;math&gt;x&lt;/math&gt;. We call this process (of computing &lt;math&gt;\frac{dy}{dx}&lt;/math&gt;) '''differentiation'''. Differentiation results in another function whose value for any value &lt;math&gt;x&lt;/math&gt; is the slope of the original function at &lt;math&gt;x&lt;/math&gt;. This function is known as the '''derivative''' of the original function.

&lt;!-- This is repeated below... --&gt;
Since lots of different sorts of people use derivatives, there are lots of different mathematical notations for them. Here are some:
* &lt;math&gt;f'(x)\ &lt;/math&gt; (read &quot;f prime of x&quot;) for the derivative of &lt;math&gt;f(x)&lt;/math&gt;,
* &lt;math&gt;D_x[f(x)]&lt;/math&gt;,
* &lt;math&gt;D f(x)&lt;/math&gt;,
* &lt;math&gt;\frac{dy}{dx}&lt;/math&gt; for the derivative of &lt;math&gt;y&lt;/math&gt; as a function of &lt;math&gt;x&lt;/math&gt; or
* &lt;math&gt;\frac{d}{dx}\left[ y\right]&lt;/math&gt;, which is more useful in some cases.

Most of the time the brackets are not needed, but are useful for clarity if we are dealing with something like &lt;math&gt;D (fg)&lt;/math&gt;, where we want to differentiate the product of two functions, &lt;math&gt;f&lt;/math&gt; and &lt;math&gt;g&lt;/math&gt;.

The first notation has the advantage that it makes clear that the derivative is a function. That is, if we want to talk about the derivative of &lt;math&gt;f(x)&lt;/math&gt; at &lt;math&gt;x=2&lt;/math&gt;, we can just write &lt;math&gt;f'(2)&lt;/math&gt;.

In any event, here is the formal definition:

{{Calculus/Def
|title=Definition: (derivative)
|text=Let &lt;math&gt;f(x)&lt;/math&gt; be a function. Then &lt;math&gt;f'(x) = \lim_{\Delta x \to 0}\frac{f(x+\Delta x)-f(x)}{\Delta x}&lt;/math&gt; wherever this limit exists. In this case we say that &lt;math&gt;f&lt;/math&gt; is '''differentiable''' at &lt;math&gt;x&lt;/math&gt; and its '''derivative''' at &lt;math&gt;x&lt;/math&gt; is &lt;math&gt;f'(x)&lt;/math&gt;.
}}

=== Examples ===

'''Example 1'''

The derivative of &lt;math&gt;f(x)=x/2&lt;/math&gt; is
:&lt;math&gt;f'(x)=\lim_{\Delta x \to 0}\left(\frac{\frac{x+\Delta x}{2} - \frac{x}{2}}{\Delta x}\right)=\lim_{\Delta x \to 0}\left(\frac{\frac{x}{2}+\frac{\Delta x}{2} - \frac{x}{2}}{\Delta x}\right)=\lim_{\Delta x \to 0}\left(\frac{\frac{\Delta x}{2}}{\Delta x}\right)=\lim_{\Delta x \to 0}\left(\frac{\Delta x}{2 \Delta x}\right)=\lim_{\Delta x \to 0}\left(\frac{1}{2}\right)=\frac{1}{2}&lt;/math&gt;,

no matter what &lt;math&gt;x&lt;/math&gt; is. This is consistent with the definition of the derivative as the slope of a function.

'''Example 2'''

What is the slope of the graph of &lt;math&gt; y=3x^2 &lt;/math&gt; at &lt;math&gt;(4,48)&lt;/math&gt;? We can do it &quot;the hard (and imprecise) way&quot;, ''without'' using differentiation, as follows, using a calculator and using small differences below and above the given point:

When &lt;math&gt;x=3.999&lt;/math&gt;, &lt;math&gt;y=47.976003&lt;/math&gt;.

When &lt;math&gt;x=4.001&lt;/math&gt;, &lt;math&gt;y=48.024003&lt;/math&gt;.

Then the difference between the two values of &lt;math&gt;x&lt;/math&gt; is &lt;math&gt;\Delta x=0.002&lt;/math&gt;.

Then the difference between the two values of &lt;math&gt;y&lt;/math&gt; is &lt;math&gt;\Delta y=0.048&lt;/math&gt;.

Thus, the slope &lt;math&gt;= \frac{\Delta y}{\Delta x} = 24&lt;/math&gt; at the point of the graph at which &lt;math&gt;x=4&lt;/math&gt;.

But, to solve the problem precisely, we compute

:{|
|&lt;math&gt;\lim_{\Delta x\to 0}\frac{3(4+\Delta x)^2-48}{\Delta x}\,&lt;/math&gt;
| = &lt;math&gt;3\lim_{\Delta x\to 0}\frac{(4+\Delta x)^2-16}{\Delta x}&lt;/math&gt;
|-
|
| = &lt;math&gt;3\lim_{\Delta x\to 0}\frac{16+8\Delta x+(\Delta x)^2-16}{\Delta x}&lt;/math&gt;
|-
|
| = &lt;math&gt;3\lim_{\Delta x\to 0}\frac{8\Delta x+(\Delta x)^2}{\Delta x}&lt;/math&gt;
|-
|
| = &lt;math&gt;3\lim_{\Delta x\to 0}(8+\Delta x)&lt;/math&gt;
|-
|
| = &lt;math&gt;3(8)&lt;/math&gt;
|-
|
| = &lt;math&gt;24&lt;/math&gt;.
|}
We were lucky this time; the approximation we got above turned out to be exactly right. But this won't always be so, and, anyway, this way we didn't need a calculator.

In general, the derivative of &lt;math&gt;f(x)=3x^2&lt;/math&gt; is

:{|
| &lt;math&gt;f'(x)\,&lt;/math&gt;
| = &lt;math&gt;\lim_{\Delta x\to 0}\frac{3(x+\Delta x)^2-3x^2}{\Delta x}&lt;/math&gt;
|-
|
| = &lt;math&gt;3\lim_{\Delta x\to 0}\frac{(x+\Delta x)^2-x^2}{\Delta x}&lt;/math&gt;
|-
|
| = &lt;math&gt;3\lim_{\Delta x\to 0}\frac{x^2+2x\Delta x+(\Delta x)^2-x^2}{\Delta x}&lt;/math&gt;
|-
|
| = &lt;math&gt;3\lim_{\Delta x\to 0}\frac{2x\Delta x+(\Delta x)^2}{\Delta x}&lt;/math&gt;
|-
|
| = &lt;math&gt;3\lim_{\Delta x\to 0}(2x+\Delta x)&lt;/math&gt;
|-
|
| = &lt;math&gt;3(2x)&lt;/math&gt;
|-
|
| = &lt;math&gt;6x&lt;/math&gt;.
|}

'''Example 3'''

If &lt;math&gt;f(x) = \left|x\right|&lt;/math&gt; (the absolute value function) then &lt;math&gt;f'(x) = \frac{x}{\left|x\right|}&lt;/math&gt;, which can also be stated as &lt;math&gt;f'(x) = \left\{ \begin{matrix} -1, &amp; x &lt; 0 \\ \operatorname{undefined}, &amp; x = 0 \\ 1, &amp; x &gt; 0 \end{matrix} \right. .&lt;/math&gt; Finding this derivative is a bit complicated, so we won't prove it at this point.


Here, &lt;math&gt;f(x)&lt;/math&gt; is not smooth (though it is continuous) at &lt;math&gt;x=0&lt;/math&gt; and so the limits &lt;math&gt;\lim_{x \to 0^{+}} f'(x)&lt;/math&gt; and &lt;math&gt;\lim_{x \to 0^{-}} f'(x)&lt;/math&gt; (the limits as 0 is approached from the right and left respectively) are not equal. From the definition, &lt;math&gt;f'(0)=\lim_{\Delta x\to 0}\frac{\left|\Delta x\right|}{\Delta x}&lt;/math&gt;, which does not exist. Thus, &lt;math&gt;f'(0)&lt;/math&gt; is undefined, and so &lt;math&gt;f'(x)&lt;/math&gt; has a discontinuity at 0.  This sort of point of non-differentiability is called a cusp.  Functions may also not be differentiable because they go to infinity at a point, or oscillate infinitely frequently.

===Understanding the derivative notation===
{{Wikipedia|Notation for differentiation}}
The derivative notation is special and unique in mathematics.  The most common notation for derivatives you'll run into when first starting out with differentiating is the Leibniz notation, expressed as &lt;math&gt; \frac{dy}{dx}&lt;/math&gt;.  You may think of this as &quot;rate of change in &lt;math&gt;y&lt;/math&gt; with respect to &lt;math&gt;x&lt;/math&gt;&quot;.  You may also think of it as &quot;infinitesimal value of &lt;math&gt;y&lt;/math&gt; divided by infinitesimal value of &lt;math&gt;x&lt;/math&gt;&quot;.  Either way is a good way of thinking, although you should remember that the precise definition is the one we gave above.  Often, in an equation, you will see just &lt;math&gt;\frac{d}{dx}&lt;/math&gt;, which literally means &quot;derivative with respect to x&quot;.  This means we should take the derivative of whatever is written to the right; that is, &lt;math&gt;\frac{d}{dx}(x+2)&lt;/math&gt; means &lt;math&gt;\frac{dy}{dx}&lt;/math&gt; where &lt;math&gt;y=x+2&lt;/math&gt;.

As you advance through your studies, you will see that we sometimes pretend that &lt;math&gt;dy&lt;/math&gt; and &lt;math&gt;dx&lt;/math&gt; are separate entities that can be multiplied and divided, by writing things like &lt;math&gt;dy=x^4\,dx&lt;/math&gt;.  Eventually you will see derivatives such as &lt;math&gt;\frac {dx} {dy}&lt;/math&gt;, which just means that the input variable of our function is called &lt;math&gt;y&lt;/math&gt; and our output variable is called &lt;math&gt;x&lt;/math&gt;; sometimes, we will write &lt;math&gt; \frac{d}{dy}&lt;/math&gt;, to mean the derivative with respect to &lt;math&gt;y&lt;/math&gt; of whatever is written on the right.  In general, the variables could be anything, say &lt;math&gt;\frac{d\theta}{dr}&lt;/math&gt;.

All of the following are equivalent for expressing the derivative of &lt;math&gt;y = x^{2}&lt;/math&gt;
* &lt;math&gt;\frac{dy}{dx} = 2x&lt;/math&gt;
* &lt;math&gt;\frac{d}{dx} x^{2} = 2x&lt;/math&gt;
* &lt;math&gt;dy = 2x dx \ &lt;/math&gt;
* &lt;math&gt;f '(x) = 2x \ &lt;/math&gt;
* &lt;math&gt;D(f(x)) = 2x \ &lt;/math&gt;

===Exercises===
{{question-answer|question=2. Using the definition of the derivative find the derivative of the function &lt;math&gt;f(x)=2x+3&lt;/math&gt;.|answer={{noprint|&lt;math&gt;2&lt;/math&gt;}}}}

{{question-answer|question=3. Using the definition of the derivative find the derivative of the function &lt;math&gt;f(x)=x^3&lt;/math&gt;.  Now try &lt;math&gt;f(x)=x^4&lt;/math&gt;.  Can you see a pattern?  In the next section we will find the derivative of &lt;math&gt;f(x)=x^n&lt;/math&gt; for all &lt;math&gt;n&lt;/math&gt;.|answer={{noprint|&lt;math&gt;\frac{d x^3}{dx}=3x^2\qquad\frac{d x^4}{dx}=4x^3&lt;/math&gt;}}}}

{{question-answer|question=4. The text states that the derivative of &lt;math&gt;\left|x\right|&lt;/math&gt; is not defined at &lt;math&gt;x = 0&lt;/math&gt;. Use the definition of the derivative to show this.|answer={{noprint|&lt;math&gt;\begin{alignat}{2}\lim_{\Delta x\to 0^-}\frac{\left|0+\Delta x\right|-\left|0\right|}{\Delta x}
&amp;=\lim_{\Delta x\to 0^-}\frac{-\Delta x}{\Delta x}
&amp; \qquad\lim_{\Delta x\to 0^+}\frac{\left|0+\Delta x\right|-\left|0\right|}{\Delta x}
&amp;= \lim_{\Delta x\to 0^+}\frac{\Delta x}{\Delta x}\\
&amp;=\lim_{\Delta x\to 0^-}-1
&amp; &amp;=\lim_{\Delta x\to 0^+}1\\
&amp;=-1
&amp; &amp;=1
\end{alignat}&lt;/math&gt;
&lt;br/&gt;Since the limits from the left and the right at &lt;math&gt;x=0&lt;/math&gt; are not equal, the limit does not exist, so &lt;math&gt;\left|x\right|&lt;/math&gt; is not differentiable at &lt;math&gt;x=0&lt;/math&gt;.}}}}

{{question-answer|question=5. Graph the derivative to &lt;math&gt;y=4x^2&lt;/math&gt; on a piece of graph paper without solving for &lt;math&gt; dy/dx &lt;/math&gt;.  Then, solve for &lt;math&gt; dy/dx &lt;/math&gt; and graph that; compare the two graphs.|answer={{noprint|}}}}

{{question-answer|question=6. Use the definition of the derivative to show that the derivative of &lt;math&gt;\sin x&lt;/math&gt; is &lt;math&gt;\cos x &lt;/math&gt;. Hint: Use a suitable sum to product formula and the fact that &lt;math&gt;\lim_{t \to 0}\frac{\sin(t)}{t}=1&lt;/math&gt; and &lt;math&gt;\lim_{t \to 0}\frac{\cos(t)-1}{t}=0&lt;/math&gt;.|answer={{noprint|&lt;math&gt;\begin{align}\lim_{\Delta x\to 0}\frac{\sin(x+\Delta x)-\sin(x)}{\Delta x}
&amp;=\lim_{\Delta x\to 0}\frac{(\sin(x)\cos(\Delta x)+\cos(x)\sin(\Delta x))-\sin(x)}{\Delta x}\\
&amp;=\lim_{\Delta x\to 0}\frac{\sin(x)(\cos(\Delta x)-1)+\cos(x)\sin(\Delta x)}{\Delta x}\\
&amp;=\sin(x)\cdot\lim_{\Delta x\to 0}\frac{\cos(\Delta x)-1}{\Delta x}+\cos(x)\cdot\lim_{\Delta x\to 0}\frac{\sin(\Delta x)}{\Delta x}\\
&amp;=\sin(x)\cdot 0+\cos(x)\cdot 1\\
&amp;=\cos(x)
\end{align}&lt;/math&gt;}}}}
[[Calculus/Differentiation/Differentiation Defined/Solutions|Solutions]]

==Differentiation Rules==
The process of differentiation is tedious for complicated functions. Therefore, rules for differentiating general functions have been developed, and can be proved with a little effort. Once sufficient rules have been proved, it will be fairly easy to differentiate a wide variety of functions.  Some of the simplest rules involve the derivative of linear functions.

===Derivative of a constant function===
For any fixed real number &lt;math&gt;c&lt;/math&gt;,
&lt;center&gt;&lt;math&gt;\frac{d}{dx}\left[c\right]=0.&lt;/math&gt;&lt;/center&gt;

====Intuition====

The graph of the function &lt;math&gt;f(x) = c&lt;/math&gt; is a horizontal line, which has a constant slope of zero. Therefore, it should be expected that the derivative of this function is zero, regardless of the values of &lt;math&gt;x&lt;/math&gt; and &lt;math&gt;c&lt;/math&gt;.

====Proof====

The definition of a derivative is

:&lt;math&gt;\lim_{\Delta x \to 0}\frac{f(x+\Delta x)-f(x)}{\Delta x}.&lt;/math&gt;

Let &lt;math&gt; f(x) = c &lt;/math&gt; for all &lt;math&gt;x&lt;/math&gt;. (That is, &lt;math&gt;f&lt;/math&gt; is a constant function.) Then &lt;math&gt; f(x+\Delta x) = c &lt;/math&gt;. Therefore

:&lt;math&gt; \frac{d}{dx}\left[c\right] = \lim_{\Delta x \to 0} \frac{c-c}{\Delta x} = \lim_{\Delta x \to 0} \frac{0}{\Delta x}&lt;/math&gt;.&lt;br/&gt;

Let &lt;math&gt;g(\Delta x)=\frac{0}{\Delta x}&lt;/math&gt;.  To prove that &lt;math&gt;\lim_{\Delta x\to 0}g(\Delta x)=0&lt;/math&gt;, we need to find a positive &lt;math&gt;\delta&lt;/math&gt; such that, for any given positive &lt;math&gt;\varepsilon&lt;/math&gt;, &lt;math&gt;\left|g(\Delta x)-0\right|&lt;\varepsilon&lt;/math&gt; whenever &lt;math&gt;0&lt;\left|\Delta x-0\right|&lt;\delta&lt;/math&gt;.  But &lt;math&gt;\left|g(\Delta x)-0\right|=0&lt;/math&gt;, so &lt;math&gt;\left|g(\Delta x)-0\right|&lt;\varepsilon&lt;/math&gt; for any choice of &lt;math&gt;\delta&lt;/math&gt;.

====Examples====

#&lt;math&gt;\frac{d}{dx}\left[3\right]=0&lt;/math&gt;
#&lt;math&gt;\frac{d}{dx}\left[z\right]=0&lt;/math&gt;

Note that, in the second example, &lt;math&gt;z&lt;/math&gt; is just a constant.

===Derivative of a linear function===
For any fixed real numbers &lt;math&gt;m&lt;/math&gt; and &lt;math&gt;c&lt;/math&gt;,

&lt;div align=&quot;center&quot; style=&quot;padding: 1em 10em;&quot;&gt;&lt;math&gt;\frac{d}{dx}\left[mx+c\right]=m&lt;/math&gt;&lt;/div&gt;

The special case &lt;math&gt;\frac{dx}{dx} = 1&lt;/math&gt; shows the advantage of the &lt;math&gt;\frac{d}{dx}&lt;/math&gt; notation—rules are intuitive by basic algebra, though this does not constitute a proof, and can lead to misconceptions to what exactly &lt;math&gt;dx&lt;/math&gt; and &lt;math&gt;dy&lt;/math&gt; actually are.

====Intuition====
The graph of &lt;math&gt;y=mx+c&lt;/math&gt; is a line with constant slope &lt;math&gt;m&lt;/math&gt;.

====Proof====
If &lt;math&gt;f(x)=mx+c&lt;/math&gt;, then &lt;math&gt;f(x+\Delta x)=m(x+\Delta x)+c&lt;/math&gt;. So, 

:{|
|&lt;math&gt;f'(x)\,&lt;/math&gt;
| = &lt;math&gt;\lim_{\Delta x\to 0}\frac{m(x+\Delta x)+c-mx-c}{\Delta x}\,&lt;/math&gt;
|-
|
| = &lt;math&gt;\lim_{\Delta x\to 0}\frac{m(x+\Delta x)-mx}{\Delta x}&lt;/math&gt;
|-
|
| = &lt;math&gt;\lim_{\Delta x\to 0}\frac{mx+m\Delta x-mx}{\Delta x}\,&lt;/math&gt;
|-
|
| = &lt;math&gt;\lim_{\Delta x\to 0}\frac{m\Delta x}{\Delta x}&lt;/math&gt;
|-
|
| = &lt;math&gt;m.&lt;/math&gt;
|}

=== Constant multiple and addition rules ===

Since we already know the rules for some very basic functions, we would like to be able to take the derivative of more complex functions by breaking them up into simpler functions. Two tools that let us do this are the constant multiple rule and the addition rule.

====The Constant Rule====
For any fixed real number &lt;math&gt;c&lt;/math&gt;,
&lt;div align=&quot;center&quot; style=&quot;padding: 1em 10em;&quot;&gt;&lt;math&gt;\frac{d}{dx}\left[cf(x)\right] = c \frac{d}{dx}\left[f(x)\right]&lt;/math&gt;&lt;/div&gt;

The reason, of course, is that one can factor &lt;math&gt;c&lt;/math&gt; out of the numerator, and then of the entire limit, in the definition.  The details are left as an [[Calculus/Differentiation/Exercises|exercise]].

'''Example'''

We already know that 

:&lt;math&gt;\frac{d}{dx}\left[x^2\right]=2x&lt;/math&gt;.

Suppose we want to find the derivative of &lt;math&gt;3x^2&lt;/math&gt;

:{|
|-
|&lt;math&gt;\frac{d}{dx}\left[3x^2\right]&lt;/math&gt;
| = &lt;math&gt;3\frac{d}{dx}\left[x^2\right]&lt;/math&gt;
|-
|
| = &lt;math&gt;3\times2x\,&lt;/math&gt;
|-
|
| = &lt;math&gt;6x\,&lt;/math&gt;
|-
|}

Another simple rule for breaking up functions is the addition rule.

====The Addition and Subtraction Rules====
&lt;div align=&quot;center&quot; style=&quot;padding: 1em 10em;&quot;&gt;&lt;math&gt;\frac{d}{dx}\left[f(x)\pm g(x)\right]= \frac{d}{dx}\left[f(x)\right]\pm\frac{d}{dx}\left[g(x)\right]&lt;/math&gt;&lt;/div&gt;

'''Proof'''

From the definition:

&lt;math&gt; \lim_{\Delta x \to 0}\left[\frac{[f(x+\Delta x) \pm g(x + \Delta x)] - [f(x) \pm g(x)]}{\Delta x}\right] &lt;/math&gt;

&lt;math&gt; = \lim_{\Delta x \to 0} 
   \left[\frac{[f(x+\Delta x) - f(x)] \pm [g(x + \Delta x) - g(x)]}{\Delta x}\right] &lt;/math&gt;

&lt;math&gt; = \lim_{\Delta x \to 0} \left[\frac{[f(x+\Delta x) - f(x)]}{\Delta x}\right]
  \pm \lim_{\Delta x \to 0} \left[\frac{[g(x+\Delta x) - g(x)]}{\Delta x}\right] &lt;/math&gt;

By definition then, this last term is &lt;math&gt; \frac{d}{dx} \left[f(x)\right] \pm \frac{d}{dx}\left[g(x)\right] &lt;/math&gt;

'''Example'''

What is the derivative of &lt;math&gt;3x^2+5x&lt;/math&gt;?

:{|
|-
|&lt;math&gt;\frac{d}{dx}\left[3x^2+5x\right]&lt;/math&gt;
| = &lt;math&gt;\frac{d}{dx}\left[3x^2+5x\right]&lt;/math&gt;
|-
|
| = &lt;math&gt;\frac{d}{dx}\left[3x^2\right]+\frac{d}{dx}\left[5x\right]&lt;/math&gt;
|-
|
| = &lt;math&gt;6x+\frac{d}{dx}\left[5x\right]&lt;/math&gt;
|-
|
| = &lt;math&gt;6x+5\,&lt;/math&gt;
|-
|}

The fact that both of these rules work is extremely significant mathematically because it means that differentiation is '''linear'''.  You can take an equation, break it up into terms, figure out the derivative individually and build the answer back up, and nothing
odd will happen.

We now need only one more piece of information before we
can take the derivatives of any polynomial.

===The Power Rule===
&lt;div align=&quot;center&quot; style=&quot;padding: 1em 10em;&quot;&gt;&lt;math&gt;\frac{d}{dx}\left[x^n\right]=nx^{n-1}&lt;/math&gt;&lt;/div&gt;
For example, in the case of &lt;math&gt;x^2&lt;/math&gt; the derivative is &lt;math&gt;2x^1=2x&lt;/math&gt; as was established earlier.  A special case of this rule is that &lt;math&gt;dx/dx=dx^1/dx=1x^0=1&lt;/math&gt;.  

Since polynomials are sums of monomials, using this rule and the addition rule lets you differentiate any polynomial.  A relatively simple proof for this can be derived from the binomial expansion theorem.

This rule also applies to fractional and negative powers.  Therefore

:{|
|-
|&lt;math&gt;\frac{d}{dx}\left[\sqrt x \right]&lt;/math&gt;
| = &lt;math&gt;\frac{d}{dx}\left[ x^{1/2}\right]&lt;/math&gt;
|-
|
| = &lt;math&gt;\frac 1 2 x^{-1/2}&lt;/math&gt;
|-
|
| = &lt;math&gt;\frac 1 {2\sqrt x}&lt;/math&gt;
|}

===Derivatives of polynomials===
With these rules in hand, you can now find the derivative of any polynomial you come across.  Rather than write the general formula, let's go step by step
through the process.

:&lt;math&gt;\frac{d}{dx}\left[6x^5+3x^2+3x+1\right]&lt;/math&gt;

The first thing we can do is to use the addition rule to split the
equation up into terms:

:&lt;math&gt;\frac{d}{dx}\left[6x^5\right]+\frac{d}{dx}\left[3x^2\right]+\frac{d}{dx}\left[3x\right]+\frac{d}{dx}\left[1\right].&lt;/math&gt;

We can immediately use the linear and constant rules to get rid of
some terms:

:&lt;math&gt;\frac{d}{dx}\left[6x^5\right]+\frac{d}{dx}\left[3x^2\right]+3+0.&lt;/math&gt;

Now you may use the constant multiplier rule to move the constants outside the derivatives:

:&lt;math&gt;6\frac{d}{dx}\left[x^5\right]+3\frac{d}{dx}\left[x^2\right]+3.&lt;/math&gt;

Then use the power rule to work with the individual monomials:

:&lt;math&gt;6\left(5x^4\right)+3\left(2x\right)+3.&lt;/math&gt;

And then do some algebra to get the final answer:

:&lt;math&gt;30x^4+6x+3.\,&lt;/math&gt;

These are not the only differentiation rules. There are other, more advanced, differentiation rules, which will be described in a later chapter.

===Exercises===
* Find the derivatives of the following equations:
{{question-answer|question=7. &lt;math&gt; f(x) = 42 &lt;/math&gt;|answer={{noprint|&lt;math&gt;f'(x)=0 &lt;/math&gt;}}}}
{{question-answer|question=8. &lt;math&gt; f(x) = 6x + 10 &lt;/math&gt;|answer={{noprint|&lt;math&gt;f'(x)=6 &lt;/math&gt;}}}}
{{question-answer|question=9. &lt;math&gt; f(x) = 2x^2 + 12x + 3 &lt;/math&gt;|answer={{noprint|&lt;math&gt;f'(x)=4x+12 &lt;/math&gt;}}}}
[[Calculus/Differentiation/Differentiation Defined/Solutions|Solutions]]

{{Calculus/Top Nav|Differentiation/Contents|Product and Quotient Rules}}
{{Calculus/TOC}}</text>
      <sha1>szv2uwvbtnycvhb8kmsp7xlio7jhcc2</sha1>
      <model>wikitext</model>
      <format>text/x-wiki</format>
    </revision>
  </page>
  <page>
    <title>Waves/Fourier Transforms</title>
    <ns>0</ns>
    <id>524</id>
    <revision>
      <id>1224204</id>
      <parentid>977336</parentid>
      <timestamp>2008-07-06T06:30:03Z</timestamp>
      <contributor>
        <username>Dragonflare82</username>
        <id>65268</id>
      </contributor>
      <comment>/* Fourier Transform */</comment>
      <text xml:space="preserve">{{1DWavesTOC}}

== Fourier Transform ==

So far, you've learned how to superimpose a finite number of sinusoidal waves. However, a wave in general can't be expressed as the sum of a finite number of sines and cosines. Fortunately, we have a theorem called Fourier's theorem which basically states that under certain technical assumptions, any function, f(x) is equal to an integral over sines and cosines. In other words,

:&lt;math&gt;f(x)=\int_{-\infty}^{\infty}(c_1(k)\cos(kx)+c_2(k)\sin(kx)) dk&lt;/math&gt;.

Now, if we're given the wave function when t=0, &amp;phi;(x,0) and the velocity of each sine wave as a function of its wave number, v(k), then we can compute &amp;phi;(x,t) for any t by taking the inverse Fourier transform of &amp;phi;(x,0) conducting a phase shift, and then taking the Fourier transform.

Fortunately, the inverse Fourier transform is very similar to the Fourier transform itself.

:&lt;math&gt;c_1(k)=\frac{1}{2\pi}\int_{-\infty}^{\infty} f(x)\cos (kx)\,dx \quad
c_2(k)=\frac{1}{2\pi}\int_{-\infty}^{\infty} f(x) \sin (kx)\,dx &lt;/math&gt;

This tells us that, since waves which are very spread out, like the sine wave, have a narrow range of wave numbers, wave functions whose wave numbers are very spread out will only be significant at a narrow range of positions.

== Fourier Transform Properties ==

{{:Engineering Tables/Fourier Transform Properties}}

== Fourier Transform Pairs ==

{{:Engineering Tables/Fourier Transform Table}}

== further reading ==

* [[Engineering Analysis/Multi-Dimensional Fourier Series]]

----

{{1DWavesTOC}}</text>
      <sha1>6d9bnd92x39tj7rcmckq4lhbrqvylgh</sha1>
      <model>wikitext</model>
      <format>text/x-wiki</format>
    </revision>
  </page>
  <page>
    <title>User:Formulax</title>
    <ns>2</ns>
    <id>525</id>
    <revision>
      <id>152670</id>
      <timestamp>2003-08-09T03:59:40Z</timestamp>
      <contributor>
        <username>Formulax</username>
        <id>8</id>
      </contributor>
      <text xml:space="preserve">*[[w:User:Formulax|English Wikipedia]]
*[[zh:用户:Formulax|Chinese Wikipedia]]</text>
      <sha1>3d8tqtsn1hremamproa8kyrvp1ijxbt</sha1>
      <model>wikitext</model>
      <format>text/x-wiki</format>
    </revision>
  </page>
  <page>
    <title>Organic Chemistry/Introduction to reactions/How to write organic reactions</title>
    <ns>0</ns>
    <id>527</id>
    <revision>
      <id>1584490</id>
      <parentid>1584489</parentid>
      <timestamp>2009-07-29T20:26:50Z</timestamp>
      <contributor>
        <username>Jomegat</username>
        <id>12605</id>
      </contributor>
      <minor />
      <comment>Reverted edits by [[Special:Contributions/188.26.217.58|188.26.217.58]] ([[User talk:188.26.217.58|Talk]]) to last revision by [[User:Mirrorblade|Mirrorblade]]</comment>
      <text xml:space="preserve">&lt;noinclude&gt;
[[Organic chemistry]] &gt; How to write organic reactions

[[Organic Chemistry/Introduction to reactions|&lt;&lt; Introduction to reactions]] | [[Organic Chemistry/Introduction to reactions/Overview of addition, elimination, substitution and rearrangement reactions|Overview of reactions &gt;&gt;]]
----
&lt;/noinclude&gt;

===Writing General Chemistry Reactions===
In organic chemistry, a reaction may be written precisely as it is for general chemistry if only a basic amount of information is needed.  For example, when a haloalkane is turned into an alkene, the reaction may be written:

&lt;blockquote&gt;&lt;code&gt;
CH&lt;sub&gt;3&lt;/sub&gt;CH&lt;sub&gt;2&lt;/sub&gt;CH&lt;sub&gt;2&lt;/sub&gt;Br + H&lt;sub&gt;2&lt;/sub&gt;SO&lt;sub&gt;4&lt;/sub&gt; + H&lt;sub&gt;2&lt;/sub&gt;O --&gt; CH&lt;sub&gt;3&lt;/sub&gt;CHCH&lt;sub&gt;2&lt;/sub&gt; + HBr + H&lt;sub&gt;2&lt;/sub&gt;SO&lt;sub&gt;4&lt;/sub&gt; + H&lt;sub&gt;2&lt;/sub&gt;O
&lt;/code&gt;&lt;/blockquote&gt;

Unfortunately, this method of notation does not tell anyone very much about the reaction, and it takes expertise to know exactly what is going on.  A new student to organic chemistry probably would not notice that the product molecule contains one site of unsaturation due to a double bond between carbon atoms number one and number two.  Because it is so general, this notation is good for general chemistry, but organic chemistry requires more precision.

For most students, common practices in writing organic reactions will be different than used in general chemistry.


===Differences in Organic Chemistry Notation===
Organic chemistry reactions are often '''not''' written as '''balanced''' equations. This is because many organic chemists - who are just as lazy as anyone else - tend to be more interested in the ''organic product'' of a reaction than in anything else going on in the reaction.  Side products are often ignored, and just as often catalysts and solution notation may be highly abbreviated or left out altogether.  As you gain familiarity with organic chemistry you will come to understand just what may be abbreviated or left out, but in the beginning this can be a source of frustration.

Another difference is that modified Lewis drawings of molecules are often used instead of molecular formulas. This makes sense due to the fact that organic molecules are often rather large in size and complicated in structure, so that they can be more easily understood in the form of a drawing as opposed to a word-formula.  A two-dimensional drawing reveals some of the three-dimensional shape of the molecule, but when necessary even three-dimensional drawings are used to depict reactants and products.

&lt;br&gt;
[[image:imaginary_organic_molecule.gif |center| This image depicts the complicated interconnectivity and structure of an imaginary organic molecule]]
&lt;br&gt;

Working with the above drawing of a molecule may be difficult, but it is still far easier than using its name, or attempting to guess at the structure and functionality of a molecule using just its chemical formula of &lt;code&gt;C&lt;sub&gt;29&lt;/sub&gt;H&lt;sub&gt;31&lt;/sub&gt;COOH&lt;/code&gt;.

===Examples of Organic Chemistry Notation===
Typically organic chemistry molecules are drawn as modified Lewis structures.  If you remember, a Lewis structure uses lines to connect chemical symbols together, illustrating a covalent bond, and also uses dots to represent non-bond electrons.  This is shown in the diagram below of carbon dioxide.  The drawing illustrates the four electrons of carbon participating in two double bonds with two oxygen atoms, and also the non-bonding electron pairs for each atom of oxygen.

[[image:Lewis_carbon_dioxide.gif | Lewis Diagram of Carbon Dioxide, Illustrating Double Bonds and Free Electrons]]

In organic chemistry, there are a '''lot''' of carbons in every molecule, generally, so organic chemists by convention do not draw every single carbon in every molecule.  The same is true of hydrogens attached to the carbons; it is twice the annoyance to draw thirty hydrogens in a fatty acid than it is to draw the fifteen carbons.  Therefore, in organic chemistry, carbon atoms are assumed to be wherever a line or line segment begins or ends.  Furthermore, enough hydrogen atoms are assumed to be attached to any carbon not marked with a + or - sign (indicating an ionic charge) to bring that carbon's total number of bonds to four.  At first this notation may be confusing, but the shorthand method rapidly proves its worth.

&lt;br&gt;
[[image:Example_organic_molecules.gif | Some common organic chemistry compounds and reagents, and their drawings]]

&lt;noinclude&gt;
----
[[Organic Chemistry/Alkanes|&lt;&lt; Alkanes]] | [[Organic Chemistry/Introduction to reactions|&lt;&lt; Introduction to reactions]] | How to write organic reactions  | [[Organic Chemistry/Introduction to reactions/Overview of addition, elimination, substitution and rearrangement reactions|Overview of reactions &gt;&gt;]] | [[Organic Chemistry/Introduction to functional groups|Introduction to functional groups &gt;&gt;]]
&lt;/noinclude&gt;

{{BookCat}}</text>
      <sha1>acbi657n1d8f98d2utapsf8nq1xu6wj</sha1>
      <model>wikitext</model>
      <format>text/x-wiki</format>
    </revision>
  </page>
  <page>
    <title>User:LouI/Sandbox</title>
    <ns>2</ns>
    <id>530</id>
    <revision>
      <id>152675</id>
      <parentid>2597</parentid>
      <timestamp>2003-09-08T04:41:52Z</timestamp>
      <contributor>
        <username>LouI</username>
        <id>28</id>
      </contributor>
      <comment>clear pop test</comment>
      <text xml:space="preserve">This is a '''Temporary Test''' page being used from time to time for various experimental work.
----</text>
      <sha1>klmsqh861cize05wetxw4v9qgle6gtm</sha1>
      <model>wikitext</model>
      <format>text/x-wiki</format>
    </revision>
  </page>
  <page>
    <title>Computer Programming</title>
    <ns>0</ns>
    <id>532</id>
    <revision>
      <id>2634534</id>
      <parentid>2585721</parentid>
      <timestamp>2014-04-22T14:37:20Z</timestamp>
      <contributor>
        <ip>117.193.223.137</ip>
      </contributor>
      <comment>placed a comma</comment>
      <text xml:space="preserve">{{merge from|Competitive Programming}}
[[File:Brion vibber developers at wikimania.jpg|350px|right|Three MediaWiki developers programming at Wikimania.]]

'''Computer programming''' is the craft of writing useful, maintainable, and extensible source code which can be interpreted or compiled by a computing system to perform a meaningful task. Programming a computer can be performed in one of numerous languages, ranging from a higher-level language to writing directly in low-level machine code (that is, code that more directly controls the specifics of the computer's hardware) all the way down to writing microcode (which does directly control the electronics in the computer).

Using programming languages and markup languages (such as [[XHTML]] and [[XForms]]) require some of the same skills, but using markup languages is generally not considered &quot;programming.&quot;  Nevertheless, many markup languages allow inclusion of scripts, e.g. many HTML documents contain [[JavaScript]].  There are exceptions where markup languages do represent programming such as SuperX++ (http://xplusplus.sourceforge.net/) and o:XML (http://www.o-xml.org/)

Computer programming is one part of a much larger discipline known as [[w:software engineer|software engineering]], which includes several different aspects of making software including design, construction and quality control. The subject of this book is software construction, that is, programming.  Computer programming is also a useful skill (though not always necessary) for people who are interested in [[subject:computer science|computer science]].  Whereas software engineering is interested specifically in making software, computer science tends to be oriented towards more theoretical or mathematical problems.

== Getting started ==
{{wikiversity|Topic:Computer programming}}
Many people think they must choose a specific programming language in order to become a programmer, believing that they can only do that language. They ask themselves, &quot;Should I be a '''C''' programmer or a '''Java''' programmer?&quot; That's completely the wrong question. The right question is &quot;How can I become a '''good''' programmer?&quot; Unfortunately the employment market has contributed greatly to misconceptions about computer programming by companies advertising for employees with a specific (therefore limited) computer language skill-set and responses being handled by human resources(HR), without someone with a programming background.

There are a few points one can make about what a good programmer knows about specific computer languages.  First - many languages are based on the same fundamental building blocks.  Learning a language should be seen more as a way of acquiring those concepts than language or machine specific techniques.  Second - good programmers are generally competent in more than one language because it is naturally interesting and useful to find different ways of solving problems.  It is not necessary to master many different languages or even more than one -- a programmer could excel in one language and have only a vague working idea how to program others. It is useful to know many different methods for solving computer problems, also known as algorithms. An [[w:algorithm|algorithm]] is a list of well-defined instructions for completing a task, and knowing several languages means having the ability to list the computer instructions in many different ways.  Since computer programming languages have so much in common, it is generally easy to learn a new programming language once you have mastered another.

So how do you get started?  One reasonable technique would be to just pick a language and run with it.  Unfortunately, we cannot suggest what the right computer language might be for all people for all purposes.  Ask ten programmers what language you should learn and you will get ten different responses.  Given the collaborative nature of this wikibook, you'll probably get as many responses as there are programming language books on the site.

== Families of languages ==
There is a common misconception by people unfamiliar with computer programming that all programming languages are essentially the same.  In one sense this is true because all digital electronic computers translate programming languages into strings of ones and zeros called binary, or [[w:Machine code|Machine code]].

While mainstream, personal computer languages tend to be derived from a specific tradition and are very similar (hence the popularity of this misconception), some languages fall into different paradigms which provide for a radically different programming experience.  Programming in [[Java Programming|Java]] is quite different from programming in [[Subject:Assembly languages|assembly language]], which is quite different from programming in [[Haskell]] or [[Prolog]] or Forth, etc.

In the American Scientist article [http://www.americanscientist.org/template/AssetDetail/assetid/51982#52116 The Semicolon Wars], Brian Hayes classifies languages into four categories: imperative, object-oriented, functional, and declarative.  Imperative and object-oriented languages tend to be used in the mainstream, whereas functional and declarative languages tend to be used in academic settings.  Functional and declarative programming enthusiasts might argue that the paradigms are 20 years ahead of the mainstream and superior in many respects; however, mainstream language advocates would probably counter that such paradigms are hard to learn, or not very practical for their own unpopularity, among other things.  We do not make any claims about who is right on this matter, but at the very least, we will suggest that building familiarity with the four major paradigms is an extremely valuable exercise.

[[File:Subtext constest.jpg|600px|right|Computer language Java]]
* [[/Functional programming/]]
* [[/Imperative programming/]]
** (see also [[Programming Languages/Procedural Languages|Procedural programming]] {{stage|00%|21. Apr 2007}})
* [[Object Oriented Programming|Object oriented programming]] {{stage|00%|16. Dec 2005}}

When it comes to computers, all things are made, and function primarily by, programming. Although programming is an essential part of the functionality of any computer or application, not all programming languages are the same. In fact, they are very different from one another with different uses, functionality, and different levels of complexity. A programming language, in the most basic way, is a set of rules or guidelines that is used to write the computer programs. Even though you are writing the program, you may need a certain type of software or program for the language that you use. There are many different types of programming languages that can be used and each has a different set of rules. Programming has two basic categories. There are low-level and high-level languages, the difference between the two is that low-level languages often use 0s and 1s, and this works because it gives the computer the ability to quickly understand what needs to be done or executed. High level languages are easier to write because they are much closer to the English language and are much more flexible to write with, although there are also different levels of this readability as well and different categories of these languages that can be written.  A few examples would be Visual Basic, C++, and Java.

== Common concepts ==
Programming languages tend to have many general concepts in common.  One can examine the recurring concepts and how they are expressed in various languages in the following table.

{{:Computer Programming/Language concepts}}  

To see a comparison of syntax in various programming languages, see [[Computer Programming/Hello world|these &quot;Hello World&quot; examples]].  For a list including various computer languages arranged together by syntax terms and patterns, see [[Wikipedia:Lists of computer syntax patterns|Wikipedia's lists of computer syntax patterns]].

== Programming skills ==
Computer programming is really just about solving problems.  It turns out that a large number of the problems you encounter in the real world are really just special cases of a more general problem.  Luckily for you, many of these problems have been studied by computer scientists for a very long time, sometimes leading to probably unbeatable solutions, or sometimes solutions which are &quot;good enough&quot; for every day needs.  In short, learning a language gives you skills, but learning data structures and algorithms shows you how to use these skills wisely.

=== Data Structures and algorithms ===
* [[Data Structures]]
* [[Algorithms]]
* [[Advanced Data Structures and Algorithms]]

=== Language-related skills ===
* [[/Agent Oriented Programming/]] {{stage|25%|16. Dec 2005}}
* [[/Ars based programming/]]
* [[/Aspect oriented programming/]]
* [[/Component based software development/]]
* [[Programming Languages/Concurrent Languages|Concurrent programming]]
* [[/Constraint-based programming/]] 
* [[/Design by Contract/]]
* [[/Distributed programming/]]
* [[Embedded Systems|Embedded programming]]
* [[/Event driven programming/]]
* [[/Generic programming/]]
* [[/Post object programming/]]
* [[/Relational programming/]]
* [[/Symbolic programming/]]
* [[/System Programming/]]

=== Programming for applications ===
* [[/Application development/]]
* [[Artificial Intelligence]]
* [[/Database Programming|Databases]]
* [[/Drivers/]]
* [[/Games/]]
* [[/Networks|Internet &amp; Networking]]
* [[/Multimedia/]]
* [[/Operating system creation/]]
* [[/Physics/]]

=== Programming for platforms ===
* [[/OS Programming/]]
** [[/DOS Programming|DOS]]
** [[/Linux Programming|Linux]]
** [[/MacOS Programming|MacOS]]
** [[Windows Programming|Windows]]
** [[/CL (Control Language|IBM Midrange Systems]]
** [[/JCL (Job Control Language|IBM Main Frame Systems]]
** [[/AROS Programming|AROS]]

== History of programming ==

=== General trends ===
* [[/Procedural programming/]] vs [[/Declarative programming/]]
* [[/Structured programming/]] (as opposed to unstructured programming)

=== Specific languages ===
The following languages deserve special mention, being significant languages in the development of structured programming languages and object-oriented programming. They are worth understanding for the concepts they introduced.

; [[w:ALGOL|ALGOL]] : was the first structured programming language and as such is the basis for all modern imperative languages. It was built around the notion of a block, delimited by BEGIN and END containing declarations and statements. ALGOL is a recursive general-purpose language, including recursive calls at a time when this was thought too difficult in languages like FORTRAN and COBOL. ALGOL is a stack language, so as blocks are entered, the declared variables are pushed on the stack and when a block exits, the stack is reduced. A block without declarations is not actually a block, but a compound statement, causing no stack building overhead. ALGOL was first developed as [[w:ALGOL 58|ALGOL 58]], based on the formal [[w: Backus-Naur Form|BNF (Backus-Naur Form)]] language design notation. ALGOL-60 was a revision and this formed the basis of many other languages such as [[w:ALGOL 68|ALGOL-68]], [[w:ALGOL W|ALGOL-W]], Pascal, [[w:Modula-2|Modula-2]], [[w:Oberon programming language|Oberon]], C, C++, Java, Simula, Ada, and Eiffel. ALGOL-60 was the first language used for systems programming in the [[w:Burroughs B5000|Burroughs B5000]] stack machines operating system in the early 1960s (when all else was programmed in assembler and where ALGOL is still used in 2006 [http://public.support.unisys.com/aseries/docs/ClearPath-MCP-10.1/PDF/86000098-506.pdf Current ALGOL manual] ). Learning ALGOL will teach you the basis of block-structured languages and structured programming concepts.

; [[w:Simula|Simula]] : was the first object-oriented language developed in 1967 using ALGOL-60 as a basis (much as C++ used C). It was originally conceived as a simulation language (hence the name) to model real world systems. As ALGOL had been a block-structured language with blocks entered on the stack as they were called and deleted from the stack when exited, Simula liberated programs from this restriction. Thus a block could be entered but when the code exited, the block persisted on the heap, rather than on the stack – thus the object was born. However, unlike records and structures (structs) of other languages, procedures were associated with this saved block so a programmer could define an entire algebra to manipulate entities. Thus variables declared as part of the outer block (class) persisted beyond the original invocation of the block code (which would now be considered a constructor or creation routine). Local variables and arguments to the procedures in the class would be pushed on the stack when called and popped when exited, but would manipulate the object’s persistent state. Class facilities could be abstracted by use of inheritance. Simula also included a sophisticated concurrency paradigm. Learning Simula will teach you object-oriented and simulation concepts along with concurrency concepts and the use of coroutines and cooperating processes.

; [[Smalltalk]] : was developed by [[w:Adele Goldberg (computer scientist)|Adele Goldberg]], [[w:Alan Kay|Alan Kay]] (the real inventor of Windows) and others at Xerox PARC. It is an object-oriented language with a natural language syntax. It is a typeless language and thus very flexible and dynamic, resulting in quick turn around of code, but can result in exceptions at run time that would have been caught at compile time by a typed language. Its concepts were the basis of Objective-C. Learning Smalltalk will teach you object-oriented programming in a typeless language with a very different syntax.

&lt;!-- If you add or correct any information on this next block please check also C++ Programming/Programming Languages/Introducing C++, thanks --&gt;
; [[Subject:C++ programming language|C++]] : '''C++''' (pronounced &quot;see plus plus&quot;) is a general-purpose, object-oriented, statically typed, free-form, multi-paradigm programming language supporting procedural programming, data abstraction, and generic programming. During the 1990s, C++ became one of the most popular [[w:computer programming languages|computer programming languages]].
:[[w:Bjarne Stroustrup|Bjarne Stroustrup]] from Bell Labs was the designer and original implementer of C++ (originally named &quot;C with Classes&quot;) during the 1980s as an enhancement to the [[C  programming language]]. Enhancements started with the addition of [[C++ Programming/Classes|classes]], followed by, among many features, [[C++ Programming/Programming Languages/Paradigms/Polymorphism|virtual functions]], [[C++ Programming/Operators/Operator Overloading|operator overloading]], [[C++ Programming/Programming Languages/Paradigms/Inheritance|multiple inheritance]], [[C++ Programming/Templates|templates]], and [[C++ Programming/Exception Handling|exception handling]], these and other features are covered in detail in several Wikibooks on the subject.
:The C++ programming language standard was ratified in 1998 as ''[[w:ISO/IEC 14882|ISO/IEC 14882]]:1998'', the current version of which is the 2003 version, ''ISO/IEC 14882:2003''.
:The 1998 C++ Standard consists of two parts: the Core Language and the Standard Library; the latter includes the [[C++ Programming/STL|Standard Template Library]] and C's Standard Library. Many C++ libraries exist which are not part of the Standard, such as [[w:Boost (programming)|Boost]]. Also, non-Standard libraries written in C can generally be used by C++ programs.
:Features introduced in C++ include declarations as statements, function-like casts, &lt;tt&gt;new&lt;/tt&gt;/&lt;tt&gt;delete&lt;/tt&gt;, &lt;tt&gt;bool&lt;/tt&gt;, reference types, &lt;tt&gt;const&lt;/tt&gt;, &lt;tt&gt;inline&lt;/tt&gt; functions, default arguments, function overloading, namespaces, classes (including all class-related features such as inheritance, member functions, virtual functions, abstract classes, and constructors), operator overloading, templates, the &lt;tt&gt;::&lt;/tt&gt; operator, exception handling, run-time type identification, and more type checking in several cases. Comments starting with two slashes (&quot;&lt;tt&gt;//&lt;/tt&gt;&quot;) were originally part of [[w:BCPL|BCPL]], and was reintroduced in C++. Several features of C++ were later adopted by C, including &lt;tt&gt;const&lt;/tt&gt;, &lt;tt&gt;inline&lt;/tt&gt;, declarations in &lt;tt&gt;for&lt;/tt&gt; loops, and C++-style comments (using the &lt;tt&gt;//&lt;/tt&gt; symbol).
&lt;!-- If you add or correct any information on this next block please check also C++ Programming/Programming Languages/Introducing C++, thanks --&gt;

; [[Visual Basic]] : Visual Basic (VB) is one of the worlds most commonly used programing languages. This is because of its simplicity and ease of use. One of the most basic functions of VB is the message box command. If I wanted to make a message box appear with a chosen message, all i would have to type would be: msgbox &quot;hello word&quot;

; [[Subject:Java programming language|Java]] : [[Computer Programming/J2ME|Java 2 Micro Edition]]

== Additional Information ==

=== Editors ===
It is said that a programmer's best friend is the editor. A good editor is lightweight, has only essential tools and should support syntax highlighting for your language. 

Examples of good editors for which we have teaching books are &lt;small&gt;(alphabetically)&lt;/small&gt;:

; [[Learning the vi Editor/Vim|Vim]] {{stage|100%|Feb 7, 2005}}: An abbreviation of &lt;b&gt;Vi&lt;/b&gt; I&lt;b&gt;m&lt;/b&gt;proved, this editor is modelled on the classic Unix editor vi. However, Vim is a much more modern editor with an optional graphical interface and quite a few features vi doesn't have, making it the editor of choice for someone experienced with vi.

For more text editors, see Wikipedia's [[Wikipedia:Category:Text_editors|text editor category]].

=== Tools ===
* [[GNU Compiler Collection|gcc]], a free compiler collection &lt;small&gt;(Ada, C, C++, Fortran, Java, Objective-C, Objective-C++)&lt;/small&gt;.
* [[make]], the most popular build scripting language.
* [[Apache Ant]], an XML-based build scripting language similar to Make.
* Some people use an integrated development environment (IDE) while programming.
** [[Eclipse]], a software framework used as an IDE for Java, C++, PHP, Python, and a few other languages.
** [[Wikipedia:Comparison of integrated development environments]] lists an IDE for every popular programming language.
* Some people use a version control system. Such systems make it much easier to answer &quot;Last week's version worked. This week's version doesn't. What changed?&quot;.
** [[Subversion]]
** [[Source Control Management With Git]]

=== Popular libraries ===
Unix native
* [[Cocoa Programming|Cocoa/OPENSTEP framework]]
* [[FreeType Library|FreeType2]]
* [[IJG JPEG Library]]
* [[X Window Programming/OpenGL|Mesa3D]]
* [[Gtk|GTK+]]
* [[PNG Library|LibPng]]

Windows &quot;native&quot;
* [[Windows Programming/DirectX|DirectX]]
* [[Windows Programming/Managed_DirectX|Managed DirectX]]

Cross platform
* [[Allegro Programming|Allegro]]
* [[wxWidgets|wxWidgets]]
* [[OpenGL|OpenGL]]
* [[w:Qt|Qt]] - Popular object oriented C++ GUI framework. [[w:KDE|KDE]] is based on it. Bindings for various languages are available.
* [[w:XUL|XUL]] XML based GUI.
* [[w:Simple DirectMedia Layer|Simple DirectMedia Layer]] (SDL)

=== Format Reference ===
* [[/PTF|Poor Text Format]]

== Misc ==
*[[/Coding Style/]]
*[[Computer Programming Principles/Maintaining/Debugging|Debugging]]
*[[C Programming/Networking in UNIX|C Networking in UNIX]]
*[http://www.landofcode.com/programming-intro/ An introduction to computer programming]
*[http://www.fortisestveritas.net A beginners' programming forum]
*[http://www.helloworldexample.net Hello World Example] Hello World Program Examples in Many Programming Language

=== Bibliography ===
* [http://www.htdp.org How to Design Programs]
* [http://mitpress.mit.edu/sicp/ Structure and Interpretation of Computer Programs] ([http://swiss.csail.mit.edu/classes/6.001/abelson-sussman-lectures/ Videos])
* [[Wikisource: How to Think Like a Computer Scientist]] and its translation into Python, [[Think Python]]
* [http://www.swebok.org Software Engineering Body of Knowledge (SWEBOK)]

----
* [[/Authors|Authors]]
* [[/Tools|Authoring Tools]]

{{subjects|computer programming}}
{{alphabetical|C}}
{{status|25%}}

[[ar:البرمجة]]
[[es:Fundamentos de programación]]
[[fr:Programmation]]
[[gl:Introdución á programación]]
[[ja:プログラミング]]
[[pt:Introdução à programação/Prefácio]]</text>
      <sha1>9hg8yfg7kutsnlgcecgti398k73hngk</sha1>
      <model>wikitext</model>
      <format>text/x-wiki</format>
    </revision>
  </page>
  <page>
    <title>C Programming/Variables</title>
    <ns>0</ns>
    <id>543</id>
    <revision>
      <id>2673737</id>
      <parentid>2650189</parentid>
      <timestamp>2014-06-15T19:56:31Z</timestamp>
      <contributor>
        <username>JackPotte</username>
        <id>99248</id>
      </contributor>
      <minor />
      <text xml:space="preserve">{{C Programming/Navigation|Structure and style|Simple Input and Output}}

Like most programming languages, C is able to use and process named variables and their contents. '''Variables''' are simply names used to refer to some location in memory – a location that holds a value with which we are working. 

It may help to think of variables as a placeholder for a value. You can think of a variable as being equivalent to its assigned value. So, if you have a variable ''i'' that is '''initialized''' (set equal) to 4, then it follows that ''i+1'' will equal ''5''.

Since C is a relatively low-level programming language, before a C program can utilize memory to store a variable it must claim the memory needed to store the values for a variable. This is done by '''declaring''' variables. Declaring variables is the way in which a C program shows the number of variables it needs, what they are going to be named, and how much memory they will need.

Within the C programming language, when managing and working with variables, it is important to know the ''type'' of variables and the ''size'' of these types. Since C is a fairly low-level programming language, these aspects of its working can be hardware specific – that is, how the language is made to work on one type of machine can be different from how it is made to work on another.

All variables in C are '''typed'''. That is, every variable declared must be assigned as a certain type of variable.

== Declaring, Initializing, and Assigning Variables ==
Here is an example of declaring an integer, which we've called &lt;tt&gt;some_number&lt;/tt&gt;. (Note the semicolon at the end of the line; that is how your compiler separates one program ''statement'' from another.)

&lt;source lang=c&gt;
int some_number;
&lt;/source&gt;

This statement means we're declaring some space for a variable called some_number, which will be used to store &lt;tt&gt;int&lt;/tt&gt;eger data. Note that we must specify the type of data that a variable will store. There are specific keywords to do this – we'll look at them in the next section.

Multiple variables can be declared with one statement, like this:
&lt;source lang=c&gt;
int anumber, anothernumber, yetanothernumber;
&lt;/source&gt;
We can also declare ''and'' assign some content to a variable at the same time.
&lt;source lang=c&gt;
int some_number=3;
&lt;/source&gt;
This is called ''initialization''.

In early versions of C, variables had to be declared at the beginning of a block. In C99 it is allowed to mix declarations and statements arbitrarily – but doing so is not usual, because it is rarely necessary, some compilers still don’t support C99 (portability), and it may, because it is uncommon yet, irritate fellow programmers (maintainability).

After declaring variables, you can assign a value to a variable later on using a statement like this:
&lt;source lang=c&gt;
some_number=3;
&lt;/source&gt;
You can also assign a variable the value of another variable, like so:
&lt;source lang=c&gt;  
anumber = anothernumber;
&lt;/source&gt;
Or assign multiple variables the same value with one statement:
&lt;source lang=c&gt;
anumber = anothernumber = yetanothernumber = 3;
&lt;/source&gt;
This is because the assignment &lt;tt&gt;x = y&lt;/tt&gt; returns the value of the assignment. &lt;tt&gt;x = y = z &lt;/tt&gt; is really shorthand for &lt;tt&gt;x = (y = z)&lt;/tt&gt;.

===Naming Variables===
Variable names in C are made up of letters (upper and lower case) and digits. The underscore character (&quot;_&quot;) is also permitted. Names must not begin with a digit. Unlike some languages (such as [[w:Perl|Perl]] and some [[w:BASIC programming language|BASIC]] dialects), C does not use any special prefix characters on variable names.

Some examples of valid (but not very descriptive) C variable names:
&lt;source lang=c&gt;
foo
Bar
BAZ
foo_bar
_foo42
_
QuUx
&lt;/source&gt;
Some examples of invalid C variable names:
&lt;source lang=c&gt;
2foo    (must not begin with a digit)
my foo  (spaces not allowed in names)
$foo    ($ not allowed -- only letters, digits, and _)
while   (language keywords cannot be used as names)
&lt;/source&gt;
As the last example suggests, certain words are reserved as keywords in the language, and these cannot be used as variable names.

In addition there are certain sets of names that, while not language keywords, are reserved for one reason or another. For example, a C compiler might use certain names &quot;behind the scenes&quot;, and this might cause problems for a program that attempts to use them. Also, some names are reserved for possible future use in the C standard library. The rules for determining exactly what names are reserved (and in what contexts they are reserved) are too complicated to describe here{{fact}}, and as a beginner you don't need to worry about them much anyway. For now, just avoid using names that begin with an underscore character.

The naming rules for C variables also apply to naming other language constructs such as function names, struct tags, and macros, all of which will be covered later.

== Literals ==

Anytime within a program in which you specify a value explicitly instead of referring to a variable or some other form of data, that value is referred to as a '''literal'''. In the initialization example above, 3 is a literal. Literals can either take a form defined by their type (more on that soon), or one can use hexadecimal (hex) notation to directly insert data into a variable regardless of its type.{{fact}} Hex numbers are always preceded with ''0x''. For now, though, you probably shouldn't be too concerned with hex.

== The Four Basic Data Types ==

In Standard C there are four basic data types. They are &lt;code&gt;'''int'''&lt;/code&gt;, &lt;code&gt;'''char'''&lt;/code&gt;, &lt;code&gt;'''float'''&lt;/code&gt;, and &lt;code&gt;'''double'''&lt;/code&gt;.

We will briefly describe them here, then go into more detail in [[C Programming/Types]].

===The &lt;code&gt;int&lt;/code&gt; type===
The &lt;tt&gt;int&lt;/tt&gt; type stores integers in the form of &quot;whole numbers&quot;. An integer is typically the size of one machine word, which on most modern home PCs is 32 bits (4 octets). Examples of literals are whole numbers (integers) such as 1,2,3, 10, 100... When &lt;tt&gt;int&lt;/tt&gt; is 32 bits (4 octets), it can store any whole number (integer) between -2147483648 and 2147483647. A 32 bit word (number) has the possibility of representing any one number out of 4294967296 possibilities (2 to the power of 32).

&lt;!-- overflows --&gt;

If you want to declare a new int variable, use the &lt;tt&gt;int&lt;/tt&gt; keyword. For example:

&lt;source lang=c&gt;
int numberOfStudents, i, j=5;
&lt;/source&gt;

In this declaration we declare 3 variables, numberOfStudents, i and j, j here is assigned the literal 5.

===The &lt;code&gt;char&lt;/code&gt; type===
The &lt;code&gt;char&lt;/code&gt; type is capable of holding any member of the execution character set. It stores the same kind of data as an &lt;code&gt;int&lt;/code&gt; (i.e. integers), but typically has a size of one byte. The size of a byte is specified by the macro &lt;code&gt;CHAR_BIT&lt;/code&gt; which specifies the number of bits in a char (byte). In standard C it never can be less than 8 bits. A variable of type &lt;code&gt;char&lt;/code&gt; is most often used to store character data, hence its name. Most implementations use the [[w:ASCII|ASCII]] character set as the execution character set, but it's best not to know or care about that unless the actual values are important.

Examples of character literals are 'a', 'b', '1', etc., as well as some special characters such as '&lt;code&gt;\0&lt;/code&gt;' (the null character) and '&lt;code&gt;\n&lt;/code&gt;' (newline, recall &quot;Hello, World&quot;). Note that the &lt;code&gt;char&lt;/code&gt; value must be enclosed within single quotations.

When we initialize a character variable, we can do it two ways. One is preferred, the other way is '''''bad''''' programming practice.

The first way is to write
&lt;source lang=c&gt;
char letter1 = 'a';
&lt;/source&gt;

This is ''good'' programming practice in that it allows a person reading your code to understand that letter1 is being initialized with the letter 'a' to start off with.

The second way, which should ''not'' be used when you are coding letter characters, is to write
&lt;source lang=c&gt;
char letter2 = 97; /* in ASCII, 97 = 'a' */
&lt;/source&gt;

This is considered by some to be extremely '''''bad''''' practice, if we are using it to store a character, not a small number, in that if someone reads your code, most readers are forced to look up what character corresponds with the number 97 in the encoding scheme. In the end, &lt;code&gt;letter1&lt;/code&gt; and &lt;code&gt;letter2&lt;/code&gt; store both the same thing – the letter 'a', but the first method is clearer, easier to debug, and much more straightforward. 

One important thing to mention is that characters for numerals are represented differently from their corresponding number, i.e. '1' is not equal to 1. In short, any single entry that is enclosed within 'single quotes'.

There is one more kind of literal that needs to be explained in connection with chars: the '''string literal'''. A string is a series of characters, usually intended to be displayed. They are surrounded by double quotations (&quot; &quot;, not ' '). An example of a string literal is the &quot;Hello, World!\n&quot; in the &quot;Hello, World&quot; example.

The string literal is assigned to a character &lt;b&gt;array&lt;/b&gt;, arrays are described later. 
Example:
&lt;source lang=c&gt;
const char MY_CONSTANT_PEDANTIC_ITCH[] = &quot;learn the usage context.\n&quot;;
printf(&quot;Square brackets after a variable name means it is a pointer to a string of memory blocks the size of the type of the array element.\n&quot;);

&lt;/source&gt;

=== The &lt;code&gt;float&lt;/code&gt; type === 
&lt;code&gt;float&lt;/code&gt; is short for '''floating point'''. It stores real numbers also, but is only one machine word in size. Therefore, it is used when less precision than a double provides is required. &lt;code&gt;float&lt;/code&gt; literals must be suffixed with F or f, otherwise they will be interpreted as doubles. Examples are: 3.1415926f, 4.0f, 6.022e+23f. &lt;code&gt;float&lt;/code&gt; variables can be declared using the &lt;tt&gt;float&lt;/tt&gt; keyword.

===The &lt;tt&gt;double&lt;/tt&gt; type===
The &lt;tt&gt;double&lt;/tt&gt; and &lt;tt&gt;float&lt;/tt&gt; types are very similar. The &lt;tt&gt;float&lt;/tt&gt; type allows you to store single-precision floating point numbers, while the &lt;tt&gt;double&lt;/tt&gt; keyword allows you to store double-precision floating point numbers – real numbers, in other words, both integer and non-integer values. Its size is typically two machine words, or 8 bytes on most machines. Examples of &lt;tt&gt;double&lt;/tt&gt; literals are 3.1415926535897932, 4.0, 6.022e+23 ([[w:Scientific notation|scientific notation]]). If you use 4 instead of 4.0, the 4 will be interpreted as an &lt;tt&gt;int&lt;/tt&gt;.

The distinction between floats and doubles was made because of the differing sizes of the two types. When C was first used, space was at a minimum and so the judicious use of a float instead of a double saved some memory. Nowadays, with memory more freely available, you do not really need to conserve memory like this – it may be better to use doubles consistently. Indeed, some C implementations use doubles instead of floats when you declare a float variable.

If you want to use a double variable, use the &lt;tt&gt;double&lt;/tt&gt; keyword.

== &lt;tt&gt;sizeof&lt;/tt&gt; ==
If you have any doubts as to the amount of memory actually used by any variable (and this goes for types we'll discuss later, also), you can use the &lt;tt&gt;'''sizeof'''&lt;/tt&gt; operator to find out for sure. (For completeness, it is important to mention that &lt;tt&gt;sizeof&lt;/tt&gt; is a [[w:Unary operation|unary operator]], not a function.) Its syntax is:

&lt;!-- Note: sizeof really needs the parentheses only when the argument is a type, see ISO 9899:2011 6.5.3.4/2 ``The sizeof operator yields the size (in bytes) of its operand, which may be an expression or the parenthesized name of a type.'' --&gt;
&lt;source lang=c&gt;
sizeof object
sizeof(type)
&lt;/source&gt;

The two expressions above return the size of the object and type specified, in bytes. The return type is &lt;tt&gt;size_t&lt;/tt&gt; (defined in the header &lt;tt&gt;&amp;lt;stddef.h&amp;gt;&lt;/tt&gt;) which is an unsigned value. Here's an example usage:

&lt;source lang=c&gt;
size_t size;
int i;
size = sizeof(i);
&lt;/source&gt;

&lt;tt&gt;size&lt;/tt&gt; will be set to 4, assuming &lt;tt&gt;CHAR_BIT&lt;/tt&gt; is defined as 8, and an integer is 32 bits wide. The value of &lt;tt&gt;sizeof&lt;/tt&gt;'s result is the number of bytes.

Note that when &lt;tt&gt;sizeof&lt;/tt&gt; is applied to a &lt;tt&gt;char&lt;/tt&gt;, the result is 1; that is:

&lt;source lang=c&gt;
sizeof(char)
&lt;/source&gt;

always returns 1.

== Data type modifiers ==

One can alter the data storage of any data type by preceding it with certain modifiers.

&lt;tt&gt;'''long'''&lt;/tt&gt; and &lt;tt&gt;'''short'''&lt;/tt&gt; are modifiers that make it possible for a data type to use either more or less memory. The &lt;tt&gt;int&lt;/tt&gt; keyword need not follow the &lt;tt&gt;short&lt;/tt&gt; and &lt;tt&gt;long&lt;/tt&gt; keywords. This is most commonly the case. A &lt;tt&gt;short&lt;/tt&gt; can be used where the values fall within a lesser range than that of an &lt;tt&gt;int&lt;/tt&gt;, typically -32768 to 32767.  A &lt;tt&gt;long&lt;/tt&gt; can be used to contain an extended range of values. It is not guaranteed that a &lt;tt&gt;short&lt;/tt&gt; uses less memory than an &lt;tt&gt;int&lt;/tt&gt;, nor is it guaranteed that a &lt;tt&gt;long&lt;/tt&gt; takes up more memory than an &lt;tt&gt;int&lt;/tt&gt;. It is only guaranteed that sizeof(short) &lt;= sizeof(int) &lt;= sizeof(long).  Typically a &lt;tt&gt;short&lt;/tt&gt; is 2 bytes, an &lt;tt&gt;int&lt;/tt&gt; is 4 bytes, and a &lt;tt&gt;long&lt;/tt&gt; either 4 or 8 bytes. Modern C compilers also provide &lt;tt&gt;long long&lt;tt&gt; which is typically an 8 byte integer.   

In all of the types described above, one bit is used to indicate the sign (positive or negative) of a value. If you decide that a variable will never hold a negative value, you may use the &lt;tt&gt;'''unsigned'''&lt;/tt&gt; modifier to use that one bit for storing other data, effectively doubling the range of values while mandating that those values be positive. The &lt;tt&gt;unsigned&lt;/tt&gt; specifier also may be used without a trailing &lt;tt&gt;int&lt;/tt&gt;, in which case the size defaults to that of an &lt;tt&gt;int&lt;/tt&gt;. There is also a &lt;tt&gt;'''signed'''&lt;/tt&gt; modifier which is the opposite, but it is not necessary, except for certain uses of &lt;tt&gt;char&lt;/tt&gt;, and seldom used since all types (except &lt;tt&gt;char&lt;/tt&gt;) are signed by default.

To use a modifier, just declare a variable with the data type and relevant modifiers:
&lt;source lang=c&gt;
unsigned short int usi;  /* fully qualified -- unsigned short int */
short si;                /* short int */
unsigned long uli;       /* unsigned long int */
&lt;/source&gt;

== &lt;tt&gt;const&lt;/tt&gt; qualifier ==

When the &lt;tt&gt;'''const'''&lt;/tt&gt; qualifier is used, the declared variable must be initialized at declaration. It is then not allowed to be changed.

While the idea of a variable that never changes may not seem useful, there are good reasons to use &lt;tt&gt;const&lt;/tt&gt;. For one thing, many compilers can perform some small optimizations on data when it knows that data will never change. For example, if you need the value of &amp;pi; in your calculations, you can declare a const variable of &lt;tt&gt;pi&lt;/tt&gt;, so a program or another function written by someone else cannot change the value of &lt;tt&gt;pi&lt;/tt&gt;.

Note that a Standard conforming compiler must issue a warning if an attempt is made to change a &lt;tt&gt;const&lt;/tt&gt; variable - but after doing so the compiler is free to ignore the &lt;tt&gt;const&lt;/tt&gt; qualifier.

== Magic numbers ==
When you write C programs, you may be tempted to write code that will depend on certain numbers. For example, you may be writing a program for a grocery store. This complex program has thousands upon thousands of lines of code. The programmer decides to represent the cost of a can of corn, currently 99 cents, as a literal throughout the code. Now, assume the cost of a can of corn changes to 89 cents. The programmer must now go in and manually change each entry of 99 cents to 89. While this is not that big of a problem, considering the &quot;global find-replace&quot; function of many text editors, consider another problem: the cost of a can of green beans is also initially 99 cents. To reliably change the price, you have to look at every occurrence of the number 99.

C possesses certain functionality to avoid this. This functionality is approximately equivalent, though one method can be useful in one circumstance, over another.

=== Using the &lt;tt&gt;const&lt;/tt&gt; keyword ===
The &lt;tt&gt;const&lt;/tt&gt; keyword helps eradicate '''magic numbers'''. By declaring a variable &lt;tt&gt;const corn&lt;/tt&gt; at the beginning of a block, a programmer can simply change that const and not have to worry about setting the value elsewhere.

There is also another method for avoiding magic numbers. It is much more flexible than &lt;tt&gt;const&lt;/tt&gt;, and also much more problematic in many ways. It also involves the preprocessor, as opposed to the compiler. Behold...

=== &lt;tt&gt;#define&lt;/tt&gt; ===
When you write programs, you can create what is known as a ''macro'', so when the computer is reading your code, it will replace all instances of a word with the specified expression.

Here's an example. If you write
&lt;source lang=c&gt;
#define PRICE_OF_CORN 0.99
&lt;/source&gt;
when you want to, for example, print the price of corn, you use the word &lt;code&gt;PRICE_OF_CORN&lt;/code&gt; instead of the number 0.99 – the preprocessor will replace all instances of &lt;code&gt;PRICE_OF_CORN&lt;/code&gt; with 0.99, which the compiler will interpret as the literal &lt;code&gt;double&lt;/code&gt; 0.99. The preprocessor performs substitution, that is, &lt;code&gt;PRICE_OF_CORN&lt;/code&gt; is replaced by 0.99 so this means there is no need for a semicolon.

It is important to note that &lt;code&gt;#define&lt;/code&gt; has basically the same functionality as the &quot;find-and-replace&quot; function in a lot of text editors/word processors. 

For some purposes, &lt;code&gt;#define&lt;/code&gt; can be harmfully used, and it is usually preferable to use &lt;code&gt;const&lt;/code&gt; if &lt;code&gt;#define&lt;/code&gt; is unnecessary. It is possible, for instance, to &lt;code&gt;#define&lt;/code&gt;, say, a macro &lt;code&gt;DOG&lt;/code&gt; as the number 3, but if you try to print the macro, thinking that &lt;code&gt;DOG&lt;/code&gt; represents a string that you can show on the screen, the program will have an error. &lt;code&gt;#define&lt;/code&gt; also has no regard for type. It disregards the structure of your program, replacing the text ''everywhere'' (in effect, disregarding scope), which could be advantageous in some circumstances, but can be the source of problematic bugs.

You will see further instances of the &lt;code&gt;#define&lt;/code&gt; directive later in the text. It is good convention to write &lt;code&gt;#define&lt;/code&gt;d words in all capitals, so a programmer will know that this is not a variable that you have declared but a &lt;code&gt;#define&lt;/code&gt;d macro.
It is not necessary to end a preprocessor directive such as &lt;code&gt;#define&lt;/code&gt; with a semicolon; in fact, some compilers may warn you about unnecessary tokens in your code if you do.
&lt;!-- Mention enum for constant defining! --&gt;

== Scope ==

In the Basic Concepts section, the concept of scope was introduced. It is important to revisit the distinction between local types and global types, and how to declare variables of each. To declare a local variable, you place the declaration at the beginning (i.e. before any non-declarative statements) of the block to which the variable is intended to be local. To declare a global variable, declare the variable outside of any block. If a variable is global, it can be read, and written, from anywhere in your program.

Global variables are not considered good programming practice, and should be avoided whenever possible. They inhibit code readability, create naming conflicts, waste memory, and can create difficult-to-trace bugs. Excessive usage of globals is usually a sign of laziness and/or poor design. However, if there is a situation where local variables may create more obtuse and unreadable code, there's no shame in using globals.

== Other Modifiers ==

Included here, for completeness, are more of the modifiers that standard C provides. For the beginning programmer, ''static'' and ''extern'' may be useful. ''volatile'' is more of interest to advanced programmers. ''register'' and ''auto'' are largely deprecated and are generally not of interest to either beginning or advanced programmers.

===static===
&lt;tt&gt;'''static'''&lt;/tt&gt; is sometimes a useful keyword. 
It is a common misbelief that the only purpose is to make a variable stay in memory.&lt;br&gt;
When you declare a function or global variable as ''static'' it will become internal. You cannot access the function or variable through the extern (see below) keyword from other files in your project.&lt;br&gt;
When you declare a local variable as ''static'', it is created just like any other variable. However, when the variable goes out of scope (i.e. the block it was local to is finished) the variable stays in memory, retaining its value. The variable stays in memory until the program ends. While this behaviour resembles that of global variables, static variables still obey scope rules and therefore cannot be accessed outside of their scope.&lt;br&gt;
Variables declared static are initialized to zero (or for pointers, NULL) by default. They can be initialized explicitly on declaration to any ''constant'' value. The initialization is made just once, at compile time. 

You can use static in (at least) two different ways.  Consider this code, and imagine it is in a file called jfile.c:

&lt;source lang=c&gt;
#include &lt;stdio.h&gt;
 
static int j = 0;
 
void up(void)
{
   /* k is set to 0 when the program starts. The line is then &quot;ignored&quot;
    * for the rest of the program (i.e. k is not set to 0 every time up()
    * is called)
    */
   static int k = 0;
   j++;
   k++;
   printf(&quot;up() called.   k= %2d, j= %2d\n&quot;, k , j);
}
 
void down(void)
{
   static int k = 0;
   j--;
   k--;
   printf(&quot;down() called. k= %2d, j= %2d\n&quot;, k , j);
}
 
int main(void)
{
   int i;
     
   /* call the up function 3 times, then the down function 2 times */
   for (i= 0; i &lt; 3; i++)
      up();
   for (i= 0; i &lt; 2; i++)
      down();
    
   return 0;
}
&lt;/source&gt;

The j var is accessible by both up and down and retains its value.  The k vars also retain their value, but they are two different variables, one in each of their scopes. Static vars are a good way to implement encapsulation, a term from the object-oriented way of thinking that effectively means not allowing changes to be made to a variable except through function calls.

Running the program above will produce the following output:
&lt;source lang=c&gt;
up() called.   k=  1, j=  1
up() called.   k=  2, j=  2
up() called.   k=  3, j=  3
down() called. k= -1, j=  2
down() called. k= -2, j=  1
&lt;/source&gt;

'''Features of &lt;code&gt;static&lt;/code&gt; variables :'''
     1. Keyword used        - '''static'''
     2. Storage             - Memory
     3. Default value       - Zero
     4. Scope               - Local to the block in which it is declared
     5. Lifetime            - Value persists between different function calls
     6. Keyword optionality - Mandatory to use the keyword

===extern===
&lt;tt&gt;'''extern'''&lt;/tt&gt; is used when a file needs to access a variable in another file that it may not have &lt;tt&gt;#include&lt;/tt&gt;d directly. Therefore, ''extern'' does not actually carve out space for a new variable, it just provides the compiler with sufficient information to access the remote variable.

'''Features of &lt;code&gt;external&lt;/code&gt; variable :'''
     1. Keyword used        - '''extern'''
     2. Storage             - Memory
     3. Default value       - Zero
     4. Scope               - Global (all over the program)
     5. Lifetime            - Value persists till the program's execution comes to an end
     6. Keyword optionality - Optional if declared outside all the functions

===volatile===
'''&lt;tt&gt;volatile&lt;/tt&gt;''' is a special type of modifier which informs the compiler that the value of the variable may be changed by external entities other than the program itself. This is necessary for certain programs compiled with optimizations – if a variable were not defined &lt;tt&gt;volatile&lt;/tt&gt; then the compiler may assume that certain operations involving the variable are safe to optimize away when in fact they aren't. ''volatile'' is particularly relevant when working with embedded systems (where a program may not have complete control of a variable) and multi-threaded applications.

===auto===
&lt;tt&gt;'''auto'''&lt;/tt&gt; is a modifier which specifies an &quot;automatic&quot; variable that is automatically created when in scope and destroyed when out of scope. If you think this sounds like pretty much what you've been doing all along when you declare a variable, you're right: all declared items within a block are implicitly &quot;automatic&quot;. For this reason, the ''auto'' keyword is more like the answer to a trivia question than a useful modifier, and there are lots of very competent programmers that are unaware of its existence.

'''Features of &lt;code&gt;automatic&lt;/code&gt; variables :'''
     1. Keyword used        - '''auto'''
     2. Storage             - Memory
     3. Default value       - Garbage value (random value)
     4. Scope               - Local to the block in which it is defined
     5. Lifetime            - Value persists while the control remains within the block
     6. Keyword optionality - Optional

===register===
'''&lt;tt&gt;register&lt;/tt&gt;''' is a hint to the compiler to attempt to optimize the storage of the given variable by storing it in a register of the computer's CPU when the program is run. Most optimizing compilers do this anyway, so use of this keyword is often unnecessary. In fact, ANSI C states that a compiler can ignore this keyword if it so desires – and many do. Microsoft Visual C++ is an example of an implementation that completely ignores the ''register'' keyword.

'''Features of &lt;code&gt;register&lt;/code&gt; variables :'''
     1. Keyword used        - '''register'''
     2. Storage             - CPU registers (values can be retrieved faster than from memory)
     3. Default value       - Garbage value
     4. Scope               - Local to the block in which it is defined
     5. Lifetime            - Value persists while the control remains within the block
     6. Keyword optionality - Mandatory to use the keyword

===Concepts===
* [[Computer Programming/Variables|Variables]]
* [[Computer Programming/Types|Types]]
* [[Data Structures]]
* [[Data Structures/Arrays|Arrays]]

===In this section===
*[[C Programming/Variables|C variables]]
**[[C Programming/Types|C types]]
**[[C Programming/Arrays|C arrays]]

[[de:C-Programmierung: Variablen und Konstanten]]
[[et:Programmeerimiskeel C/Muutujad]]
[[fi:C/Muuttujat]]
[[fr:Programmation C/Bases du langage]]
[[it:C/Variabili, operatori e costanti/Variabili]]
[[ja:C言語 変数]]
[[pl:C/Zmienne]]
[[pt:Programar em C/Variáveis]]

{{C Programming/Navigation|Structure and style|Simple Input and Output}}</text>
      <sha1>ao9dm2ldaksv54proy17w7erokwzkiz</sha1>
      <model>wikitext</model>
      <format>text/x-wiki</format>
    </revision>
  </page>
  <page>
    <title>C Programming/Types</title>
    <ns>0</ns>
    <id>544</id>
    <revision>
      <id>2617745</id>
      <parentid>2617642</parentid>
      <timestamp>2014-03-17T20:49:48Z</timestamp>
      <contributor>
        <username>Xania</username>
        <id>40302</id>
      </contributor>
      <comment>(doesn't appear to make sense) - Rejected the last 4 text changes (by [[Special:Contributions/119.155.7.63|119.155.7.63]]) and restored revision 2495426 by 118.209.241.104</comment>
      <text xml:space="preserve">In C, there is a small key set of types. The rest are variations, modifiers, arrays and other such low-level data structures. The keywords for these types are '''&lt;tt&gt;int&lt;/tt&gt;''', '''&lt;tt&gt;char&lt;/tt&gt;''' and '''&lt;tt&gt;float&lt;/tt&gt;'''.

== Types in C ==
=== Integer types ===
When we wish to store an integer, we use an integer type, usually &lt;tt&gt;int&lt;/tt&gt;. &lt;tt&gt;int&lt;/tt&gt;s have at least 16 bits. Many platforms have 32-bit &lt;tt&gt;int&lt;/tt&gt;s. There is also &lt;tt&gt;long int&lt;/tt&gt;, which is guaranteed to have at least 32 bits. &lt;tt&gt;short int&lt;/tt&gt;s have at most 16 bits, just like regular &lt;tt&gt;int&lt;/tt&gt;s. However, often &lt;tt&gt;int&lt;/tt&gt; is made to be longer, so &lt;tt&gt;short int&lt;/tt&gt; is used when conserving memory is important.

All these integer types are ''signed'', meaning that they can hold both positive and negative values. There is an corresponding ''unsigned'' type that only holds nonnegative values. However, they can hold larger values in the same number of bits. Using the keyword &lt;tt&gt;unsigned&lt;/tt&gt; yields an unsigned type. For example, &lt;tt&gt;unsigned int&lt;/tt&gt; is a unsigned integer type of at least 16 bits. The keyword &lt;tt&gt;signed&lt;/tt&gt; can also be used, but is redundant.

When conserving memory is even more important, we can pack an assortment of 1-bit, 2-bit, and 3-bit values into a structure using [[w:bit_field|bit_field]]s.
(Or we can use the bit-manipulation instructions to manually pack and unpack bit fields from a standard &quot;char&quot; or &quot;int&quot;.)

=== Character types ===
When we wish to store a single character or byte, we use a character type. The C name for this type is called &lt;tt&gt;char&lt;/tt&gt;. &lt;tt&gt;char&lt;/tt&gt;s always use one byte each. &lt;tt&gt;char&lt;/tt&gt; can also be used to store integers small enough to fit in a byte.

Since &lt;tt&gt;char&lt;/tt&gt; is an integer type, it is important to know whether it is signed or unsigned. However, compilers are allowed to make them either. If you want to guarantee that your character variable is signed or unsigned, use the type &lt;tt&gt;signed char&lt;/tt&gt; or &lt;tt&gt;unsigned char&lt;/tt&gt;. Unlike &lt;tt&gt;char&lt;/tt&gt;, these types are guaranteed to be either signed or unsigned, according to their names.


char arrays are often used to store human readable strings of alphabetic language like English; a common use is the filename, the user login name, and the password. &lt;tt&gt;char&lt;/tt&gt; arrays are often used to store user input, which may need to be manipulated : the common expectation is that  a character string ends with a null character which has a value of 0 or zero. Because arrays are either defined dynamically using malloc() , or more conveniently, in scope on the stack , 
with something like

 &lt;code&gt;char buff[maxbuf];&lt;/code&gt; 

where maxbuf is a constant or define of say, 512, a string of say 522 characters ending with a zero character on the 523rd character can write into 523-512=11 characters following the space allowed for buff on the stack, and if the stack grows backwards, so that before buff was allocated the program counter that stored the current address of the program before the function was called was pushed onto the stack, and this was going to be used at the end of the function to return to the instruction following the call to the function, an attacker could change the return address to a loader code within buff to load a malicious program and run it. This buffer overrun attack can usually be avoided if functions which copy buffers without a length limitation such as strcpy are replaced by functions which specify maximum buffer length like snprintf() , or any use of strcpy is preceded by a length check with strlen(), and strcpy not called if the length is greater than the allocated space minus 1 (for the null character to be stored ).

=== Floating-point types ===
When we wish to store a floating-point (non-integer) value, we can use the types &lt;tt&gt;float&lt;/tt&gt;, &lt;tt&gt;double&lt;/tt&gt;, and &lt;tt&gt;long double&lt;/tt&gt;. These differ only in the precision and range that they provide. A &lt;tt&gt;float&lt;/tt&gt; generally has 32 bits and a &lt;tt&gt;double&lt;/tt&gt; 64. &lt;tt&gt;long double&lt;/tt&gt; might be bigger, but it could just be the same as &lt;tt&gt;double&lt;/tt&gt;.

=== Void type ===
There is a special type called &lt;tt&gt;void&lt;/tt&gt;. You are not allowed to have variables of type &lt;tt&gt;void&lt;/tt&gt;. There are various uses of &lt;tt&gt;void&lt;/tt&gt;, one of which is as a return type for functions that don't need to return an actual value. &lt;tt&gt;void&lt;/tt&gt; did not exist before it was introduced in the 1989 ANSI C standard. However, there should be no need to worry about its not being available unless you use a really old compiler (in which case, upgrade).

There is no fundamental predefined string type in C. Strings in C are more complicated (they are ''arrays'' of chars), requiring manual handling, and we will deal with them later.

== Declaring variables ==
All type declarations using the above simple types follow a standard format
:&lt;tt&gt;type_name variable_name;&lt;/tt&gt;
where &lt;tt&gt;type_name&lt;/tt&gt; represents one of the C type names, and &lt;tt&gt;variable_name&lt;/tt&gt; would be replaced by the programmer with a name for the variable. According to the C standards there are a few restrictions on variable names. A variable name:
* must be at least one character long
* must be less than some maximum character length. 32 on some systems, 256 on others, and probably everything in between on yet others.
* must start with a letter
* must be composed of letters, numbers and/or the underscore character
* must not contain spaces
* must not be equal to reserved words such as &quot;int&quot;, &quot;char&quot;, &quot;float&quot;, et cetera. Any keyword used for the C language itself is off-limits.
* is case sensitive. This means that &quot;NUMBER&quot;, &quot;number&quot;, &quot;Number&quot;, &quot;numbeR&quot;, and &quot;NuMbEr&quot; are all different variables.

For example, if we want to declare a variable called &lt;tt&gt;number&lt;/tt&gt; and of type &lt;tt&gt;int&lt;/tt&gt;, we write
:&lt;tt&gt;int number;&lt;/tt&gt;

In C, all declarations are terminated by semicolons just as if they were statements. If we wish to declare a number of variables of the same type, we can write a comma separated list of variable names after the type. For example:
:&lt;tt&gt;int variable1, variable2, variable3;&lt;/tt&gt;
which declares all &lt;tt&gt;variable1&lt;/tt&gt;, &lt;tt&gt;variable2&lt;/tt&gt;, and &lt;tt&gt;variable3&lt;/tt&gt; to be of type integer.

== enum ==
{{wikipedia|enumerated type}}

Some C programmers use &lt;code&gt;enum&lt;/code&gt; to declare an enumerated type.

These enumerated types are useful when we build [[C_Programming/Control#The_Switch-Case_statement | switch case statements]].

== Related articles ==
Back to contents: [[C Programming|C programming]] 

===Concepts===
*[[Computer Programming|Concepts]]
**[[Computer Programming/Variables|Variables]]
***[[Computer Programming/Types|Types]]
** [[Data Structures]]
*** [[C Programming/Arrays|Arrays]]

===In this section===
*[[C Programming/Variables|C variables]]
**[[C Programming/Types|C types]]
**[[C Programming/Arrays|C arrays]]

[[Category:C Programming]]</text>
      <sha1>bruxvygz82dw7z8zrzexfuujqbnrmsx</sha1>
      <model>wikitext</model>
      <format>text/x-wiki</format>
    </revision>
  </page>
  <page>
    <title>Computer Programming/Variables</title>
    <ns>0</ns>
    <id>545</id>
    <revision>
      <id>1515199</id>
      <parentid>1361499</parentid>
      <timestamp>2009-06-01T22:01:56Z</timestamp>
      <contributor>
        <username>Adrignola</username>
        <id>169232</id>
      </contributor>
      <minor />
      <comment>Fixed template transclusions.</comment>
      <text xml:space="preserve">{{Computer Programming/Variables/0}}
__TOC__
{{Computer Programming/Variables/1}}

An assignment statements in wikibook pseudocode is written as &lt;code&gt;'''let''' ''variable'' ''':=''' ''value''&lt;/code&gt;.

  '''let''' X := 10

{{Computer Programming/Variables/2}}

But this is not needed in wikibook pseudocode.

{{Computer Programming/Variables/3}}

[[Category:Computer Programming|Variables]]</text>
      <sha1>kc4e8cvwz29hhwzqzm9gmkw8eqydqpw</sha1>
      <model>wikitext</model>
      <format>text/x-wiki</format>
    </revision>
  </page>
</mediawiki>
<mediawiki xmlns="http://www.mediawiki.org/xml/export-0.9/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mediawiki.org/xml/export-0.9/ http://www.mediawiki.org/xml/export-0.9.xsd" version="0.9" xml:lang="en">
  <page>
    <title>File:Charged asymetric conductor.png</title>
    <ns>6</ns>
    <id>922</id>
    <revision>
      <id>636434</id>
      <parentid>153057</parentid>
      <timestamp>2006-11-04T11:04:17Z</timestamp>
      <contributor>
        <username>Theresa knott</username>
        <id>93</id>
      </contributor>
      <text xml:space="preserve">Diagram drawn by theresa knott showing the distribution of charge on a conductor

{{GFDL}}
{{Cc-by-sa-2.5}}</text>
      <sha1>33if3ojxr7o7tuicjzzdibwod9gp2fa</sha1>
      <model>wikitext</model>
      <format>text/x-wiki</format>
    </revision>
  </page>
  <page>
    <title>File:Charge separation on a crystal.png</title>
    <ns>6</ns>
    <id>923</id>
    <revision>
      <id>636427</id>
      <parentid>153058</parentid>
      <timestamp>2006-11-04T11:01:56Z</timestamp>
      <contributor>
        <username>Theresa knott</username>
        <id>93</id>
      </contributor>
      <text xml:space="preserve">
{{GFDL}}
{{Cc-by-sa-2.5}}
Image showing charge separation induced by a charged object. Drawn by Theresa knott</text>
      <sha1>exz879l55leyx1mx1fzm2krnlurp76p</sha1>
      <model>wikitext</model>
      <format>text/x-wiki</format>
    </revision>
  </page>
  <page>
    <title>Geometry</title>
    <ns>0</ns>
    <id>924</id>
    <revision>
      <id>2594182</id>
      <parentid>2592839</parentid>
      <timestamp>2013-12-16T23:07:20Z</timestamp>
      <contributor>
        <username>Recent Runes</username>
        <id>66908</id>
      </contributor>
      <minor />
      <comment>[[WB:REVERT|Reverted]] edits by [[Special:Contributions/202.57.49.117|202.57.49.117]] ([[User talk:202.57.49.117|talk]]) to last version by QuiteUnusual</comment>
      <text xml:space="preserve">The word '''geometry''' originates from the Greek words (''geo'' meaning world, ''metri'' meaning measure) and means, literally, to measure the earth. It is an ancient branch of mathematics, but its modern meaning depends largely on context. Geometry largely encompasses forms of non-numeric mathematics, such as those involving measurement, area and perimeter calculation, and work involving angles and position. It was one of the two fields of pre-modern mathematics, the other being the study of numbers. In modern times, geometric concepts have been generalized to a high level of abstraction and complexity, and have been subjected to the methods of calculus and abstract algebra, so that many modern branches of the field are barely recognizable as the descendants of early geometry. This Wikibook is dedicated to high school geometry and geometry in general.

==High School Geometry==
The outline of topics reflects the [http://www.cde.ca.gov/be/st/ California curriculum content standards].

{{print version|Geometry/Print version}}
{{Wikipedia|Geometry}}
{{GeometryTOC}}
==General Geometry==
{{GeometryTOC2}}

{{Subjects|Geometry|bookcategory=Geometry (book)|K-12 mathematics}}
{{alphabetical|G}}
{{status|25%}}

[[cs:Geometrie]]
[[fr:Géométrie]]
[[it:Geometria]]
[[he:גיאומטריה]]
[[ja:幾何学]]</text>
      <sha1>nv2378qxfya4vlzmhrniohdb6tgqvn3</sha1>
      <model>wikitext</model>
      <format>text/x-wiki</format>
    </revision>
  </page>
  <page>
    <title>User:Theresa knott</title>
    <ns>2</ns>
    <id>926</id>
    <revision>
      <id>636308</id>
      <parentid>597445</parentid>
      <timestamp>2006-11-04T10:43:30Z</timestamp>
      <contributor>
        <ip>86.7.161.153</ip>
      </contributor>
      <comment>/* limks */</comment>
      <text xml:space="preserve">The same Theresa Knott as [[w:en:User:Theresa knott|here]]

My [http://theresaknott.googlepages.com home page]

At the moment I am working mainly on the [[wikijunior]] project. I have also finished the GCSE electricity and magnetism book.

----
[[User:Theresa knott/sandbox]]

----
==School Computer Club==

The following girls are my pupils. Please let me know if you have any problems with them.

[[User:Flower(Knott)]]


[[User:Cheese (knott)]]


[[User:Pong(knott)]]


[[User:Emerald (knott)]]


[[User:Lolly(knott)]]


[[User:Ellie (knott)]]


[[User:Cutie pie (knott)]]


[[User:Muffy (knott)]]

==links==
http://www.chemicroc.com/ChemiCroc.swf
http://www.bbc.co.uk/schools/ks3bitesize/flash/sci_ani_15.swf
http://www.scienceunleashed.ie/Games/States%20of%20Matter.swf
http://ecokids.earthday.ca/pub/eco_info/topics/frogs/chain_reaction/assets/flash/chain_reaction.swf
http://www.sciencelessons.co.uk/flash/chain.swf
http://game.gprime.net/media/game/magnetism.swf
http://www.mystery-productions.info/hyper/Hypermedia_2003/Johns/export.swf


[[User:Zag (knott)]]</text>
      <sha1>f0ab7g1gt9e00zbi8iur3sozjjt4m1o</sha1>
      <model>wikitext</model>
      <format>text/x-wiki</format>
    </revision>
  </page>
  <page>
    <title>C Programming/Memory management</title>
    <ns>0</ns>
    <id>927</id>
    <revision>
      <id>2580731</id>
      <parentid>2564346</parentid>
      <timestamp>2013-11-11T12:02:51Z</timestamp>
      <contributor>
        <username>Whym</username>
        <id>109931</id>
      </contributor>
      <minor />
      <comment>restoring</comment>
      <text xml:space="preserve">{{C Programming/Navigation|Pointers and arrays|Strings}}

In C, you have already considered creating variables for use in the program. You have created some arrays for use, but you may have already noticed some limitations:
* the size of the array must be known beforehand 
* the size of the array cannot be changed in the duration of your program

''Dynamic memory allocation'' in C is a way of circumventing these problems.

== Malloc ==
&lt;source lang=c&gt;
#include &lt;stdlib.h&gt;
void *calloc(size_t nmemb, size_t size);
void free(void *ptr);
void *malloc(size_t size);
void *realloc(void *ptr, size_t size);
&lt;/source&gt;
The C function &lt;code&gt;malloc&lt;/code&gt; is the means of implementing dynamic memory allocation. It is defined in stdlib.h or malloc.h, depending on what operating system you may be using. Malloc.h contains only the definitions for the memory allocation functions and not the rest of the other functions defined in stdlib.h. Usually you will not need to be so specific in your program, and if both are supported, you should use &lt;stdlib.h&gt;, since that is ANSI C, and what we will use here.

The corresponding call to release allocated memory back to the operating system is &lt;code&gt;free&lt;/code&gt;.

When dynamically allocated memory is no longer needed, &lt;code&gt;free&lt;/code&gt; should be called to release it back to the memory pool.  Overwriting a pointer that points to dynamically allocated memory can result in that data becoming inaccessible.  If this happens frequently, eventually the operating system will no longer be able to allocate more memory for the process.  Once the process exits, the operating system is able to free all dynamically allocated memory associated with the process.

Let's look at how dynamic memory allocation can be used for arrays.

Normally when we wish to create an array we use a declaration such as
&lt;source lang=c&gt;
int array[10];
&lt;/source&gt;

Recall &lt;code&gt;array&lt;/code&gt; can be considered a pointer which we use as an array. We specify the length of this array is 10 &lt;code&gt;int&lt;/code&gt;s. After &lt;code&gt;array[0]&lt;/code&gt;, nine other integers have space to be stored consecutively.

Sometimes it is not known at the time the program is written how much memory will be needed for some data. In this case we would want to dynamically allocate required memory after the program has started executing.
To do this we only need to declare a pointer, and invoke &lt;code&gt;malloc&lt;/code&gt; when we wish to make space for the  elements in our array, ''or'', we can tell &lt;code&gt;malloc&lt;/code&gt; to make space when we first initialize the array. Either way is acceptable and useful.

We also need to know how much an int takes up in memory in order to make room for it; fortunately this is not difficult, we can use C's builtin &lt;code&gt;sizeof&lt;/code&gt; operator. For example, if &lt;code&gt;sizeof(int)&lt;/code&gt; yields 4, then one &lt;code&gt;int&lt;/code&gt; takes up 4 bytes. Naturally, &lt;code&gt;2*sizeof(int)&lt;/code&gt; is how much memory we need for 2 &lt;code&gt;int&lt;/code&gt;s, and so on.

So how do we &lt;code&gt;malloc&lt;/code&gt; an array of ten &lt;code&gt;int&lt;/code&gt;s like before? If we wish to declare and make room in one hit, we can simply say
&lt;source lang=c&gt;
int *array = malloc(10*sizeof(int));
&lt;/source&gt;
We only need to declare the pointer; &lt;code&gt;malloc&lt;/code&gt; gives us some space to store the 10 &lt;code&gt;int&lt;/code&gt;s, and returns the pointer to the first element, which is assigned to that pointer.

'''Important note!''' &lt;code&gt;malloc&lt;/code&gt; does ''not'' initialize the array; this means that the array may contain random or unexpected values! Like creating arrays without dynamic allocation, the programmer must initialize the array with sensible values before using it. Make sure you do so, too. (''See later the function &lt;code&gt;memset&lt;/code&gt; for a simple method.)

It is not necessary to immediately call &lt;code&gt;malloc&lt;/code&gt; after declaring a pointer for the allocated memory.
Often a number of statements exist between the declaration and the call to &lt;code&gt;malloc&lt;/code&gt;, as follows:

&lt;source lang=c&gt;
int *array = NULL;
printf(&quot;Hello World!!!&quot;);
/* more statements */
array = malloc(10*sizeof(int)); /* delayed allocation */
/* use the array */
&lt;/source&gt;
=== Error checking ===
When we want to use &lt;code&gt;malloc&lt;/code&gt;, we have to be mindful that the pool of memory available to the programmer is ''finite''. As such, we can conceivably run out of memory! In this case, &lt;code&gt;malloc&lt;/code&gt; will return &lt;code&gt;NULL&lt;/code&gt;. In order to stop the program crashing from having no more memory to use, one should always check that malloc has not returned &lt;code&gt;NULL&lt;/code&gt; before attempting to use the memory; we can do this by 
&lt;source lang=c&gt;
int *pt = malloc(3 * sizeof(int));
if(pt == NULL)
{
   fprintf(stderr, &quot;Out of memory, exiting\n&quot;);
   exit(1);
}
&lt;/source&gt;

Of course, suddenly quitting as in the above example is not always appropriate, and depends on the problem you are trying to solve and the architecture you are programming for. For example, if the program is a small, non critical application that's running on a desktop quitting may be appropriate. However if the program is some type of editor running on a desktop, you may want to give the operator the option of saving his tediously entered information instead of just exiting the program.  A memory allocation failure in an embedded processor, such as might be in a washing machine, could cause an automatic reset of the machine.  For this reason, many embedded systems designers avoid dynamic memory allocation altogether.

==The &lt;code&gt;calloc&lt;/code&gt; function==
The &lt;code&gt;calloc&lt;/code&gt; function allocates space for an array of items and initilizes the memory to zeros.  The call &lt;code&gt;mArray = calloc( count, sizeof(struct V))&lt;/code&gt; allocates &lt;code&gt;count&lt;/code&gt; objects, each of whose size is sufficient to contain an instance of the structure &lt;code&gt;struct V&lt;/code&gt;. The space is initialized to all bits zero. The function returns either a pointer to the allocated memory or, if the allocation fails, &lt;code&gt;NULL&lt;/code&gt;.

==The &lt;code&gt;realloc&lt;/code&gt; function==


&lt;source lang=c&gt; void * realloc ( void * ptr, size_t size ); &lt;/source&gt;
 
The &lt;code&gt;realloc&lt;/code&gt; function changes the size of the object pointed to by &lt;code&gt;ptr&lt;/code&gt; to the size specified by &lt;code&gt;size&lt;/code&gt;. The contents of the object shall be unchanged up to the lesser of the new and old sizes. If the new size is larger, the value of the newly allocated portion of the object is indeterminate. If &lt;code&gt;ptr&lt;/code&gt; is a null pointer, the &lt;code&gt;realloc&lt;/code&gt; function behaves like the &lt;code&gt;malloc&lt;/code&gt; function for the specified size. Otherwise, if &lt;code&gt;ptr&lt;/code&gt; does not match a pointer earlier returned by the &lt;code&gt;calloc&lt;/code&gt;, &lt;code&gt;malloc&lt;/code&gt;, or &lt;code&gt;realloc&lt;/code&gt; function, or if the space has been deallocated by a call to the &lt;code&gt;free&lt;/code&gt; or &lt;code&gt;realloc&lt;/code&gt; function, the behavior is undefined.  If the space cannot be allocated, the object pointed to by &lt;code&gt;ptr&lt;/code&gt; is unchanged. If &lt;code&gt;size&lt;/code&gt; is zero and &lt;code&gt;ptr&lt;/code&gt; is not a null pointer, the object pointed to is freed.  The &lt;code&gt;realloc&lt;/code&gt; function returns either a null pointer or a pointer to the possibly moved allocated object.

==The &lt;code&gt;free&lt;/code&gt; function==
Memory that has been allocated using &lt;code&gt;malloc&lt;/code&gt;, &lt;code&gt;realloc&lt;/code&gt;, or &lt;code&gt;calloc&lt;/code&gt; must be released back to the system memory pool once it is no longer needed. This is done to avoid perpetually allocating more and more memory, which could result in an eventual memory allocation failure.  Memory that is not released with &lt;code&gt;free&lt;/code&gt; is however released when the current program terminates on most operating systems. Calls to &lt;code&gt;free&lt;/code&gt; are as in the following example.

&lt;source lang=c&gt;
int *myStuff = malloc( 20 * sizeof(int)); 
if (myStuff != NULL) 
{
   /* more statements here */
   /* time to release myStuff */
   free( myStuff );
}
&lt;/source&gt;

=== free with recursive data structures ===
It should be noted that &lt;code&gt;free&lt;/code&gt; is neither intelligent nor recursive.  The following code that depends on the recursive application of free to the internal variables of a [[C Programming/Complex types|struct]] does not work.

&lt;source lang=c&gt;
typedef struct BSTNode 
{
   int value; 
   struct BSTNode* left;
   struct BSTNode* right;
} BSTNode;

// Later: ... 

BSTNode* temp = (BSTNode*) calloc(1, sizeof(BSTNode));
temp-&gt;left = (BSTNode*) calloc(1, sizeof(BSTNode));

// Later: ... 

free(temp); // WRONG! don't do this!
&lt;/source&gt;
The statement &quot;&lt;code&gt;free(temp);&lt;/code&gt;&quot; will '''not''' free &lt;code&gt;temp-&gt;left&lt;/code&gt;, causing a memory leak.

Because C does not have a garbage collector, C programmers are responsible for making sure there is a &lt;code&gt;free()&lt;/code&gt; exactly once for each time there is a &lt;code&gt;malloc()&lt;/code&gt;.
If a tree has been allocated one node at a time, then it needs to be freed one node at a time.

=== Don't free undefined pointers ===
Furthermore, using &lt;code&gt;free&lt;/code&gt; when the pointer in question was never allocated in the first place often crashes or leads to mysterious bugs further along.

To avoid this problem, always initialize pointers when they are declared.
Either use &lt;code&gt;malloc&lt;/code&gt; at the point they are declared (as in most examples in this chapter), or set them to &lt;code&gt;NULL&lt;/code&gt; when they are declared (as in the &quot;delayed allocation&quot; example in this chapter).
&lt;ref&gt;
[https://bugzilla.mozilla.org/show_bug.cgi?id=478901 &quot;Bug 478901 ... libpng-1.2.34 and earlier might free undefined pointers&quot;]
&lt;/ref&gt;

==References==
{{reflist}}</text>
      <sha1>30yz7shx6gnuoji701si2ksddue6vy7</sha1>
      <model>wikitext</model>
      <format>text/x-wiki</format>
    </revision>
  </page>
  <page>
    <title>Talk:Japanese/Grammar/Verbs</title>
    <ns>1</ns>
    <id>928</id>
    <revision>
      <id>1926478</id>
      <parentid>1458198</parentid>
      <timestamp>2010-09-02T17:42:32Z</timestamp>
      <contributor>
        <username>Adrignola</username>
        <id>169232</id>
      </contributor>
      <minor />
      <comment>Adding {{WikiProject Languages}}</comment>
      <text xml:space="preserve">{{WikiProject Languages}} 

There are several errors on this page, and I also don't quite like the approach to that is taken here. I think we should use the real names of the types of Japanese verbs, namely Itidan and Godan. Also, I am a big fan of Kana. Romanisatons are only crutches. This is also why I use the official Japanese romanisation, and not the Hepburn one if I have no access to a Kana-enabled PC . It's a bit slower in the beginning, but there's nothing better than Kana to learn Japanese. 

Basically, apart from the irregular verbs, japanese verbs can be conjugated in all possible forms, based upon five basic stems, namely the dictionary form, and four forms derived from it. -masu is in fact an auxilliary verb wtih a (slighlty) irregular verb.

To explain it with an example:

hanasa: Informal negative stem. Used to form negative and passive forms.
hanasi: Informal positive stem. Used to form more complex forms of the verb such as the polite forms, the informal past and the -te form.
hanasu: Informal positive present form, also called dictionary form.  
hanase: Imperative stem. Used to form provisional and imperative forms.  
hanaso: Volitional stem. Used only to form the volitional. 

Other example for godan (sinu=to die)
sina (-nai, -nareru, -nasu, -naseru)
sin (-de, -da, -dai,  
sinu
sine (-ba)
sino (-o)

And, for ichidan:
tabe
tabe
taberu
tabe
tabe

Now, it should be clear why verbs are called &quot;one-rank&quot; (itidan) or &quot;five-rank&quot; (godan) in Japanese ^_^. &lt;small&gt;—The preceding [[w:Wikipedia:Sign your posts on talk pages|unsigned]] comment was added by [[User:157.193.202.83|157.193.202.83]] ([[User talk:157.193.202.83|talk]] • [[Special:Contributions/157.193.202.83|contribs]]) 02:31, 2 September 2003.&lt;/small&gt;

:Suggestion implemented.  If anyone else notices something out of place, feel free to comment.  覚えてください私は外人です。 :P  -- [[User:Emperorbma|Emperorbma]] 04:28, 18 Oct 2003 (UTC)

There are several verbs with slight irregularities that aren't covered here.  aru -&gt; nai instead of *aranai, kureru -&gt; kure instead of *kurero in the imperative, iku -&gt; itte instead of *iite in the conjunctive, the one-kanji + suru verbs than sometimes conjugate like X-su instead of X-suru-- aisuru -&gt; aiseru instead of *ai-dekiru (and can sometimes be X-zuru instead of X-ziru), and the five polite verbs irassyaru, ossyaru, kudasaru, gozaru, and nasaru whose stem is irregular and involves dropping the -ru instead of just the -u and adding &quot;i&quot;-- i.e. irassyaimasu instead of *irassyarimasu. &lt;small&gt;—The preceding unsigned comment was added by [[User:128.253.136.126|128.253.136.126]] ([[User talk:128.253.136.126|talk]] • [[Special:Contributions/128.253.136.126|contribs]]) 16:52, 23 November 2004  (UTC)&lt;/small&gt;&lt;!-- Template:Unsigned2 --&gt;

I would like to point out that it would be helpful to others if the tenses were to be outlined in the context of proper usage and English equivalents (if any).  Many may not feel they know enough to distinguish between the use of the &quot;non-past&quot; and the &quot;volitative&quot;.  Of course, those studying should know that the indicative can be formed by just using the infinitive (in some cases).  Tenses are used in polite speech for the most part (?). &lt;small&gt;—The preceding unsigned comment was added by [[User:207.162.163.19|207.162.163.19]] ([[User talk:207.162.163.19|talk]] • [[Special:Contributions/207.162.163.19|contribs]]) 07:40, 11 May 2004  (UTC)&lt;/small&gt;&lt;!-- Template:Unsigned2 --&gt;

Comments on the various moods like potential, passive, causative, etc. would also be nice.  Also the other type of conditional -tara form and the representative listing -tari form. &lt;small&gt;—The preceding unsigned comment was added by [[User:128.253.136.126|128.253.136.126]] ([[User talk:128.253.136.126|talk]] • [[Special:Contributions/128.253.136.126|contribs]]) 16:52, 23 November 2004  (UTC)&lt;/small&gt;&lt;!-- Template:Unsigned2 --&gt;

As an intermediate-level student of Japanese (I've taken five semesters, one of them in Tokyo), I must say this page confuses me, and I can't imagine a beginner, using this wikibook to teach themselves, learning anything from this. It reads more like a linguistic analysis than a step-by-step teaching process. Personally, I've never been a big fan of complex linguistics terms like &quot;perfective,&quot; &quot;conjunctive,&quot; and &quot;euphony&quot;; they don't serve to add to understanding, and probably confuse and scare away readers/students. Other terms like &quot;conditional,&quot; &quot;volitional,&quot; and &quot;non-past&quot; are, I think, a little better, as their meanings are more well-known and transparent. Still, even though the basic 'non-past' form (e.g. 食べる or 食べます) is used for both present and future, and as the infinitive, I've always seen it described as the 'present' tense, because this is simpler, and easier for a beginning student to wrap their mind around.

As for godan and ichidan, I've never heard that before, and so it's confusing to me. I learned them as う-verbs and る-verbs ... but either way is better than one book I saw that called them Type I and Type II verbs, and didn't even call the irregulars 'irregular', just called them Type III.

:I've seen that. The source I saw also had an ある-class, including ござる and 下さる, which acted like る verbs (even though they end in ある rather than える or いる) but with the addition of an い to the conjunctive form, e.g. くださ'''い'''ます. I kind of prefer that arrangement, as the other systems gloss them over or consider them another sort of irregular separate from the irregulars (despite the fact that they're regular when considered as a group). [[User:69.109.176.230|69.109.176.230]] 07:07, 27 May 2005 (UTC) (gwalla)

I apologize to complain and criticize without going ahead and changing things, making you do the work or whatever, but, I think it'd be ruder to go and change things now that you've obviously sorted the whole thing out and put a lot of work into it yourself. If you'd like me to write (or help) on part of it, just drop me a message. Thanks.

[[User:LordAmeth|LordAmeth]] 15:31, 31 Dec 2004 (UTC)

Oh, and if I could add one more thing. Spelling.
し should be written 'shi', not 'si'.
しゃ should be 'sha' not 'shya', and certainly not 'sya'.
じょ should be 'jo' not 'jyo'.
These sorts of incorrect romanizations, in my opinion, make the language look more strange and esoteric, and confuse beginners who might mistake 'sya', 'sha' and 'shya' for different characters, and worse, who might actually get the wrong idea about pronunciation.

[[User:LordAmeth|LordAmeth]] 15:35, 31 Dec 2004 (UTC)

== Some comments ==

I do realise that it has been months since the last comments were made here.  However there are some things I'd like to say about what is said above:

* Verbs, adjectives and adjectival nouns traditionally have six stems; however, for verbs, the language has evolved such that in modern usage, two of the forms almost always coincide, so it looks like there are only five for verbs.

* It is quite standard to call the verbs ''godan'', ''ichidan'' and &quot;irregular&quot; in English, together with the other standard of calling the first two types ''u'' and ''ru'' verbs.  Japanese-author textbooks use the type I-II-III style more.  However, the &quot;official&quot; types are:

# 五段 ''godan''
# 上一段 ''kamiichidan'' = the single-row conjugation verbs ending in ''iru''
# 下一段 ''shimoichidan'' = the single-row conjugation verbs ending in ''eru''
# カ行変格 ''kagyou henkaku'' = ''kuru''
# サ行変格 ''sagyou henkaku'' = ''suru''

The verbs usually called &quot;irregular&quot; in English are thus not really called &quot;irregular&quot; in Japanese, just &quot;different from normal&quot;.  This is because while a foreign learner typically does not learn further than the Japanese as used in modern times, when verbs from much older texts are considered, there are quite a few more types of verbs:

# 四段 ''yodan'' - which naturally became 五段 verbs as a consequence of the writing reform in 1946
# 上一段 ''kamiichidan'' - the dozen or so of them have stayed as 上一段 verbs
# 上二段 ''kaminidan'' - they have become 上一段 verbs
# 下一段 ''shimoichidan'' - the only 下一段 verb in the old times, 蹴る, became 五段
# 下二段 ''shimonidan'' - they have become 下一段 verbs (but ''uru''/''eru'' has kept a slightly modified ''shimonidan'' conjugation even in modern Japanese)
# カ行変格 ''kagyou henkaku'' - 来 ''ku'' (= modern くる ''kuru'')
# サ行変格 ''sagyou henkaku'' - out of these, only す ''su'' (= modern する ''suru'') survived into modern times.  One of these old verbs was おはす ''owasu'', the &quot;ancestor&quot; of ござる ''gozaru''
# ナ行変格 ''nagyou henkaku'' - 1) 死ぬ ''shinu'' (became 五段 in modern times; however many dialects have kept the ''henkaku'' type conjugations); 2) 往ぬ ''inu'' (fell into disuse only last century)
# ラ行変格 ''ragyou henkaku'' - verbs that ended in り ''ri'': あり (= modern ある), をり (= modern おる) etc.

and the true &quot;irregular verbs&quot; are called 特別活用 ''tokubetsu katsuyou'' verbs, such as the endless variations on ござる (there are easily twenty of them, as it evolved from the original おはす ''owasu'' all the way to Edo period's ''gozaru''), or a verb like さしも ''sashimo'' (which doesn't even end in a ''u'' or ''i'' sound), which conjugates like ''sashima'', ''sashimou'', ''sashimo'', ''sashimo'', ''sashimae'', ''sashimae''/''sashime''.

Irregularities in conjugations, such as in the verb くださる ''kudasaru'', are noted, but otherwise they are classified as ''godan'' or ''ichidan'' verbs officially.  ない ''nai'', the word used when one wants to express the negative of ある ''aru'', is actually an adjective.  Hence ない has such forms as なき ''naki'' and なし ''nashi'', while none of the other verbs ending in -ない have such forms.  In addition, the negative stem for ある ''aru'', i.e. あら ''ara'', exists, and is used in other situations.  As a historical side note, there was indeed a period when the あらない form was used, when the auxiliary verb ない ''nai'' itself was pretty new.  (In the old days it was ず ''zu''.)

As for romanisation, it is actually the standard in Japan to write し as ''si'', write しゃ as ''sya'', write ち as ''ti'', etc.  But as has been pointed out already, this is misleading in terms of pronunciation, so the rest of the world has happily ignored it.  However, because of its official status, one can't really say it's wrong either...

-- [[User:KittySaturn|KittySaturn]] 04:16, 26 Jun 2005 (UTC)

: Also, an extra note about the terminology being too technical: the style of terminology such as ''u'' and ''ru'' verbs is indeed easy for beginners to understand; however this kind of terminology simply does not work at more advanced levels of Japanese learning, because soon there will be so many &quot;exceptions&quot; that nothing makes sense any more - ''su beki'' would be an &quot;exception&quot;, ''osokare hayakare'' is another &quot;exception&quot;, the grammar pattern ''-zaru wo enai'' is an &quot;exception&quot;, and the ''n'' in ''iwan bakari'', being not of a negative meaning, becomes totally inexplicable... when they in fact fit into the &quot;complicated terminology&quot; grammar structure well, and it is just that the basic terminology is incapable of describing. -- [[User:KittySaturn|KittySaturn]] 04:29, 26 Jun 2005 (UTC)

== Verb suffixes ==

To what point should verb suffixes be mentioned?  Should a section be made to discuss them and list common ones?  -- [[User:Retropunk|Retropunk]] ([[User talk:Retropunk|talk]]) 09:38, 28 January 2009 (UTC)

: I think it would be fine to make this page as exhaustive as possible. The reader can choose what to pick from it while the actual lesson pages should (in my view) take smaller steps and lead the reader along topics of increasing difficaulty. --[[User:Swift|Swift]] ([[User talk:Swift|talk]]) 10:38, 28 January 2009 (UTC)
:: The problem with an exhaustive list is that it will become a conglomerate mess as items get added.  Perhaps it'll suffice to make pages on the conjugations and then make a list of suffixes there, which could lead to other pages.  --[[User:Retropunk|Retropunk]] ([[User talk:Retropunk|talk]]) 00:20, 1 February 2009 (UTC)

::: Sorry, where are you thinking of putting the list of suffixes? Discussing them in detail on sperate pages sounds fair enough, though. --[[User:Swift|Swift]] ([[User talk:Swift|talk]]) 06:23, 1 February 2009 (UTC)

== VLC icon ==
Why is the VLC icon there? It has nothing to do with multimedia.
&lt;small&gt;—The preceding unsigned comment was added by [[User:74.92.11.121|74.92.11.121]] ([[User talk:74.92.11.121|talk]] • [[Special:Contributions/74.92.11.121|contribs]]) 01:16, 3 April 2009  (UTC)&lt;/small&gt;&lt;!-- Template:Unsigned2 --&gt;
: The icon is used for the {{tlx|Japanese todo}} tag. The licensing does not restrict its use to the VLC media player. --[[User:Swift|Swift]] ([[User talk:Swift|talk]]) 21:45, 2 April 2009 (UTC)</text>
      <sha1>md65no3ujlrn8td0ilddyp7j0dxf64r</sha1>
      <model>wikitext</model>
      <format>text/x-wiki</format>
    </revision>
  </page>
  <page>
    <title>Abstract Algebra/Lattice theory</title>
    <ns>0</ns>
    <id>930</id>
    <revision>
      <id>2305100</id>
      <parentid>1598999</parentid>
      <timestamp>2012-04-11T21:30:08Z</timestamp>
      <contributor>
        <username>Panic2k4</username>
        <id>2865</id>
      </contributor>
      <minor />
      <text xml:space="preserve">A ''lattice'' is a ''poset'' such that each pair of elements has a unique ''least upper bound'' and a unique ''greatest lower bound''.

{{Subject|Abstract Algebra}}</text>
      <sha1>ktzc5c86w4nkaft9yctntij8jcd1g3k</sha1>
      <model>wikitext</model>
      <format>text/x-wiki</format>
    </revision>
  </page>
  <page>
    <title>GCSE Science/Electrolysis</title>
    <ns>0</ns>
    <id>931</id>
    <revision>
      <id>2513092</id>
      <parentid>2491954</parentid>
      <timestamp>2013-04-15T18:12:29Z</timestamp>
      <contributor>
        <ip>82.8.7.228</ip>
      </contributor>
      <comment>/* Basic experimental setup */</comment>
      <text xml:space="preserve">[['''[[GCSE Science/Electricity]]''']]
---- 

Electrolysis is the decomposition of certain types of substance using electricity. The types of substance that can be split are '''ionic''' substances. This just means that they are made of  charged ions rather than neutral atoms. {Remember that an ion is just an atom that has either a positive or negative charge}. An example of an ionic substance is common table salt sodium chloride. The sodium atom has a positive charge, the chlorine atom has a negative charge. It is usually written as Na&lt;sup&gt;+&lt;/sup&gt;Cl&lt;sup&gt;-&lt;/sup&gt;.

'''Q1)''' Check in a periodic table, what is the symbol for sodium: Na or Cl?

As you may already know if you've studied the [[GCSE_Science/Metals|Metals]] module, a salt is any substance made by combining an acid with an alkali. Acids, alkalis, and therefore all salts are ionic.

'''Q2)''' Which of the following substances can be broken up by electricity: sodium chloride, iron sulphate, copper nitrate?

==Basic experimental setup==

{| align=&quot;right&quot;
|-
| [[Image:Simple electrolysis setup.png]]
|-
| bgcolor=&quot;ccddff&quot; | The liquid electrolyte is connected&lt;br&gt; to a battery or power supply.&lt;br&gt;The electrodes must not touch!
|}

Most ionic compounds are not liquid at room temperature. This is a problem because the ions need to be able to move for the electric current to be able to flow. This can be achieved by melting. Look at the electrical setup shown on the right.  The electrodes are just two carbon rods connected to a battery. The one connected to the positive electrode is called the '''anode'''. The one connected to the negative electrode is called the '''cathode'''. this is due to a collision

Consider for example the compound lead bromide. This compound is a solid at room temperature but can be molten over a Bunsen flame. So what you would do is put some lead bromide into a beaker. Put the beaker on a tripod over a bunsen flame. Melt the lead bromide, then put in the electrodes and turn the power supply on at a setting of, say, 2V. What you would see happening is the cathode, is a silvery coating of pure lead forming, and bromine forming at the anode. The current would continue to flow until all the lead bromide was turned into lead and bromine.

'''Q3)''' It takes energy to split up a compound like lead bromide. Where does this energy come from?   
    
'''Q4)''' Predict what products you would get at the anode and cathode if copper chloride was the electrolyte.

==What happens at the anode==

{| align=&quot;right&quot;
|-
| [[Image:Electrolysis anode.png]]
|-
| bgcolor=&quot;ccddff&quot; |  The bromine atoms (blue)&lt;/br&gt;
give up  2 electrons each&lt;/br&gt;
(green) to the anode.
|}
The anode is the positive electrode; it attracts  negatively charged ions, because unlike charges attract. The bromine ions move through the melt until they reach the anode. Once they get there, they give up their two extra electrons to become bromine atoms.

2Br&lt;sup&gt;-&lt;/sup&gt; &amp;rarr; Br&lt;sub&gt;2&lt;/sub&gt; + 2e&lt;sup&gt;-&lt;/sup&gt;

The electrons flow up the anode to the positive terminal of the battery.

==What happens at the cathode==
The cathode is the negative electrode; it attracts the positively charged ions. Metal ions are always positive and so the lead ions flow through the metal uhe negatively charged terminal of the battery and onto the lead ions.


Some trick to remember cations and anions, cathodes and anodes.

I have a cat......I call her by saying come here plussy! - cathodes attract positive ions

ca+ions has a plus in it, cations are positive ions

red cat: reduction occurs at the cathode


Pb&lt;sup&gt;2+&lt;/sup&gt; + 2e&lt;sup&gt;-&lt;/sup&gt; &amp;rarr; Pb

'''Q5)''' Solid ionic substances do not conduct electricity and are not split up by it. Why do you think that is?

==Quantity calculations (higher tier only)==
[[Image:Electrolysis copper sulphate.png]]

In the experiment with lead bromide, you saw that lead was deposited at the cathode. If you actually do the experiment you will see that the lead coats the cathode. In this section we will look at how much metal will coat a cathode in a given time.

A scientist performed the following experiment.
*A copper cathode was carefully cleaned and accurately weighed.
*It was placed along with an anode into a solution of copper sulphate.
*It was connected via an ammeter to a variable power supply.
*A current was left to run for a given time, then the cathode was removed and weighed again.

His results were:

{| border=&quot;1&quot; cellpadding=&quot;2&quot;  bgcolor= &quot;ffdddd&quot;
|-
| Current /A || Time /s || Mass of copper deposited /g
|-
| 1 || 3000 || 1.0
|-
| 2 || 3000 || 2.0
|-
| 2 || 1500 || 1.0
|-
| 1 || 1500 || 0.5
|}

You can see from the results that the total amount of copper deposited depends on both the current and the time it flows. This is because the number of copper atoms that can be made from ions depends on the total amount of '''charge''' that flows. The unit of charge is the coulomb.

One coulomb is the amount of charge when one Ampere flows for one second.


'''Q6)''' Look at the results table above. How much copper is deposited when 1A flows for 3000 seconds?

'''Q7)''' How much copper do you predict would be deposited if 1A were to flow for 6000 seconds.

'''Q8)''' What about if 2A were to flow for 12000 seconds ?

==Electrolysis of Aqueous solutions (Advanced)==
''Before studying this section check with your teacher to see if you need to''.

Earlier on in this module you've learned that ions must be able to move in order for electrolysis to work. If the ions are held rigid {such as in a solid}, they can't move and no electricity will flow. We've looked at how the freeing up of ions can occur by melting the electrolyte. Another way to achieve this is by dissolving the electrolyte in water. The trouble with this method is, there will be more than one type of ion present.

Water partially splits up into ions {this is why it's such a good solvent for ionic compounds}. It splits into hydrogen ions and hydroxide ions.


H&lt;sub&gt;2&lt;/sub&gt;O &amp;rarr; H&lt;sup&gt;+&lt;/sup&gt; +OH&lt;sup&gt;-&lt;/sup&gt;

So at the cathode there will be two ions present: the metal ion and the hydrogen ion from the water. Which element is actually produced at the cathode depends on how reactive the metal is. If the metal is very reactive, such as potassium or sodium, then it is unlikely to be discharged. Hence hydrogen will be produced. If the metal is unreactive such as silver, the metal will be produced. To work out which ion &quot;wins&quot;, the metal or the hydrogen, compare their reactivities in a the reactivity series. The one that is most reactive, will '''not''' be produced at the cathode.

A similar situation occurs at the anode. Hydroxide ions {from the water} are usually discharged at the anode ultimately producing oxygen. However, if the concentration of the ions of Halites (group 7) are much higher than that of the hydroxide ions, then the halite ions are discharged. Sulphates are never discharged.

OH&lt;sup&gt;-&lt;/sup&gt; &amp;rarr; OH + e&lt;sup&gt;-&lt;/sup&gt;

4OH &amp;rarr; 2H&lt;sub&gt;2&lt;/sub&gt;O + O&lt;sub&gt;2&lt;/sub&gt;.


'''Q9)''' Sodium chloride is dissolved in water and subjected to electrolysis. Explain what you see at each of the electrodes.



{| bgcolor=&quot;ffeeaa&quot;
|-
|
'''Summary'''
*Only ionic substances can be split up by electrolysis
*The ionic compounds need to be melted or dissolved in water so the ions can move
*Positive ions are attracted to the cathode, where they pick up electrons from the electrode
*Negative ions are attracted to the anode where they give electrons to the electrode
|}


----
[[GCSE Science/Electrolysis answers|Answers]] | [[GCSE Science/Advanced static electricity topics|&lt;&lt;Advanced static electricity]] | [[GCSE Science/Circuits |Circuits&gt;&gt;]]

[[Category:GCSE Science]]</text>
      <sha1>myf4lxdcnvwo12kajiqzwz7kh4nyz9w</sha1>
      <model>wikitext</model>
      <format>text/x-wiki</format>
    </revision>
  </page>
  <page>
    <title>User:Yann</title>
    <ns>2</ns>
    <id>932</id>
    <revision>
      <id>182392</id>
      <parentid>182371</parentid>
      <timestamp>2005-07-04T07:33:56Z</timestamp>
      <contributor>
        <username>Lynx7725</username>
        <id>6293</id>
      </contributor>
      <comment>rv linkspam by 61.49.103.251</comment>
      <text xml:space="preserve">Hi,

I am from South-East of France, near Geneva.
See my web site at http://www.forget-me.net/, and don't forget me ! ;o)

Here I am mainly working on the [[LPI Linux Certification]] course.
I also intent to help writing a [[Hindi]] and a [[Gujarati]] course.

== Reminders ==

* http://en.wikibooks.org/w/wiki.phtml?title=Special:Contributions&amp;target=Attention-tunnel
* [[/Talk orphaned]]

[[fr:Utilisateur:Yann]]
[[hi:User:Yann]]
[[w:en:User:Yann]]
[[w:fr:Utilisateur:Yann]]</text>
      <sha1>kfvldxnuyr0lqkty8puzc3uaqww5eoh</sha1>
      <model>wikitext</model>
      <format>text/x-wiki</format>
    </revision>
  </page>
  <page>
    <title>Hindi</title>
    <ns>0</ns>
    <id>933</id>
    <revision>
      <id>2714929</id>
      <parentid>2612796</parentid>
      <timestamp>2014-10-18T17:48:24Z</timestamp>
      <contributor>
        <ip>49.207.234.154</ip>
      </contributor>
      <comment>/* Useful External Resources */</comment>
      <text xml:space="preserve">[[Image:Taj Mahal in March 2004.jpg|center|500px]]

'''Hindi''' is an Indo-European language spoken as a first language in India and second language in many countries where Indians have emigrated. It is written with the '''Devanagari''' script which fairly closely follows the phonetics of the language.  Spoken Hindi is very similar to spoken [[Urdu]] &amp;mdash; as such they are both often classified as part of the Hindustani (Indian) language.

== Basic Hindi in 1,2,3 Steps ==
{{Hindi}}
''To be reorganized''
* [[/Basic Hindi/]]
* [[/Everyday Phrases/]]
* [[/Mini-tutorial Lesson/]]

*[[Hindi/Introduction|1: Introducing Hindi]]
*[[Hindi/Speaking and Writing|2: Speaking and Writing the Hindi language]]
*[[Hindi/Core grammar|3: Your first pieces of vocabulary and grammar]]

== Learning More ==

* [[Hindi/More on pronunciation|More on pronunciation]]
* [[Hindi/Extending your vocabulary|Extending your vocabulary]]
* [[Hindi/More useful grammar|More useful grammar]]

== Indepth Topics ==

* [[Hindi/Indepth on Nouns|Nouns]]
* [[Hindi/Indepth on Verbs|Verbs]]
* [[Hindi/Indepth on Pronouns|Pronouns]]
* [[Hindi/Indepth on Tenses|Tenses]]

== Glossary ==

*[[Hindi/Glossary of Nouns|Nouns]]
*[[Hindi/Glossary of Verbs|Verbs]]
*[[Hindi/Glossary of Adjectives|Adjectives]]
*[[Hindi/Glossary of Phrases and Indioms|Phrases and Idioms]]

== Useful External Resources ==
{{InterWiki|code=Hi}}
{{wikipedia|Hindi}}
{{wiktionary|Hindi}}

* [http://www.mindurhindi.com/ Easiest way to Learn Hindi Online !  Hindi lessons, grammar, exercises and daily sentences]
* [http://www.learning-hindi.com/ Learning Hindi! Free online Hindi lessons]
* [http://devanaagarii.net/ Displaying and Inputting Devanagari]
* [http://sites.google.com/site/hindispekingtree/Home/ Hindi Speaking Tree]
* [http://shabdkosh.raftaar.in/ Hindi-English-Hindi dictionary and thesaurus]
* [http://ekalam.raftaar.in/ E-Kalam an online tool to type in Devanagari using both Unicode and non-Unicode fonts]
* [http://utopianvision.co.uk/hindi/ Learn Hindi - Free Hindi Tutorial]
* [http://www.geocities.ws/matthewblackwell/editors/hindiEditor2.html Matthew Blackwell's Hindi Editor]
* [http://www.ncsu.edu/project/hindi_lessons/lessons.html Hindi Lessons by Afroz Taj]
* [http://demo.vishalon.net/HindiTypePad.htm Online Hindi Type Pad]
* [http://www.open-of-course.org/hindi-beginners-course-2.html Free Online Hindi Beginners Course]
* [http://www.ispeakhindi.com ISpeakHindi.com learn Hindi podcast]
* [https://play.google.com/store/apps/details?id=com.altergyan.learnhindiquicklyfree Android App - &quot;Learn Hindi Quickly Free&quot;]

== See also ==
* [[w:Hindi|Hindi language]] (Wikipedia)
* [[w:Devanagari|Devanagari]] (Wikipedia)
* [[w:hi:मुखपृष्ठ|Hindi language Wikipedia]] (Wikipedia in Hindi)
* [[w:hif:Pahila Panna|Fiji Hindi language Wikipedia]] (Wikipedia in Fiji Hindi, a dialect used in Fiji)
* [[Gujarati|Gujarati course]]

{{Category 2}}

{{Subjects|Languages of Asia}}
{{alphabetical|H}}
{{status|25%}}
__NOTOC__

[[fr:Enseignement du hindi]]
[[he:הינדי]]
[[ja:ヒンディー語]]
[[pl:Hindi]]
[[pt:Hindi]]
[[ta:இந்தி]]</text>
      <sha1>gsghyhri0erm54jlcaa9sk8joa14ag1</sha1>
      <model>wikitext</model>
      <format>text/x-wiki</format>
    </revision>
  </page>
  <page>
    <title>Discrete Mathematics/Axiom of choice</title>
    <ns>0</ns>
    <id>935</id>
    <revision>
      <id>1578484</id>
      <parentid>1578398</parentid>
      <timestamp>2009-07-24T15:56:12Z</timestamp>
      <contributor>
        <username>Adrignola</username>
        <id>169232</id>
      </contributor>
      <minor />
      <comment>recat</comment>
      <text xml:space="preserve">'''Axiom of choice''':

If &lt;math&gt;f:A\rightarrow B&lt;/math&gt; is a surjective map, then there exists a map &lt;math&gt;g:B\rightarrow A&lt;/math&gt; such that &lt;math&gt;f\circ g&lt;/math&gt; is the identity (trivial) map.

Lemma: Every set can be well-ordered.

{{BookCat}}</text>
      <sha1>hm1a1no9wvfmkzwdgnu69dxevpt3kui</sha1>
      <model>wikitext</model>
      <format>text/x-wiki</format>
    </revision>
  </page>
  <page>
    <title>CACS/Glossary/ASProvider</title>
    <ns>0</ns>
    <id>936</id>
    <revision>
      <id>1493474</id>
      <parentid>1493414</parentid>
      <timestamp>2009-05-07T18:13:55Z</timestamp>
      <contributor>
        <username>Darklama</username>
        <id>7662</id>
      </contributor>
      <minor />
      <comment>recat</comment>
      <text xml:space="preserve">An '''Application Service Provider (ASP)''' is a business model for delivery of business or IT services across a network.  It may also be a service enterprise whose primary business is delivery of application services using the ASP model. ASP usually implies a central (vendor) data center that runs the application.

For further discussion, see the [[w:Application service provider|Wikipedia article]].

{{subjects|computing|technology}}</text>
      <sha1>l2hhvy5bchxgn5d4bevf3p2hjbcbxhr</sha1>
      <model>wikitext</model>
      <format>text/x-wiki</format>
    </revision>
  </page>
  <page>
    <title>Algebra/Equalities and Inequalities</title>
    <ns>0</ns>
    <id>938</id>
    <revision>
      <id>2394915</id>
      <parentid>2305240</parentid>
      <timestamp>2012-08-16T23:49:46Z</timestamp>
      <contributor>
        <username>Fishpi</username>
        <id>366400</id>
      </contributor>
      <comment>Rejected the last text change (by [[Special:Contributions/90.148.186.80|90.148.186.80]]) and restored revision 2256363 by 122.106.173.173</comment>
      <text xml:space="preserve">{{Algebra Page}}



'''Solving linear inequalities''' involves finding solutions to expressions where the quantities are ''not'' equal.

A number on the number line is always '''greater''' than any number on its left and '''smaller''' than any number on its right. The symbol &quot;&lt;&quot; is used to represent &quot;is less than&quot;, and &quot;&gt;&quot; to represent &quot;is greater than&quot;.

For example:

 &lt;--|-----|-----|-----|-----|-----|-----|-----|-----|-----|-----|-----&gt;
   -5    -4    -3    -2    -1     0     1     2     3     4     5

From the number line, we can easily tell that 3 is greater than -2, because 3 is on the right side of -2 (or -2 is on the left of 3). We write it as &lt;math&gt;3&gt;-2&lt;/math&gt; (or as &lt;math&gt;-2&lt;3&lt;/math&gt;). We can also derive that any positive number is always greater than negative number.

Consider any two numbers, ''a'' and ''b''. One and only one of the following statements can be true:
# &lt;math&gt;a&gt;b&lt;/math&gt;,
# &lt;math&gt;a=b&lt;/math&gt;, or
# &lt;math&gt;a&lt;b&lt;/math&gt;

This is the [[Wikipedia:Law_of_trichotomy|Law of Trichotomy]].

For an inequality with one unknown, there may be many (sometimes infinite) possible solutions.

== Properties ==

* '''Transitive property''': 
::For any three numbers &lt;math&gt;x&lt;/math&gt;, &lt;math&gt;y&lt;/math&gt;, &lt;math&gt;z&lt;/math&gt;, if &lt;math&gt;x&gt;y&lt;/math&gt; and &lt;math&gt;y&gt;z&lt;/math&gt;, then &lt;math&gt;x&gt;z&lt;/math&gt;.
* '''Additive property''':
::In an inequality, we can add or subtract the same value from both sides, without changing the sign (i.e. &quot;&gt;&quot; or &quot;&lt;&quot;). That is to say, for any three numbers &lt;math&gt;x&lt;/math&gt;, &lt;math&gt;y&lt;/math&gt; and &lt;math&gt;p&lt;/math&gt;, if &lt;math&gt;x&gt;y&lt;/math&gt;, then &lt;math&gt;x+p&gt;y+p&lt;/math&gt; and &lt;math&gt;x-p&gt;y-p&lt;/math&gt;.
* '''Multiplicative property'''
::We can multiply or divide both sides by a '''positive''' number without changing the sign. For example, if we have any two numbers &lt;math&gt;x&lt;/math&gt; and &lt;math&gt;y&lt;/math&gt;, and another positive number &lt;math&gt;p&lt;/math&gt;, then if &lt;math&gt;x&gt;y&lt;/math&gt;, then &lt;math&gt;x \cdot p&gt;y \cdot p&lt;/math&gt; and &lt;math&gt;\frac {x} {p}&gt; \frac {y} {p}&lt;/math&gt;.

:: When we multiply or divide both sides by a '''negative''' number, we have to change the sign of the inequality (i.e, &quot;&gt;&quot; change to &quot;&lt;&quot; and vice versa). So if we are given two numbers &lt;math&gt;x&lt;/math&gt; and &lt;math&gt;y&lt;/math&gt;, and another negative number &lt;math&gt;p&lt;/math&gt;, then if &lt;math&gt;x&gt;y&lt;/math&gt;, &lt;math&gt;x \cdot p&lt;y \cdot p&lt;/math&gt; and &lt;math&gt;\frac {x} {p}&lt; \frac {y} {p}&lt;/math&gt;.

Now we can go on to solve any linear inequalities.

== Solving Inequalities ==

Solving inequalities is almost the same as solving linear equations. Let's consider an example: &lt;math&gt;x+4&lt;13&lt;/math&gt;. All we have to do is to subtract 4 on both sides. We will then get &lt;math&gt;x&lt;9&lt;/math&gt;, and that is the answer! Note, however, what you get is not a single answer, but a ''set'' of solutions, i.e., any number that satisfies the condition &lt;math&gt;x&lt;9&lt;/math&gt; (any number that is less than 9) can be a solution to the inequality. It is very convenient to represent the solution using the number line:
 &lt;-------------------o
 &lt;-+-----+-----+-----+-----+-----+--&gt;
   6     7     8     9     10    11

('''Note:''' the open circle (&quot;o&quot;) shows that the value 9 is not included in the solution set, as the inequality of this equation is ''less than 9'', not ''less than or equal to 9''. When we deal with less (greater) than or equal to (≤ or ≥) later on, we use a closed circle (&quot;●&quot;) to show that the value is included in the solution set.)

Let us try another more complicated question: &lt;math&gt;3x-2\ge2(x-3)&lt;/math&gt;. First, you may want to expand the right hand side: &lt;math&gt;3x-2\ge2x-6&lt;/math&gt;. Then we can simply rearrange the terms so that all the unknown variables are on one side of the equation, usually the left hand side: &lt;math&gt;3x-2x\ge-6+2&lt;/math&gt;. Hence we can easily get the answer: &lt;math&gt;x\ge-4&lt;/math&gt;. This solution is represented on the number line below. Note that the solution requires a closed circle (&quot;●&quot;), because the &lt;math&gt;x&lt;/math&gt; is greater than ''or equal to'' 4.
               ●-------------------&gt;
 &lt;-+-----+-----+-----+-----+-----+--&gt;
  -6    -5    -4    -3    -2    -1

=== Inequalities with a variable in the denominator===
For example consider the inequality
:&lt;math&gt;\frac{2}{x-1}&lt;2\,&lt;/math&gt;

In this case one cannot multiply the right hand side by &lt;math&gt;(x-1)&lt;/math&gt; because the value of x is unknown.  Since x may be either positive or negative, you can't know whether to leave the inequality sign as &lt;math&gt;&lt;&lt;/math&gt; (ie less than), or reverse it to &gt; (ie greater than).
The method for solving this kind of inequality involves four steps:
# Find out when the denominator is equal to zero.  In the above example the denominator equals zero when &lt;math&gt;x=1&lt;/math&gt;.
# Pretend the inequality sign is an &lt;math&gt;=&lt;/math&gt; sign and solve it as such: &lt;math&gt;\frac{2}{x-1}=2\,&lt;/math&gt;, so &lt;math&gt;x=2&lt;/math&gt;.
# Plot the points &lt;math&gt;x=1&lt;/math&gt; and &lt;math&gt;x=2&lt;/math&gt; on a number line with an unfilled circle because the original equation included &lt; (it would have been a filled circle if the original equation included &lt;math&gt;\le&lt;/math&gt; or &lt;math&gt;\ge&lt;/math&gt;).  You now have three regions: &lt;math&gt;x&lt;1&lt;/math&gt;, &lt;math&gt;1&lt;x&lt;2&lt;/math&gt;, and &lt;math&gt;x&gt;2&lt;/math&gt;.
# Test each region independently.  in this case test if the inequality is true for &lt;math&gt;1&lt;x&lt;2&lt;/math&gt; by picking a point in this region (e.g. &lt;math&gt;x=1.5&lt;/math&gt;) and trying it in the original inequation.  For x=1.5 the original inequation doesn't hold.  So then try for &lt;math&gt;1&gt;x&gt;2)&lt;/math&gt;  (e.g. &lt;math&gt;x=3)&lt;/math&gt;).  In this case the original inequation holds, and so the solution for the original inequation is &lt;math&gt;1&gt;x&gt;2)&lt;/math&gt;.

==Compound Inequalities==

A compound inequality is a pair of inequalities related by the words ''and'' or ''or''. In an ''and'' inequality, both inequalities must be satisfied. All possible solution values will be located between two defined numbers, and if this is impossible, the compound inequality simply has no solutions. 

Consider this example: &lt;math&gt;x+6\ge2&lt;/math&gt; '''and''' &lt;math&gt;x\le2&lt;/math&gt;. First, solve the first inequality for x to get &lt;math&gt;x\ge-4&lt;/math&gt;. All ''and'' inequalities can be rewritten as one inequality, like this: &lt;math&gt;-4\le&lt;/math&gt;&lt;math&gt;x\le2&lt;/math&gt; (write x between two ≤'s or &lt;'s or both with the smaller number on the left and the larger number on the right). Now, we can graph this inequality on a number line as a line segment. Remember, all solutions to ≤ or ≥ must be graphed with closed circles. Interpret this graphic as &quot;all numbers between -4 and 2, including -4 and 2.&quot;
         ●-----------------●
 &lt;-+-----+-----+-----+-----+-----+--&gt;
  -6    -4    -2     0     2     4

Now, let us consider ''or'' inequalities. ''Or'' inequalities usually do not have a set of solutions that satisfies both. Instead, they usually have two sets of infinite numbers that are solutions to each one. Because of this, ''or'' graphs define which numbers satisfy '''either''' equation. For example: &lt;math&gt;x\;&lt;1&lt;/math&gt; '''or''' &lt;math&gt;x-1\ge2&lt;/math&gt;. First, solve for x in the second inequality to get &lt;math&gt;x\ge3&lt;/math&gt;. Now, graph the two inequalities on the same number line. Remember to use open and closed circles accordingly.
 &lt;-------------o           ●--------&gt;
 &lt;-+-----+-----+-----+-----+-----+--&gt;
  -1     0     1     2     3     4

==Solving Inequalities with Absolute Value==

Since &lt;math&gt;'''|x| = |-x|'''&lt;/math&gt; A inequality involving absolute value will have to solved in two parts.

Solving &lt;math&gt;'''|x-6| &lt; 5'''&lt;/math&gt;

The first part would be &lt;math&gt;'''x-6 &lt; 5'''&lt;/math&gt; which gives &lt;math&gt; x &lt; 11 &lt;/math&gt;.
The second part would be &lt;math&gt; '''-(x-6) &lt; 5''' &lt;/math&gt; which solved yields &lt;math&gt;x &gt; 1&lt;/math&gt;. 

So the answer to &lt;math&gt;|x-6| &lt; 5&lt;/math&gt; is &lt;math&gt;1&lt;x&lt;11&lt;/math&gt; 

         ●----------------------------&gt;&lt;-----------------------------●
 &lt;-+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+--&gt;
   0     1     2     3     4     5     6     7     8     9     10    11    12

==Graphing Linear Inequalities==

The graphing of linear inequalities is very similar to the graphing of linear functions. A linear inequality is written in 

&lt;br&gt;&lt;br&gt;
&lt;b&gt;Previous:&lt;/b&gt;&amp;nbsp;[[Algebra/Solving equations|Solving equations]]
&lt;br&gt;
&lt;b&gt;Next:&lt;/b&gt;&amp;nbsp;[[Algebra/Quadratic functions|Quadratic functions]]</text>
      <sha1>plnrcpm9rj1om6e1z9g915x1u81yt5m</sha1>
      <model>wikitext</model>
      <format>text/x-wiki</format>
    </revision>
  </page>
  <page>
    <title>Talk:Japanese/Vocabulary/Everyday Phrases</title>
    <ns>1</ns>
    <id>939</id>
    <revision>
      <id>1926616</id>
      <parentid>1786922</parentid>
      <timestamp>2010-09-02T17:47:14Z</timestamp>
      <contributor>
        <username>Adrignola</username>
        <id>169232</id>
      </contributor>
      <minor />
      <comment>Adding {{WikiProject Languages}}</comment>
      <text xml:space="preserve">{{WikiProject Languages}} 

== Evening ==
*こんばんは - ''Konban wa'' - Good evening.
*おやすみ - ''Oyasumi'' - Good night.
**おやすみなさい - ''Oyasumi nasai'' - an emphatic &quot;Good evening&quot;.

''Oyasumi'' - good night and ''oyasumi nasai'' - good evening is it correct?

[[User:Matusz|Matusz]] 11:27, 7 Oct 2003 (UTC)

:Sorry for the late reply..
:Oyasumi &amp; Oyasumi nasai are the same, meaning good night (or literally &quot;please rest&quot;), only that the latter is more polite. 
:And konbanwa is good evening. [[User:Tomos|Tomos]] 21:19, 20 Oct 2003 (UTC)

::Eh my typo on that, gomen ne? ^_^;; -- [[User:Emperorbma|Emperorbma]] 07:04, 21 Oct 2003 (UTC)

Is it true that すみません means both ''thank you'' and ''excuse me''? Also, there seems to be ''Dōmo'' missing in the transkription of どうもすみません (section &quot;Please and Thank You&quot;). --[[User:62.203.232.241|62.203.232.241]] 14:23, 14 Nov 2004 (UTC)

== Missing ==
Could somebody add in an explanation for the past tense variations? Like in
*doumo arigatou gozaimashita ''vs'' doumo arigatou gozaimasu
*sumimasen deshita ''vs'' sumimasen
[[User:200.34.166.34|200.34.166.34]] 18:19, 3 January 2006 (UTC)

: Alright, doumo arigatou gozaimashita is little too polite to say.  Unless brown-nosing is the case.  You would simply say doumo arigatou- or you would say arigatou gozaimashita.  Likewise for the present tense form.  A rule of thumb here is the difference between shita (which is pronounce shta, unless talking to someone of high status then you will need to bust out shi-ta) and the masu only endings. 
: Masu is the present tense of a verb. For instance nani wo shimasu.  Nani is the japanese for what when used to describe the object of a verb- wo is a particle used to indicate that the verb is going to be the next thing said- and shimasu( the present form of the verb).
: Now in order to say something was doing in the past simply put shimashita. notice ''shimasu''shita.
: Gozaimasu, indicating great thanks for something will be gozaimasushita in past tense form. 
: I would type more but it really is late and I just happened to be on :-).
: Anata ha naze besuto tsukusanai desuka? &lt;small&gt;—The preceding [[w:Wikipedia:Sign your posts on talk pages|unsigned]] comment was added by [[User:70.178.16.196|70.178.16.196]] ([[User talk:70.178.16.196|talk]] • [[Special:Contributions/70.178.16.196|contribs]]) 07:05, 29 September 2007.&lt;/small&gt;</text>
      <sha1>9bevv0zkl3e93qwr2up61pjhv816446</sha1>
      <model>wikitext</model>
      <format>text/x-wiki</format>
    </revision>
  </page>
  <page>
    <title>JLPT Guide/JLPT N5 Kanji</title>
    <ns>0</ns>
    <id>940</id>
    <revision>
      <id>2595802</id>
      <parentid>2530536</parentid>
      <timestamp>2013-12-24T08:58:43Z</timestamp>
      <contributor>
        <username>Whym</username>
        <id>109931</id>
      </contributor>
      <comment>example of 会</comment>
      <text xml:space="preserve">__NOTOC__
==JLPT Level N5==
The following is a list of 81 [[Japanese/Kanji|kanji]], which is most of the kanji necessary to pass the N5 level of the [[w:Japanese Language Proficiency Test|Japanese Language Proficiency Test]] (JLPT), prior to the updating of the list several years ago.

There are now 103 kanji in the level N5 exam (22 more than listed below).  Kanji used in the N5 test are used in more difficult levels, too.

As of 2010, the JLPT no longer publishes an official vocabulary list.&lt;ref&gt;http://www.jlpt.jp/e/faq/index.html&lt;/ref&gt;

==Kanji list==

{| border=1 cellpadding=2 cellspacing:0 style=&quot;border:1px #999 solid; border-collapse:collapse;&quot;
|-
! Kanji
! Onyomi
! Kunyomi
! Meaning
! Example
|-
! 一
| いち
| ひと－つ
| one
| {{furi|一人|ひとり|}}　－　alone
|-
! 二
| ニ
| ふたーつ
| two
| {{furi|二人|ふたり|}}　－　couple
|-
! 三
| さん
| みっーつ
| three
| {{furi|三月|さんがつ|}}　－　March
|-
! 四
| し
| よん&lt;br /&gt;よっーつ
| four
| {{furi|四季|しき|}}　－　four seasons
|-
! 五
| ご
| いつーつ
| five
| {{furi|五分|ごふん|}}　－　five minutes
|-
! 六
| ろく
| むっーつ&lt;br /&gt;むい
| six
|
|-
! 七
| しち
| ななーつ&lt;br /&gt;なの
| seven
|
|-
! 八
| はち
| やっー&lt;br /&gt;よう
| eight
|
|-
! 九
| きゅう&lt;br /&gt;く
| ここのーつ
| nine
|
|-
! 十
| じゅう&lt;br /&gt;じゅーっ
| と&lt;br /&gt;とう
| ten
|
|-
! 百
| ひゃく
| もも
| hundred
|
|-
! 千
| せん
| ち
| thousand
|
|-
! 万
| ばん&lt;br /&gt;まん
| よろず
| ten thousand; myriad
|
|-
! 父
| ふ
| ちち&lt;br /&gt;とう
| father
| {{furi|お父さん|おとうさん|}}　－　father
|-
! 母
| ぼ
| はは&lt;br /&gt;かあ
| mother
| {{furi|お母さん|おかあさん}}　－　mother
|-
! 友
| ゆう
| とも
| friend
| {{furi|友だち|ともだち|}}　－　friend&lt;br /&gt;{{furi|友人|ゆうじん|}}　－　friend
|-
! 女
| じょ
| おんな
| woman&lt;br /&gt;female
| {{furi|女性|じょせい|}}　－　woman &lt;br /&gt;{{furi|女の子|おんなのこ}}　－　girl
|-
! 男
| だん
| おとこ
| man; male
| {{furi|男性|だんせい|}}　－　man&lt;br /&gt;{{furi|男の子|おとこのこ}}　－　boy
|-
! 人
| じん&lt;br /&gt;にん
| ひと
| person; person counter suffix
| {{furi|日本人|にほんじん|}}　－　Japanese person
|-
! 子
| し
| こ
| child
| {{furi|子ども|こども}}　－　child
|-
! 日
|じつ&lt;br /&gt;にち
|ひ&lt;br /&gt;か
|sun; day; day counter suffix
| {{furi|日曜日|にちようび|}}　－　Sunday &lt;br /&gt;{{furi|お日さま|おひさま|}}　－　the Sun
|-
! 月
| がつ&lt;br /&gt;げつ
| つき
| month names; other times; moon; month
| {{furi|月曜日|げつようび|}}　－　Monday&lt;br /&gt;{{furi|お月さま|おつきさま}}　－　the Moon&lt;br /&gt;{{furi|一ヶ月|いっかげつ|}}　－　a month
|-
! 火
|　か
|　ひ
|　fire; light
| {{furi|火曜日|かようび|}}　－　Tuesday &lt;br /&gt;{{furi|花火|はなび|}}　－　fire works
|-
! 水
|　すい
|　みず
|　water
| {{furi|水曜日|すいようび|}}　－　Wednesday
|-
! 木
|　もく&lt;br /&gt;ぼく
|　き
|　tree; wood
| {{furi|木曜日|もくようび|}}　－　Thursday
|-
! 金
|　きん&lt;br /&gt;こん
|　かね
|　gold&lt;br /&gt;metal; money
| {{furi|金曜日|きんようび|}}　－　Friday&lt;br /&gt; {{furi|お金もち|おかねもち}}　－　the rich
|-
! 土
|　ど&lt;br /&gt;と
|　つち
|　earth; ground; soil
| {{furi|土曜日|どようび|}} ー　Saturday
|-
! 本
|　ほん
|　もと
|　root; book; slender object counter
| {{furi|日本|にほん|}}　－　Japan&lt;br /&gt;{{furi|本屋|ほんや|}}　－　bookstore
|-
! 休
|　きゅう
|　やすーみ&lt;br /&gt;やすーむ
|　rest; vacation
| {{furi|休けい|きゅうけい}}　－　break, rest&lt;br /&gt;{{furi|夏休み|なつやすみ}}　－　summer vacation
|-
! 語
| ご
| かたり&lt;br /&gt;かたーる
| word; speech; language; narration; to tell; to speak
| {{furi|日本語|にほんご|}}　－　Japanese&lt;br /&gt; {{furi|英語|えいご|}}　－　English&lt;br /&gt;{{furi|物語|ものがたり|}}　－　tale
|-
! 年
| ねん
| とし
| year&lt;br/&gt;''year counter''
| {{furi|一年|いちねん|}}　－　a year&lt;br/&gt;{{furi|今年|ことし|}}　－　this year
|-
! 午
| ご
|
| noon
| {{furi|正午|しょうご|}}　－　noon
|-
! 前
| ぜん
| まえ
| before; in front of; previous
| {{furi|午前|ごぜん|}}　－　before noon; morning
|-
! 後
| ご&lt;br /&gt;こう
| うし(ろ)&lt;br /&gt;のち&lt;br /&gt;あと
| behind; after
| {{furi|午後|ごご|}}　－　afternoon
|-
! 時
| じ
| とき
| time; hour counter
| {{furi|時間|じかん|}}　－　time
|-
! 間
| かん&lt;br /&gt;けん
| あいだ&lt;br /&gt;ま
| interval&lt;br /&gt;space&lt;br /&gt;room&lt;br /&gt;time
| {{furi|三時間|さんじかん|}}　－　a period of three hours
|-
! 毎
| まい
| ごと
| every
| {{furi|毎日|まいにち|}}　－　everyday
|-
! 先
| せん
| さき
| previous&lt;br /&gt;ahead
| {{furi|先生|せんせい|}}　－　teacher
|-
! 今
| こん&lt;br /&gt;きん
| いま
| now&lt;br /&gt;the present
| {{furi|今日|きょう&lt;br /&gt;こんにち|}}　－　today
|-
! 何
| か
| なに&lt;br /&gt;なん
| what&lt;br /&gt;how many
| {{furi|何日|なんにち|}}　－　which day
|-
! 上
| じょう
| うえ&lt;br /&gt;あ(げる)&lt;br /&gt;あ(がる)&lt;br /&gt;のぼ(る)
| top&lt;br /&gt;above; to raise; to rise; to go up
| {{furi|上手|じょおず|}}　－　skillful
|-
! 下
| か&lt;br /&gt;げ
| した
| bottom&lt;br /&gt;under&lt;br /&gt;down
| {{furi|下着|したぎ|}}　－　underwear
|-
! 左
| さ
| ひだり
| left
| {{furi|左足|ひだりあし|}}　－　left foot
|-
! 右
| ゆう&lt;br /&gt;う
| みぎ
| right
| {{furi|右手|みぎて|}}　－　right hand
|-
! 北
| ほく
| きた
| north
| {{furi|北海道|ほっかいどう|}}　－　Hokkaido
|-
! 南
| なん
| みなみ
| south
| {{furi|南|みなみ}}アメリカ　－　South America 
|-
! 東
| とう
| ひがし
| east
| {{furi|東京|とうきょう|}} -Tokyo
|-
! 西
| せい&lt;br /&gt;さい
| にし
| west
| {{furi|関西|かんさい|}}　－　Kansai region
|-
! 外
| がい&lt;br /&gt;げ
| ほか&lt;br /&gt;そと
| outside&lt;br /&gt;foreign&lt;br /&gt;other
| {{furi|外国人|がいこくじん|}}　－　foreigner, foreign person
|-
! 名
| めい&lt;br /&gt;みょう
| な
| name&lt;br /&gt;fame&lt;br /&gt;famous; name
| {{furi|名前|なまえ|}}　－　name
|-
! 高
| こう
| たかーい
| high&lt;br /&gt;costly&lt;br /&gt;tall
| {{furi|高校|こうこう|}}　－　high school
|-
! 小
| しょう
| こ&lt;br /&gt;お&lt;br /&gt;ちいーさい
| small&lt;br /&gt;little
| {{furi|小学校|しょうがっこう|}}　－　elementary school
|-
! 中
| ちゅう
| なか
| middle&lt;br /&gt;center&lt;br /&gt;within&lt;br /&gt;inside
| {{furi|中学校|ちゅうがっこう|}}　－　junior high school
|-
! 大
| だい&lt;br /&gt;たい
| おおーきい
| great&lt;br /&gt;big
| {{furi|大学|だいがく|}}　－　university; college&lt;br /&gt;{{furi|大阪|おおさか|}}　－　Osaka
|-
! 長
| ちょう
| ながーい
| head of an organization&lt;br /&gt;leader; long
|
|-
! 半
| はん
| なかーば
| half
| {{furi|半分|はんぶん|}}　－　half
|-
! 分
| ぶん&lt;br /&gt;ふん
| わーける&lt;br /&gt;わかーる
| part&lt;br /&gt;share; minute counter; to divide&lt;br /&gt;separate; to understand
|
|-
! 学
| がく
| まなーぶ
| learning&lt;br /&gt;science; to learn
| {{furi|学校|がっこう|}}　－　school
|-
! 校
| こう
|
| school
| {{furi|学校|がっこう|}}　－　school
|-
! 生
| せい&lt;br /&gt;しょう
| うーむ&lt;br /&gt;いーきる&lt;br /&gt;なま
| birth&lt;br /&gt;life; to give birth; to live; raw
| {{furi|誕生日|たんじょうび|}}　－　birthday
|-
! 山
| さん
| やま
| mountain
| {{furi|富士山|ふじさん|}}　－　Mt. Fuji
|-
! 川
| せん
| かわ
| river&lt;br /&gt;stream
| {{furi|川上|かわかみ|}}　－　upstream
|-
! 白
| はく&lt;br /&gt;びゃく
| しら&lt;br /&gt;しろーい
| white
|
|-
! 天
| てん
| あま&lt;br /&gt;あめ
| heaven&lt;br /&gt;sky
| {{furi|天気|てんき|}}　－　weather
|-
! 雨
| う
| あま&lt;br /&gt;あめ
| rain
|
|-
! 電
| でん
|
| electricity&lt;br /&gt;electric powered
| {{furi|電話|でんわ|}}　－　telephone&lt;br /&gt;{{furi|電車|でんしゃ|}}　－　train
|-
! 気
| き&lt;br /&gt;け
|
| spirit&lt;br /&gt;intention&lt;br /&gt;mind&lt;br /&gt;power&lt;br /&gt;energy
| {{furi|空気|くうき|}}　－　air
|-
! 車
| しゃ
| くるま
| wheel; vehicle; car
| {{furi|自転車|じてんしゃ|}}　－　bicycle
|-
! 国
| こく
| くに
| country&lt;br /&gt;nation
| {{furi|中国|ちゅうごく|}}　－　China
|-
! 円
| えん
| まるーい
| circle; yen (money)
| {{furi|百円|ひゃくえん|}}　－　100 yen
|-
! 話
| わ
| はなし&lt;br /&gt;はなーす
| talk&lt;br /&gt;topic&lt;br /&gt;story; to talk
| {{furi|会話|かいわ|}}　－　conversation
|-
! 聞
| ぶん
| きーく
| to hear&lt;br /&gt;to listen&lt;br /&gt;to ask
| {{furi|新聞|しんぶん|}}　－　newspaper
|-
! 食
| じき&lt;br /&gt;しょく
| くーう&lt;br /&gt;たーべる
| eating&lt;br /&gt;meal&lt;br /&gt;food
| {{furi|食べ物|たべもの}}　－　food
|-
! 読
| どく
| よーむ
| to read
| {{furi|読書|どくしょ|}}　－　reading
|-
! 来
| らい
| くーる
| to come
| {{furi|未来|みらい|}}　－　future
|-
! 書
| しょ
| かーく
| book&lt;br /&gt;document; to write
| {{furi|書道|しょどう|}}　－　calligraphy
|-
! 見
| けん
| みーる&lt;br /&gt;みーせる
| to show
|
|-
! 行
| ぎょう&lt;br /&gt;こう
| いーく&lt;br /&gt;ゆーく
| to go
|
|-
! 出
| しゅつ
| だーす&lt;br /&gt;でーる
| to go out&lt;br /&gt;leave
| {{furi|出口|でぐち|}}　－　exit
|-
! 入
| にゅう
| いーる&lt;br /&gt;はいーる
| enter&lt;br /&gt;to go in&lt;br /&gt;to insert
| {{furi|入口|いりぐち|}}　－　entrance
|-
! 会
| カイ
| あう
| to meet
| {{furi|会社|かいしゃ|}}　－　company, corporation
|}

== References ==
&lt;references /&gt; 

[[Category:{{BOOKNAME}}|{{SUBPAGENAME}}]]
[[fr:Japonais/Kanji/Yon kyuu]]
[[hi:जे एल पी टी नी५ काञ्जी]]</text>
      <sha1>ieyb8nw32pi6ovbb45dg653jwjq5r00</sha1>
      <model>wikitext</model>
      <format>text/x-wiki</format>
    </revision>
  </page>
  <page>
    <title>CACS/Glossary/ASP</title>
    <ns>0</ns>
    <id>941</id>
    <revision>
      <id>1493473</id>
      <parentid>1493412</parentid>
      <timestamp>2009-05-07T18:12:40Z</timestamp>
      <contributor>
        <username>Darklama</username>
        <id>7662</id>
      </contributor>
      <minor />
      <comment>recat</comment>
      <text xml:space="preserve">'''Active Server Pages (ASP)''' &lt;small&gt;''(Microsoft, Web)''&lt;/small&gt;
is a technology that creates dynamic Web Pages by executing Java Script or VB Script statements on a server, generating ''HTML'', and sending the resulting Webpage to a browser. ASP is packaged as a part of the ''Personal Web Server (PWS)'' and ''Internet Information Server (IIS)'' suites.

{{subjects|computing|technology}}</text>
      <sha1>q17wagvhppam1y0xwt3jw8ckicrtxta</sha1>
      <model>wikitext</model>
      <format>text/x-wiki</format>
    </revision>
  </page>
  <page>
    <title>Computer Programming/MacOS Programming</title>
    <ns>0</ns>
    <id>942</id>
    <revision>
      <id>2497083</id>
      <parentid>1559111</parentid>
      <timestamp>2013-03-04T18:54:30Z</timestamp>
      <contributor>
        <username>Kaydell</username>
        <id>97876</id>
      </contributor>
      <comment>Rewrote this whole page to update it</comment>
      <text xml:space="preserve">==About the platform==

MacOS is the primary operating system for the Macintosh computer.  It was originally a system designed privately by Apple Inc, however with Mac OS X, it has been based on Unix.  Specifically, a modified FreeBSD operating system called &quot;Darwin&quot;.

There are many different kinds of software that can be developed for Mac OS X.  People generally think of applications, but we'll briefly cover some of the other kinds.

==Types of Software for Mac OS X==

===Applications===

Applications are what people generally think of when they think about software for Mac OS X.  Cocoa applications include: Finder, Mail, Address Book, Safari, Microsoft Word, and Microsoft Excel.  Anybody can develop applications using Apple's free development tools which includes XCode.  Mac OS X applications are developed using Objective-C though there are other possible programming languages that could be used.

The most popular languages for use on the MacOS platform is Objective-C which could be thought of as Mac OS X's &quot;native language&quot; since the Mac OS X libraries, or &quot;frameworks&quot;, all have an Objective-C interface.  Objective-C includes everything that plain C can do, and adds object-oriented programming. See: [[Programming:Objective-C|Objective-C]].

C++ can be used in developing for the Mac, but generally, it is used in addition to Objective-C rather than being in place of Objective-C.  Using both Objective-C and C++ is called &quot;Objective-C++&quot; and is considered to be optional when developing software for Mac OS X: [[Programming:c|C++]]

See [[Programming:Objective-C]] for a lesson on the basics of Objective-C [http://www.macdevcenter.com/pub/a/mac/2003/07/22/cocoa_series.html] may also be of assistance.

Some preliminary thoughts:

Objective-C is the language most commonly used in Mac OS Programming. Objective-C entered Mac OS X and has ancestry in NeXT. [[Programming:Cocoa|Cocoa]]. Before you learn Mac programming you ''must '' know the basics of C since it is the basis for Objective-C.

There used to be three separate APIs for developing a Mac application with a GUI: 

1. Classic (Mac OS 9 and lower).  Developing for the Classic API is no longer done.  When Mac OS X first came out, users and developers had a huge investment in software written for Mac Classic OS and Mac OS X used to have an emulation mode so that users could run their old software.  Apple has long since stopped support of the Classic API and Classic emulation in Mac OS X.

2. Carbon (Mac OS 8.5 up to and including Mac OS X 10.6 Snow Leopard). Carbon was an API for developers to update their applications that used the Classic API to be run without the Classic emulator.  Carbon was a great way that Apple provided developers to upgrade their software to run on Mac OS X without having to totally rewrite their software, but Carbon, like Classic, is no longer supported by Apple.

3. Cocoa (All versions of Mac OS X). Cocoa is the most native API that can be used to develop applications for Mac OS X that are truly &quot;Mac-like&quot;.  Generally, Objective-C will be used along with Cocoa, though there are other options such as Cocoa-AppleScript and Cocoa-Python, but Cocoa-Objective-C is really the &quot;mainstream&quot; way to develop Cocoa applications.

'''Resource Forks''' Files in Mac OS X have a feature that is unique to Mac OS and that is that each file on disk can have two &quot;forks&quot;.  This feature used to be used for Classic and Carbon applications to separate code from resources (such as menus, windows, etc.), and the Mac OS X file system still supports two forks, but you should only use the &quot;data fork&quot;.  The resource fork is non-standard and can be lost when transferring Mac files to other file systems.

===AppleScripts===

Another &quot;native language&quot; for developing Mac OS X applications is AppleScript.  AppleScript is a language that Apple invented to automate repetitive tasks.  The AppleScript application is located on your Mac at /Applications/Utilities/AppleScript Editor.  AppleScript can be used to record AppleEvents, the events that applications send to themselves or to other applications.  Why don't you try it out.  Open AppleScript Editor, press the record button, do some things with your other applications and watch the script write itself.  AppleScript can be used alone or it can be used along with XCode to develop Cocoa Applications using mostly AppleScript instead of Objective-C.  This option is mostly for experienced AppleScript programmers who don't know Objective-C.

===Automator Workflows===

Apple also provides an application called &quot;Automator&quot; that can be used to easily automate repetitive tasks.  It is located at /Applications/Automator.app

===Shell Scripts===

Mac OS X has an application called Terminal that provides a command-line interface to Mac OS X.  It is possible to develop scripts for the command line.  Terminal.app is located at /Applications/Utilities/Terminal.app  To create a shell script, you need a text editor.  There is a text editor that comes with Mac OS X called &quot;TextEdit.app&quot;.  It is located in /Applications/TextEdit.app.  But actually, what is better than TextEdit is a program such as TextWrangler.app which is available for free from the following link: http://www.barebones.com/products/textwrangler/ 

The shell that Terminal.app uses by default is called &quot;bash&quot;.  Here is a simple tutorial on developing bash scripts
http://www.maclife.com/article/columns/terminal_101_automate_terminal_bash_scripts

We won't go any more deeply into shell scripts here in this wikibook, but it's just good to know what they are.  You can always google for more information now that you know what to google for.

===Command Line Tools===

When you open Terminal and you learn how to type in commands.  The commands are usually command-line tools or scripts.  Above, we just talked about developing your own scripts with a text editor.  It's also possible to develop your own command-line tools, using XCode.  This is an advanced thing to do.  Usually, power-users will write a shell-script (or some other kind of thing such as an AppleScript or an Automator Workflow) but it's good to know what a command-line tool is.  Command-line tools have a textual user-interface rather than a graphical user interface (GUI).

===Java===

Java used to be treated by Apple as a &quot;first class language&quot; to develop for Mac OS, however in recent years, Apple has less support for Java.  Now with Mac OS X 10.7 &quot;Lion&quot; and 10.8 &quot;Mountain Lion&quot;, Java doesn't even come pre-installed in Mac OS X.  Java is still available, but users have to download Java from Oracle's website and install it themselves.  Apple's Mac App Store doesn't even allow Java apps to be sold at their store calling Java &quot;deprecated&quot;. 

However, there still are Mac developers who use Java because it has the advantage of being cross-platform compatible.  For example, the same source-code can be used to generate software that runs on Mac, Windows, and Linux.

Apple has said that Java reduces the Mac to the &quot;least common denominator&quot;.  That's why they support it less.

===Python===

Python is somewhat supported by Apple.  In fact, Python ships with Mac OS X and is part of the System Folder.  There are third-party libraries that allow developers to develop applications using Python and Cocoa together, but these are not very well maintained, and Python on the Mac is most suitable for developing command-line utilities, or cross-platform scripts that aren't really very Mac-like.

===Ruby===

Similar to Python.

===Websites===

Most Mac users use Safari for their web browser.  Safari uses the standards set by w3c.org  You can develop websites that work with Safari by following the standards of the w3c.org.  Remember to validate your HMTL, CSS, and JavaScript.

HTML Validator:
http://validator.w3.org/

CSS Validator:
http://jigsaw.w3.org/css-validator/

JavaScript Lint:
http://www.javascriptlint.com/online_lint.php

If you're developing websites using your Mac and using Safari, remember to test your webpages on other platforms and with other web browsers.

==Mac OS X Specific Languages==

Objective-C is really the &quot;native&quot; language for Mac OS X development

*[[Programming:Objective-C|Objective C Programming]]

You could call AppleScript a &quot;native&quot; language too, but it isn't really used to make commercial applications.  It was designed to be used by real power-users to automate their tasks.  Although it is possible to use AppleScript to build Cocoa applications in XCode, this would be more for users who already know AppleScript and don't want to learn Objective-C.

*[[AppleScript Programming|Applescript Programming]]

==Mac OS X Frameworks==

*[[Programming:Cocoa|Cocoa]]


[[Category:Computer Programming|MacOS Programming]]</text>
      <sha1>5y8l7s0619kxoe3ffuaellci1s20tdz</sha1>
      <model>wikitext</model>
      <format>text/x-wiki</format>
    </revision>
  </page>
  <page>
    <title>CACS/Hardware Introduction</title>
    <ns>0</ns>
    <id>943</id>
    <revision>
      <id>2020241</id>
      <parentid>1508370</parentid>
      <timestamp>2011-01-21T14:59:37Z</timestamp>
      <contributor>
        <username>Xania</username>
        <id>40302</id>
      </contributor>
      <minor />
      <comment>/* Outline of computer history */</comment>
      <text xml:space="preserve">This part contains a survey of the world of computer hardware.
This chapter introduces computer hardware and provides a very short history of computing.
This section introduces the computing environment thrugh a brief hitory of computers and an overview of the subjects within hardware.
==Outline of computer history==
There is some disagreement about when the digital age began. After all, the Babylonians used a kind of abacus about 500 BC. If we call it the computer age, we can get a much cleaner mark. 1951 was a watershed year, and two events identify it as the beginning. The UNIVAC became the first commercially available digital computer. That same year a research team at MIT completed the first user-interactive computer (named Whirlwind) that used a keyboard and a television screen or CRT.
Considering developments by decades gives a pretty clear picture of the evolution of computers.
*'''1950s the vacuum tube decade''' - introduction of computers and their use in business and major scientific research;
*'''1960s the mainframe decade'''  - transistor-based computers used in business;
*'''1970s the PC decade''' - the first CPU on a chip to widely available personal computers;
*'''1980s the software decade''' - windows, games, and spreadsheets make the PC useful;
*'''1990s the internet decade''' - creation and then commercialization of the Web.

===Vacuum tubes===
computer hardware notes


===Mainframes===
===Personal Computers===
===Applications===
===World Wide Web===

==Computer Hardware==
All notes of Computer hardware

[[Category:{{FULLBOOKNAME}}|{{FULLCHAPTERNAME}}]]</text>
      <sha1>0qnqgbwmc9pppmnji82c0eprt8gil6e</sha1>
      <model>wikitext</model>
      <format>text/x-wiki</format>
    </revision>
  </page>
  <page>
    <title>Talk:CACS/Hardware Introduction</title>
    <ns>1</ns>
    <id>944</id>
    <revision>
      <id>1493395</id>
      <parentid>153078</parentid>
      <timestamp>2009-05-07T18:00:39Z</timestamp>
      <contributor>
        <username>Darklama</username>
        <id>7662</id>
      </contributor>
      <minor />
      <comment>moved [[Talk:CACS:Hardware Introduction]] to [[Talk:CACS/Hardware Introduction]]:&amp;#32;per [[WB:NP]]</comment>
      <text xml:space="preserve">I've posted one part of this module early, and I'm still working in it.
The reason to do this is to promote dicussion and editing. The outline by decade, and the names assigned for each decade are NOT traditional or widespread. They are '''New''' material for this book.

Because they are new, I'd really like comments or suggestions from others. I need to find out if this structure ''(by decade)'' makes any sense, and welcome any ideas about better ways to summarize each decade. [[User:LouI|LouI]] 21:53, 3 Sep 2003 (UTC)

The trouble with decades is they are exactly 10 years long :-( You could try naming them eras or ages instead then you can divide things more natuarally. [[User:Theresa knott|Theresa knott]] 08:02, 4 Sep 2003 (UTC)</text>
      <sha1>b6rbadv5q9jba9nhfo5cf4aasomcm4y</sha1>
      <model>wikitext</model>
      <format>text/x-wiki</format>
    </revision>
  </page>
  <page>
    <title>User:Marshman</title>
    <ns>2</ns>
    <id>945</id>
    <revision>
      <id>2588121</id>
      <parentid>425598</parentid>
      <timestamp>2013-12-05T21:35:08Z</timestamp>
      <contributor>
        <username>Marshman</username>
        <id>104</id>
      </contributor>
      <text xml:space="preserve">I'm the same [[en:User:Marshman|Marshman]] from the [http://www.Wikipedia.org Wikipedia] Project but presently not active.

Here at '''WikiBooks''', I am interested in putting together a ''Study Guide'' on [[Botany]] and on on [[Ecology]], by which I mean an outline of botanical or ecological subjects organized as they would be found in a textbook with links to appropriate '''Wikipedia''' articles (where I am working to instill botanical credibility).  In time, text would need to be added to the ''Study Guide'' to introduce and transition between subjects.  Eventually, this outline could be fleshed out into a textbook.  Hopefully this approach will result in a useful product (although incomplete) much sooner than attempting to write a textbook from scratch.

I am a biologist with a background in marine biology, terrestrial botany, water quality, and ecology. I am still active in the work force as a biologist/consultant and own a 13-person consulting firm in Hawaii.</text>
      <sha1>831ndlgmz7dqwzz2jvkl3dhdmjpmqgg</sha1>
      <model>wikitext</model>
      <format>text/x-wiki</format>
    </revision>
  </page>
</mediawiki>